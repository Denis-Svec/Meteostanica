
VRS_v7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  08008270  08008270  00018270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a18  08008a18  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008a18  08008a18  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a18  08008a18  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a18  08008a18  00018a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a1c  08008a1c  00018a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200001dc  08008bfc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08008bfc  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096ed  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223c  00000000  00000000  000298f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002bb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c96  00000000  00000000  0002cb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d63  00000000  00000000  00031796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007680f  00000000  00000000  0003a4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b0d08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033b8  00000000  00000000  000b0d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008254 	.word	0x08008254

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008254 	.word	0x08008254

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa93 f3a3 	rbit	r3, r3
 8000c62:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	fab3 f383 	clz	r3, r3
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2103      	movs	r1, #3
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	401a      	ands	r2, r3
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa93 f3a3 	rbit	r3, r3
 8000c80:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	fab3 f383 	clz	r3, r3
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	431a      	orrs	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	601a      	str	r2, [r3, #0]
}
 8000c96:	bf00      	nop
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	fb01 f303 	mul.w	r3, r1, r3
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	605a      	str	r2, [r3, #4]
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b089      	sub	sp, #36	; 0x24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	fa93 f3a3 	rbit	r3, r3
 8000cec:	613b      	str	r3, [r7, #16]
  return(result);
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	fab3 f383 	clz	r3, r3
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2103      	movs	r1, #3
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	401a      	ands	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	fa93 f3a3 	rbit	r3, r3
 8000d0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fab3 f383 	clz	r3, r3
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000d20:	bf00      	nop
 8000d22:	3724      	adds	r7, #36	; 0x24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	613b      	str	r3, [r7, #16]
  return(result);
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	fab3 f383 	clz	r3, r3
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2103      	movs	r1, #3
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	401a      	ands	r2, r3
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa93 f3a3 	rbit	r3, r3
 8000d64:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	fab3 f383 	clz	r3, r3
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	431a      	orrs	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	60da      	str	r2, [r3, #12]
}
 8000d7a:	bf00      	nop
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b089      	sub	sp, #36	; 0x24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6a1a      	ldr	r2, [r3, #32]
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa93 f3a3 	rbit	r3, r3
 8000da0:	613b      	str	r3, [r7, #16]
  return(result);
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	fab3 f383 	clz	r3, r3
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	210f      	movs	r1, #15
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	401a      	ands	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fab3 f383 	clz	r3, r3
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000dd4:	bf00      	nop
 8000dd6:	3724      	adds	r7, #36	; 0x24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	fab3 f383 	clz	r3, r3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	210f      	movs	r1, #15
 8000e08:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	401a      	ands	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa93 f3a3 	rbit	r3, r3
 8000e1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	fab3 f383 	clz	r3, r3
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000e32:	bf00      	nop
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b088      	sub	sp, #32
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	613b      	str	r3, [r7, #16]
  return(result);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	fab3 f383 	clz	r3, r3
 8000e64:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e66:	e048      	b.n	8000efa <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d03a      	beq.n	8000ef4 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	461a      	mov	r2, r3
 8000e84:	69b9      	ldr	r1, [r7, #24]
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fede 	bl	8000c48 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d003      	beq.n	8000e9c <LL_GPIO_Init+0x5e>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d106      	bne.n	8000eaa <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff14 	bl	8000cd2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	69b9      	ldr	r1, [r7, #24]
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff3a 	bl	8000d2c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d119      	bne.n	8000ef4 <LL_GPIO_Init+0xb6>
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	60bb      	str	r3, [r7, #8]
  return(result);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000ece:	fab3 f383 	clz	r3, r3
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	d807      	bhi.n	8000ee6 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	461a      	mov	r2, r3
 8000edc:	69b9      	ldr	r1, [r7, #24]
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff51 	bl	8000d86 <LL_GPIO_SetAFPin_0_7>
 8000ee4:	e006      	b.n	8000ef4 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	461a      	mov	r2, r3
 8000eec:	69b9      	ldr	r1, [r7, #24]
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff76 	bl	8000de0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1af      	bne.n	8000e68 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d003      	beq.n	8000f18 <LL_GPIO_Init+0xda>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d107      	bne.n	8000f28 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	6819      	ldr	r1, [r3, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	461a      	mov	r2, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff febd 	bl	8000ca2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f043 0201 	orr.w	r2, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 0201 	bic.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0219      	lsls	r1, r3, #8
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	601a      	str	r2, [r3, #0]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000fb4:	f023 0307 	bic.w	r3, r3, #7
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	609a      	str	r2, [r3, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	611a      	str	r2, [r3, #16]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	605a      	str	r2, [r3, #4]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff65 	bl	8000f52 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6899      	ldr	r1, [r3, #8]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	461a      	mov	r2, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff6d 	bl	8000f72 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffb6 	bl	8001010 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff44 	bl	8000f32 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffa0 	bl	8000ff0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	6919      	ldr	r1, [r3, #16]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	461a      	mov	r2, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff70 	bl	8000fa0 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff81 	bl	8000fd0 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffa9 	bl	800102c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffb6 	bl	8001052 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001100:	2b40      	cmp	r3, #64	; 0x40
 8001102:	bf0c      	ite	eq
 8001104:	2301      	moveq	r3, #1
 8001106:	2300      	movne	r3, #0
 8001108:	b2db      	uxtb	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	611a      	str	r2, [r3, #16]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ffd3 	bl	80010f0 <LL_SPI_IsEnabled>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d13b      	bne.n	80011c8 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001158:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	6811      	ldr	r1, [r2, #0]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	6852      	ldr	r2, [r2, #4]
 8001164:	4311      	orrs	r1, r2
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	68d2      	ldr	r2, [r2, #12]
 800116a:	4311      	orrs	r1, r2
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	6912      	ldr	r2, [r2, #16]
 8001170:	4311      	orrs	r1, r2
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	6952      	ldr	r2, [r2, #20]
 8001176:	4311      	orrs	r1, r2
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	6992      	ldr	r2, [r2, #24]
 800117c:	4311      	orrs	r1, r2
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	69d2      	ldr	r2, [r2, #28]
 8001182:	4311      	orrs	r1, r2
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	6a12      	ldr	r2, [r2, #32]
 8001188:	430a      	orrs	r2, r1
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001198:	f023 0304 	bic.w	r3, r3, #4
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	6891      	ldr	r1, [r2, #8]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	6952      	ldr	r2, [r2, #20]
 80011a4:	0c12      	lsrs	r2, r2, #16
 80011a6:	430a      	orrs	r2, r1
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011b6:	d105      	bne.n	80011c4 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa9 	bl	8001116 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <LL_InitTick+0x30>)
 80011e8:	3b01      	subs	r3, #1
 80011ea:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <LL_InitTick+0x30>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <LL_InitTick+0x30>)
 80011f4:	2205      	movs	r2, #5
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e010 	.word	0xe000e010

08001208 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001210:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffdd 	bl	80011d4 <LL_InitTick>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <LL_mDelay+0x48>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001232:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123a:	d00c      	beq.n	8001256 <LL_mDelay+0x32>
  {
    Delay++;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3301      	adds	r3, #1
 8001240:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001242:	e008      	b.n	8001256 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <LL_mDelay+0x48>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <LL_mDelay+0x32>
    {
      Delay--;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f3      	bne.n	8001244 <LL_mDelay+0x20>
    }
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <LL_SetSystemCoreClock+0x1c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000004 	.word	0x20000004

08001290 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4013      	ands	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40021000 	.word	0x40021000

080012c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	463b      	mov	r3, r7
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012f6:	f7ff ffcb 	bl	8001290 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80012fe:	f7ff ffc7 	bl	8001290 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4);
 8001302:	2118      	movs	r1, #24
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f7ff ffda 	bl	80012c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_5);
 800130c:	2122      	movs	r1, #34	; 0x22
 800130e:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_GPIO_Init+0x80>)
 8001310:	f7ff ffd6 	bl	80012c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8001314:	2318      	movs	r3, #24
 8001316:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001318:	2301      	movs	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f7ff fd85 	bl	8000e3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_5;
 8001334:	2322      	movs	r3, #34	; 0x22
 8001336:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001338:	2301      	movs	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_GPIO_Init+0x80>)
 800134e:	f7ff fd76 	bl	8000e3e <LL_GPIO_Init>

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	48000400 	.word	0x48000400

08001360 <hts221_read_byte>:
#include "hts221.h"

uint8_t address_hyg = HTS221_DEVICE_ADDRESS_0;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af02      	add	r7, sp, #8
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_hyg, 0));
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <hts221_read_byte+0x30>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	f107 000f 	add.w	r0, r7, #15
 8001378:	2100      	movs	r1, #0
 800137a:	9100      	str	r1, [sp, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	f000 fbc1 	bl	8001b04 <i2c_master_read>
 8001382:	4603      	mov	r3, r0
 8001384:	781b      	ldrb	r3, [r3, #0]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000

08001394 <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	460a      	mov	r2, r1
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_hyg, 0);
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <hts221_write_byte+0x28>)
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	79f9      	ldrb	r1, [r7, #7]
 80013aa:	79b8      	ldrb	r0, [r7, #6]
 80013ac:	2300      	movs	r3, #0
 80013ae:	f000 fb65 	bl	8001a7c <i2c_master_write>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000000 	.word	0x20000000

080013c0 <hts221_readArray>:


void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
 80013cc:	4613      	mov	r3, r2
 80013ce:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, address_hyg, 1);
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <hts221_readArray+0x2c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	78fa      	ldrb	r2, [r7, #3]
 80013d6:	78b9      	ldrb	r1, [r7, #2]
 80013d8:	2001      	movs	r0, #1
 80013da:	9000      	str	r0, [sp, #0]
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fb91 	bl	8001b04 <i2c_master_read>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000000 	.word	0x20000000

080013f0 <hts221_get_humid>:

int hts221_get_humid()
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
	int16_t H0_T0_out, H1_T0_out, H_T_out, H0_rh, H1_rh;

	uint8_t Data[2];
	float humid = 0;
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]

	hts221_readArray(Data, 0x30, 2);
 80013fc:	463b      	mov	r3, r7
 80013fe:	2202      	movs	r2, #2
 8001400:	2130      	movs	r1, #48	; 0x30
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ffdc 	bl	80013c0 <hts221_readArray>
	H0_rh = Data[0];
 8001408:	783b      	ldrb	r3, [r7, #0]
 800140a:	817b      	strh	r3, [r7, #10]
	H1_rh = Data[1];
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	813b      	strh	r3, [r7, #8]

	hts221_readArray(Data, 0x36, 2);
 8001410:	463b      	mov	r3, r7
 8001412:	2202      	movs	r2, #2
 8001414:	2136      	movs	r1, #54	; 0x36
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ffd2 	bl	80013c0 <hts221_readArray>
	H0_T0_out = (((uint16_t)Data[1])<<8) | (uint16_t)Data[0];
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	b21a      	sxth	r2, r3
 8001422:	783b      	ldrb	r3, [r7, #0]
 8001424:	b21b      	sxth	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	80fb      	strh	r3, [r7, #6]
	hts221_readArray(Data, 0x3A, 2);
 800142a:	463b      	mov	r3, r7
 800142c:	2202      	movs	r2, #2
 800142e:	213a      	movs	r1, #58	; 0x3a
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ffc5 	bl	80013c0 <hts221_readArray>
	H1_T0_out = (((uint16_t)Data[1])<<8) | (uint16_t)Data[0];
 8001436:	787b      	ldrb	r3, [r7, #1]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b21a      	sxth	r2, r3
 800143c:	783b      	ldrb	r3, [r7, #0]
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	80bb      	strh	r3, [r7, #4]

	hts221_readArray(Data, 0x28, 2);
 8001444:	463b      	mov	r3, r7
 8001446:	2202      	movs	r2, #2
 8001448:	2128      	movs	r1, #40	; 0x28
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ffb8 	bl	80013c0 <hts221_readArray>
	H_T_out = (((uint16_t)Data[1])<<8) | (uint16_t)Data[0];
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	b21a      	sxth	r2, r3
 8001456:	783b      	ldrb	r3, [r7, #0]
 8001458:	b21b      	sxth	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	807b      	strh	r3, [r7, #2]

	humid = (((H1_rh) - (H0_rh)) * (H_T_out - H0_T0_out) / (H1_T0_out - H0_T0_out) + (H0_rh))/2.0;
 800145e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001462:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800146c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001470:	1a8a      	subs	r2, r1, r2
 8001472:	fb02 f203 	mul.w	r2, r2, r3
 8001476:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800147a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147e:	1acb      	subs	r3, r1, r3
 8001480:	fb92 f2f3 	sdiv	r2, r2, r3
 8001484:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001488:	4413      	add	r3, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f84a 	bl	8000524 <__aeabi_i2d>
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001498:	f7ff f9d8 	bl	800084c <__aeabi_ddiv>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fb80 	bl	8000ba8 <__aeabi_d2f>
 80014a8:	4603      	mov	r3, r0
 80014aa:	60fb      	str	r3, [r7, #12]


	return (humid);
 80014ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b4:	ee17 3a90 	vmov	r3, s15
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <hts221_get_temp>:

float hts221_get_temp()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
	uint8_t Data[4], T1_T0msb;
	float val, T0_degC, T1_degC;
	int16_t T0_out, T1_out, T_out;

	T1_T0msb = hts221_read_byte(0x35);
 80014c6:	2035      	movs	r0, #53	; 0x35
 80014c8:	f7ff ff4a 	bl	8001360 <hts221_read_byte>
 80014cc:	4603      	mov	r3, r0
 80014ce:	77fb      	strb	r3, [r7, #31]
	hts221_readArray(Data, 0x32, 2);
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2202      	movs	r2, #2
 80014d4:	2132      	movs	r1, #50	; 0x32
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff72 	bl	80013c0 <hts221_readArray>

	T0_degC = (Data[0] + (1 << 8) * (T1_T0msb & 0x03)) / 8.0;
 80014dc:	793b      	ldrb	r3, [r7, #4]
 80014de:	461a      	mov	r2, r3
 80014e0:	7ffb      	ldrb	r3, [r7, #31]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	4413      	add	r3, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f81a 	bl	8000524 <__aeabi_i2d>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <hts221_get_temp+0x110>)
 80014f6:	f7ff f9a9 	bl	800084c <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff fb51 	bl	8000ba8 <__aeabi_d2f>
 8001506:	4603      	mov	r3, r0
 8001508:	61bb      	str	r3, [r7, #24]
	T1_degC = (Data[1] + (1 << 6) * (T1_T0msb & 0x0C)) / 8.0;
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	461a      	mov	r2, r3
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	019b      	lsls	r3, r3, #6
 8001516:	4413      	add	r3, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f803 	bl	8000524 <__aeabi_i2d>
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <hts221_get_temp+0x110>)
 8001524:	f7ff f992 	bl	800084c <__aeabi_ddiv>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	f7ff fb3a 	bl	8000ba8 <__aeabi_d2f>
 8001534:	4603      	mov	r3, r0
 8001536:	617b      	str	r3, [r7, #20]

	hts221_readArray(Data, 0x3C, 4);
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2204      	movs	r2, #4
 800153c:	213c      	movs	r1, #60	; 0x3c
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff3e 	bl	80013c0 <hts221_readArray>
	T0_out = (((uint16_t)Data[1])<<8) | (uint16_t)Data[0];
 8001544:	797b      	ldrb	r3, [r7, #5]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	793b      	ldrb	r3, [r7, #4]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	827b      	strh	r3, [r7, #18]
	T1_out = (((uint16_t)Data[3])<<8) | (uint16_t)Data[2];
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	823b      	strh	r3, [r7, #16]

	hts221_readArray(Data, 0x2A, 2);
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2202      	movs	r2, #2
 8001564:	212a      	movs	r1, #42	; 0x2a
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff2a 	bl	80013c0 <hts221_readArray>
	T_out = (((uint16_t)Data[1])<<8) | (uint16_t)Data[0];
 800156c:	797b      	ldrb	r3, [r7, #5]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b21a      	sxth	r2, r3
 8001572:	793b      	ldrb	r3, [r7, #4]
 8001574:	b21b      	sxth	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	81fb      	strh	r3, [r7, #14]

	val = (float)(T0_degC + (int32_t)(T_out - T0_out) * (T1_degC - T0_degC) / (T1_out - T0_out));
 800157a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800157e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800158c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001590:	edd7 7a06 	vldr	s15, [r7, #24]
 8001594:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001598:	ee67 6a27 	vmul.f32	s13, s14, s15
 800159c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80015a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80015b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ba:	edc7 7a02 	vstr	s15, [r7, #8]

	return val;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	ee07 3a90 	vmov	s15, r3
}
 80015c4:	eeb0 0a67 	vmov.f32	s0, s15
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40200000 	.word	0x40200000

080015d4 <hts221_init>:

uint8_t hts221_init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 80015de:	2064      	movs	r0, #100	; 0x64
 80015e0:	f7ff fe20 	bl	8001224 <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 80015e4:	200f      	movs	r0, #15
 80015e6:	f7ff febb 	bl	8001360 <hts221_read_byte>
 80015ea:	4603      	mov	r3, r0
 80015ec:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 80015ee:	79bb      	ldrb	r3, [r7, #6]
 80015f0:	2bbc      	cmp	r3, #188	; 0xbc
 80015f2:	d101      	bne.n	80015f8 <hts221_init+0x24>
	{
		status = 1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t ctrl1 = 0b10000111;
 80015f8:	2387      	movs	r3, #135	; 0x87
 80015fa:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 80015fc:	797b      	ldrb	r3, [r7, #5]
 80015fe:	4619      	mov	r1, r3
 8001600:	2020      	movs	r0, #32
 8001602:	f7ff fec7 	bl	8001394 <hts221_write_byte>

	return status;
 8001606:	79fb      	ldrb	r3, [r7, #7]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <NVIC_EnableIRQ+0x30>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100

08001660 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da0b      	bge.n	800168c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <NVIC_SetPriority+0x4c>)
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	3b04      	subs	r3, #4
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800168a:	e009      	b.n	80016a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4907      	ldr	r1, [pc, #28]	; (80016b0 <NVIC_SetPriority+0x50>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <LL_I2C_EnableClockStretching>:
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_I2C_DisableGeneralCall>:
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	601a      	str	r2, [r3, #0]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_I2C_SetOwnAddress2>:
{
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800176e:	f023 0306 	bic.w	r3, r3, #6
 8001772:	68b9      	ldr	r1, [r7, #8]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	430a      	orrs	r2, r1
 8001778:	431a      	orrs	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	60da      	str	r2, [r3, #12]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_I2C_DisableOwnAddress2>:
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60da      	str	r2, [r3, #12]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LL_I2C_EnableIT_RX>:
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f043 0204 	orr.w	r2, r3, #4
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	601a      	str	r2, [r3, #0]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_I2C_DisableIT_RX>:
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 0204 	bic.w	r2, r3, #4
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	601a      	str	r2, [r3, #0]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_I2C_IsActiveFlag_TXIS>:
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	bf0c      	ite	eq
 80017fe:	2301      	moveq	r3, #1
 8001800:	2300      	movne	r3, #0
 8001802:	b2db      	uxtb	r3, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_I2C_IsActiveFlag_RXNE>:
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b04      	cmp	r3, #4
 8001822:	bf0c      	ite	eq
 8001824:	2301      	moveq	r3, #1
 8001826:	2300      	movne	r3, #0
 8001828:	b2db      	uxtb	r3, r3
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_I2C_IsActiveFlag_STOP>:
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	2b20      	cmp	r3, #32
 8001848:	bf0c      	ite	eq
 800184a:	2301      	moveq	r3, #1
 800184c:	2300      	movne	r3, #0
 800184e:	b2db      	uxtb	r3, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_I2C_ClearFlag_STOP>:
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	f043 0220 	orr.w	r2, r3, #32
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	61da      	str	r2, [r3, #28]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_I2C_EnableAutoEndMode>:
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	605a      	str	r2, [r3, #4]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	0d5b      	lsrs	r3, r3, #21
 80018b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <LL_I2C_HandleTransfer+0x48>)
 80018b8:	430b      	orrs	r3, r1
 80018ba:	43db      	mvns	r3, r3
 80018bc:	401a      	ands	r2, r3
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4319      	orrs	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	041b      	lsls	r3, r3, #16
 80018c8:	4319      	orrs	r1, r3
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4319      	orrs	r1, r3
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	431a      	orrs	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	03ff7bff 	.word	0x03ff7bff

080018e8 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	b2db      	uxtb	r3, r3
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_AHB1_GRP1_EnableClock>:
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4313      	orrs	r3, r2
 8001932:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4013      	ands	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000

08001950 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <LL_APB1_GRP1_EnableClock+0x2c>)
 800195a:	69da      	ldr	r2, [r3, #28]
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <LL_APB1_GRP1_EnableClock+0x2c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4313      	orrs	r3, r2
 8001962:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001966:	69da      	ldr	r2, [r3, #28]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4013      	ands	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40021000 	.word	0x40021000

08001980 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08e      	sub	sp, #56	; 0x38
 8001984:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]
 8001996:	615a      	str	r2, [r3, #20]
 8001998:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80019aa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80019ae:	f7ff ffb7 	bl	8001920 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80019b2:	23c0      	movs	r3, #192	; 0xc0
 80019b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019b6:	2302      	movs	r3, #2
 80019b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80019be:	2301      	movs	r3, #1
 80019c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80019c6:	2304      	movs	r3, #4
 80019c8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4828      	ldr	r0, [pc, #160]	; (8001a70 <MX_I2C1_Init+0xf0>)
 80019d0:	f7ff fa35 	bl	8000e3e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80019d4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80019d8:	f7ff ffba 	bl	8001950 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019dc:	f7ff fe18 	bl	8001610 <NVIC_GetPriorityGrouping>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fe64 	bl	80016b4 <NVIC_EncodePriority>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4619      	mov	r1, r3
 80019f0:	201f      	movs	r0, #31
 80019f2:	f7ff fe35 	bl	8001660 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019f6:	201f      	movs	r0, #31
 80019f8:	f7ff fe18 	bl	800162c <NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019fc:	f7ff fe08 	bl	8001610 <NVIC_GetPriorityGrouping>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fe54 	bl	80016b4 <NVIC_EncodePriority>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	2020      	movs	r0, #32
 8001a12:	f7ff fe25 	bl	8001660 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a16:	2020      	movs	r0, #32
 8001a18:	f7ff fe08 	bl	800162c <NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001a1c:	4815      	ldr	r0, [pc, #84]	; (8001a74 <MX_I2C1_Init+0xf4>)
 8001a1e:	f7ff ff2d 	bl	800187c <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001a22:	4814      	ldr	r0, [pc, #80]	; (8001a74 <MX_I2C1_Init+0xf4>)
 8001a24:	f7ff feb1 	bl	800178a <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001a28:	4812      	ldr	r0, [pc, #72]	; (8001a74 <MX_I2C1_Init+0xf4>)
 8001a2a:	f7ff fe86 	bl	800173a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001a2e:	4811      	ldr	r0, [pc, #68]	; (8001a74 <MX_I2C1_Init+0xf4>)
 8001a30:	f7ff fe73 	bl	800171a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_I2C1_Init+0xf8>)
 8001a3a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <MX_I2C1_Init+0xf4>)
 8001a58:	f7ff fb0e 	bl	8001078 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <MX_I2C1_Init+0xf4>)
 8001a62:	f7ff fe7a 	bl	800175a <LL_I2C_SetOwnAddress2>

}
 8001a66:	bf00      	nop
 8001a68:	3738      	adds	r7, #56	; 0x38
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	48000400 	.word	0x48000400
 8001a74:	40005400 	.word	0x40005400
 8001a78:	2000090e 	.word	0x2000090e

08001a7c <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	4604      	mov	r4, r0
 8001a84:	4608      	mov	r0, r1
 8001a86:	4611      	mov	r1, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71bb      	strb	r3, [r7, #6]
 8001a92:	460b      	mov	r3, r1
 8001a94:	717b      	strb	r3, [r7, #5]
 8001a96:	4613      	mov	r3, r2
 8001a98:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001a9a:	793b      	ldrb	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
 8001aa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aa6:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001aa8:	7979      	ldrb	r1, [r7, #5]
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <i2c_master_write+0x80>)
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4811      	ldr	r0, [pc, #68]	; (8001b00 <i2c_master_write+0x84>)
 8001aba:	f7ff feef 	bl	800189c <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001abe:	79bb      	ldrb	r3, [r7, #6]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480f      	ldr	r0, [pc, #60]	; (8001b00 <i2c_master_write+0x84>)
 8001ac4:	f7ff ff1d 	bl	8001902 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001ac8:	e00a      	b.n	8001ae0 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <i2c_master_write+0x84>)
 8001acc:	f7ff fe8d 	bl	80017ea <LL_I2C_IsActiveFlag_TXIS>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4809      	ldr	r0, [pc, #36]	; (8001b00 <i2c_master_write+0x84>)
 8001adc:	f7ff ff11 	bl	8001902 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001ae0:	4807      	ldr	r0, [pc, #28]	; (8001b00 <i2c_master_write+0x84>)
 8001ae2:	f7ff fea8 	bl	8001836 <LL_I2C_IsActiveFlag_STOP>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ee      	beq.n	8001aca <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001aec:	4804      	ldr	r0, [pc, #16]	; (8001b00 <i2c_master_write+0x84>)
 8001aee:	f7ff feb5 	bl	800185c <LL_I2C_ClearFlag_STOP>
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd90      	pop	{r4, r7, pc}
 8001afa:	bf00      	nop
 8001afc:	80002000 	.word	0x80002000
 8001b00:	40005400 	.word	0x40005400

08001b04 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	4611      	mov	r1, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	70fb      	strb	r3, [r7, #3]
 8001b16:	460b      	mov	r3, r1
 8001b18:	70bb      	strb	r3, [r7, #2]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001b1e:	4a30      	ldr	r2, [pc, #192]	; (8001be0 <i2c_master_read+0xdc>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001b24:	7c3b      	ldrb	r3, [r7, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001b2a:	78bb      	ldrb	r3, [r7, #2]
 8001b2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b30:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001b32:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <i2c_master_read+0xe0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001b38:	482b      	ldr	r0, [pc, #172]	; (8001be8 <i2c_master_read+0xe4>)
 8001b3a:	f7ff fe36 	bl	80017aa <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001b3e:	7879      	ldrb	r1, [r7, #1]
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <i2c_master_read+0xe8>)
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4826      	ldr	r0, [pc, #152]	; (8001be8 <i2c_master_read+0xe4>)
 8001b50:	f7ff fea4 	bl	800189c <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001b54:	e00a      	b.n	8001b6c <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001b56:	4824      	ldr	r0, [pc, #144]	; (8001be8 <i2c_master_read+0xe4>)
 8001b58:	f7ff fe47 	bl	80017ea <LL_I2C_IsActiveFlag_TXIS>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8001b62:	78bb      	ldrb	r3, [r7, #2]
 8001b64:	4619      	mov	r1, r3
 8001b66:	4820      	ldr	r0, [pc, #128]	; (8001be8 <i2c_master_read+0xe4>)
 8001b68:	f7ff fecb 	bl	8001902 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001b6c:	481e      	ldr	r0, [pc, #120]	; (8001be8 <i2c_master_read+0xe4>)
 8001b6e:	f7ff fe62 	bl	8001836 <LL_I2C_IsActiveFlag_STOP>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0ee      	beq.n	8001b56 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001b78:	481b      	ldr	r0, [pc, #108]	; (8001be8 <i2c_master_read+0xe4>)
 8001b7a:	f7ff fe6f 	bl	800185c <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001b7e:	bf00      	nop
 8001b80:	4819      	ldr	r0, [pc, #100]	; (8001be8 <i2c_master_read+0xe4>)
 8001b82:	f7ff fe58 	bl	8001836 <LL_I2C_IsActiveFlag_STOP>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f9      	bne.n	8001b80 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001b8c:	7879      	ldrb	r1, [r7, #1]
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <i2c_master_read+0xec>)
 8001b92:	9201      	str	r2, [sp, #4]
 8001b94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b98:	9200      	str	r2, [sp, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4812      	ldr	r0, [pc, #72]	; (8001be8 <i2c_master_read+0xe4>)
 8001b9e:	f7ff fe7d 	bl	800189c <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001ba2:	bf00      	nop
 8001ba4:	4810      	ldr	r0, [pc, #64]	; (8001be8 <i2c_master_read+0xe4>)
 8001ba6:	f7ff fe46 	bl	8001836 <LL_I2C_IsActiveFlag_STOP>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f9      	beq.n	8001ba4 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <i2c_master_read+0xe4>)
 8001bb2:	f7ff fe53 	bl	800185c <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001bb6:	480c      	ldr	r0, [pc, #48]	; (8001be8 <i2c_master_read+0xe4>)
 8001bb8:	f7ff fe07 	bl	80017ca <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <i2c_master_read+0xe4>)
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <i2c_master_read+0xe4>)
 8001bc2:	f043 0310 	orr.w	r3, r3, #16
 8001bc6:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <i2c_master_read+0xf0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <i2c_master_read+0xe0>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <i2c_master_read+0xdc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000244 	.word	0x20000244
 8001be4:	200001f8 	.word	0x200001f8
 8001be8:	40005400 	.word	0x40005400
 8001bec:	80002000 	.word	0x80002000
 8001bf0:	80002400 	.word	0x80002400
 8001bf4:	200001f9 	.word	0x200001f9

08001bf8 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8001bf8:	b598      	push	{r3, r4, r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001bfc:	4812      	ldr	r0, [pc, #72]	; (8001c48 <I2C1_EV_IRQHandler+0x50>)
 8001bfe:	f7ff fe07 	bl	8001810 <LL_I2C_IsActiveFlag_RXNE>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01c      	beq.n	8001c42 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <I2C1_EV_IRQHandler+0x54>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <I2C1_EV_IRQHandler+0x58>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	1c59      	adds	r1, r3, #1
 8001c14:	b2c8      	uxtb	r0, r1
 8001c16:	490e      	ldr	r1, [pc, #56]	; (8001c50 <I2C1_EV_IRQHandler+0x58>)
 8001c18:	7008      	strb	r0, [r1, #0]
 8001c1a:	18d4      	adds	r4, r2, r3
 8001c1c:	480a      	ldr	r0, [pc, #40]	; (8001c48 <I2C1_EV_IRQHandler+0x50>)
 8001c1e:	f7ff fe63 	bl	80018e8 <LL_I2C_ReceiveData8>
 8001c22:	4603      	mov	r3, r0
 8001c24:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <I2C1_EV_IRQHandler+0x58>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b13      	cmp	r3, #19
 8001c2e:	d903      	bls.n	8001c38 <I2C1_EV_IRQHandler+0x40>
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <I2C1_EV_IRQHandler+0x58>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	e001      	b.n	8001c3c <I2C1_EV_IRQHandler+0x44>
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <I2C1_EV_IRQHandler+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <I2C1_EV_IRQHandler+0x5c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
	}
}
 8001c42:	bf00      	nop
 8001c44:	bd98      	pop	{r3, r4, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40005400 	.word	0x40005400
 8001c4c:	20000244 	.word	0x20000244
 8001c50:	200001f9 	.word	0x200001f9
 8001c54:	200001f8 	.word	0x200001f8

08001c58 <lis3mdl_read_byte>:
static uint8_t sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS;

uint64_t lastMovementTick = 0;

uint8_t lis3mdl_read_byte(uint8_t reg_addr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, sLIS3MDLI2Caddress, 0));
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <lis3mdl_read_byte+0x30>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	79fa      	ldrb	r2, [r7, #7]
 8001c6c:	f107 000f 	add.w	r0, r7, #15
 8001c70:	2100      	movs	r1, #0
 8001c72:	9100      	str	r1, [sp, #0]
 8001c74:	2101      	movs	r1, #1
 8001c76:	f7ff ff45 	bl	8001b04 <i2c_master_read>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	781b      	ldrb	r3, [r3, #0]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000001 	.word	0x20000001

08001c8c <lis3mdl_write_byte>:

void lis3mdl_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	460a      	mov	r2, r1
 8001c96:	71fb      	strb	r3, [r7, #7]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, sLIS3MDLI2Caddress, 0);
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <lis3mdl_write_byte+0x28>)
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	79f9      	ldrb	r1, [r7, #7]
 8001ca2:	79b8      	ldrb	r0, [r7, #6]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f7ff fee9 	bl	8001a7c <i2c_master_write>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000001 	.word	0x20000001

08001cb8 <lis3mdl_init>:
	*z = (float)(zz/range_scale);
}


uint8_t lis3mdl_init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001cc2:	2064      	movs	r0, #100	; 0x64
 8001cc4:	f7ff faae 	bl	8001224 <LL_mDelay>

	uint8_t val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8001cc8:	200f      	movs	r0, #15
 8001cca:	f7ff ffc5 	bl	8001c58 <lis3mdl_read_byte>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71bb      	strb	r3, [r7, #6]

	if(val == LIS3MDL_WHO_AM_I_VALUE)
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	2b3d      	cmp	r3, #61	; 0x3d
 8001cd6:	d102      	bne.n	8001cde <lis3mdl_init+0x26>
	{
		status = 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	e011      	b.n	8001d02 <lis3mdl_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS_ALTERNATIVE;
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <lis3mdl_init+0x8c>)
 8001ce0:	223c      	movs	r2, #60	; 0x3c
 8001ce2:	701a      	strb	r2, [r3, #0]
		val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8001ce4:	200f      	movs	r0, #15
 8001ce6:	f7ff ffb7 	bl	8001c58 <lis3mdl_read_byte>
 8001cea:	4603      	mov	r3, r0
 8001cec:	71bb      	strb	r3, [r7, #6]
		if(val == LIS3MDL_WHO_AM_I_VALUE)
 8001cee:	79bb      	ldrb	r3, [r7, #6]
 8001cf0:	2b3d      	cmp	r3, #61	; 0x3d
 8001cf2:	d102      	bne.n	8001cfa <lis3mdl_init+0x42>
		{
			status = 1;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	71fb      	strb	r3, [r7, #7]
 8001cf8:	e003      	b.n	8001d02 <lis3mdl_init+0x4a>
		}
		else
		{
			status = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	71fb      	strb	r3, [r7, #7]
			return status;
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	e01c      	b.n	8001d3c <lis3mdl_init+0x84>
		}
	}

	//acc device init

	uint8_t ctrl1 = LIS3MDL_CTRL1_OM_UHP | LIS3MDL_CTRL1_DO_80HZ | (1 << 7);
 8001d02:	23fc      	movs	r3, #252	; 0xfc
 8001d04:	717b      	strb	r3, [r7, #5]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL1, ctrl1);
 8001d06:	797b      	ldrb	r3, [r7, #5]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	2020      	movs	r0, #32
 8001d0c:	f7ff ffbe 	bl	8001c8c <lis3mdl_write_byte>

	uint8_t ctrl2 = LIS3MDL_CTRL2_FS_4GAUS;
 8001d10:	2300      	movs	r3, #0
 8001d12:	713b      	strb	r3, [r7, #4]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL2, ctrl2);
 8001d14:	793b      	ldrb	r3, [r7, #4]
 8001d16:	4619      	mov	r1, r3
 8001d18:	2021      	movs	r0, #33	; 0x21
 8001d1a:	f7ff ffb7 	bl	8001c8c <lis3mdl_write_byte>

	uint8_t ctrl3 = LIS3MDL_CTRL3_MD_CONTINUES;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	70fb      	strb	r3, [r7, #3]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL3, ctrl3);
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	4619      	mov	r1, r3
 8001d26:	2022      	movs	r0, #34	; 0x22
 8001d28:	f7ff ffb0 	bl	8001c8c <lis3mdl_write_byte>

	uint8_t ctrl4 = LIS3MDL_CTRL4_OMZ_UHP;
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	70bb      	strb	r3, [r7, #2]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL4, ctrl4);
 8001d30:	78bb      	ldrb	r3, [r7, #2]
 8001d32:	4619      	mov	r1, r3
 8001d34:	2023      	movs	r0, #35	; 0x23
 8001d36:	f7ff ffa9 	bl	8001c8c <lis3mdl_write_byte>

	return status;
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000001 	.word	0x20000001

08001d48 <lps22hb_read_byte>:
#include "lps22hb.h"

uint8_t address_bar = LPS22HB_DEVICE_ADDRESS_0;

uint8_t lps22hb_read_byte(uint8_t reg_addr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_bar, 0));
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <lps22hb_read_byte+0x30>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	f107 000f 	add.w	r0, r7, #15
 8001d60:	2100      	movs	r1, #0
 8001d62:	9100      	str	r1, [sp, #0]
 8001d64:	2101      	movs	r1, #1
 8001d66:	f7ff fecd 	bl	8001b04 <i2c_master_read>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	781b      	ldrb	r3, [r3, #0]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000002 	.word	0x20000002

08001d7c <lps22hb_write_byte>:


void lps22hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	460a      	mov	r2, r1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_bar, 0);
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <lps22hb_write_byte+0x28>)
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	79f9      	ldrb	r1, [r7, #7]
 8001d92:	79b8      	ldrb	r0, [r7, #6]
 8001d94:	2300      	movs	r3, #0
 8001d96:	f7ff fe71 	bl	8001a7c <i2c_master_write>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000002 	.word	0x20000002

08001da8 <lps22hb_readArray>:


void lps22hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
 8001db4:	4613      	mov	r3, r2
 8001db6:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, address_bar, 1);
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <lps22hb_readArray+0x2c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	78b9      	ldrb	r1, [r7, #2]
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	9000      	str	r0, [sp, #0]
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fe9d 	bl	8001b04 <i2c_master_read>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000002 	.word	0x20000002

08001dd8 <lps22hb_get_pressure>:

float lps22hb_get_pressure()
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0

	uint32_t press;
	uint8_t data[3];
    uint8_t press_Out_L, press_Out_H, press_Out_XL;

	lps22hb_readArray(data, LPS22HB_ADDRESS_PRESS, 3);
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	2203      	movs	r2, #3
 8001de2:	2128      	movs	r1, #40	; 0x28
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ffdf 	bl	8001da8 <lps22hb_readArray>

	press_Out_XL = data[0];
 8001dea:	793b      	ldrb	r3, [r7, #4]
 8001dec:	73fb      	strb	r3, [r7, #15]
	press_Out_L = data[1];
 8001dee:	797b      	ldrb	r3, [r7, #5]
 8001df0:	73bb      	strb	r3, [r7, #14]
    press_Out_H = data[2];
 8001df2:	79bb      	ldrb	r3, [r7, #6]
 8001df4:	737b      	strb	r3, [r7, #13]

    press = (uint32_t)press_Out_L << 8 | (uint32_t)press_Out_H << 16 | press_Out_XL;
 8001df6:	7bbb      	ldrb	r3, [r7, #14]
 8001df8:	021a      	lsls	r2, r3, #8
 8001dfa:	7b7b      	ldrb	r3, [r7, #13]
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60bb      	str	r3, [r7, #8]

	return (press/4096.0);
 8001e06:	68b8      	ldr	r0, [r7, #8]
 8001e08:	f7fe fb7c 	bl	8000504 <__aeabi_ui2d>
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <lps22hb_get_pressure+0x5c>)
 8001e12:	f7fe fd1b 	bl	800084c <__aeabi_ddiv>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7fe fec3 	bl	8000ba8 <__aeabi_d2f>
 8001e22:	4603      	mov	r3, r0
 8001e24:	ee07 3a90 	vmov	s15, r3
}
 8001e28:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40b00000 	.word	0x40b00000

08001e38 <lps22hb_get_temp>:

float lps22hb_get_temp()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
	int16_t temperature;
	uint8_t data[2];

	lps22hb_readArray(data, LPS22HB_ADDRESS_TEMP, 2);
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2202      	movs	r2, #2
 8001e42:	212b      	movs	r1, #43	; 0x2b
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ffaf 	bl	8001da8 <lps22hb_readArray>

	temperature = ((int16_t)((data[1] << 8) | (data[0] & 0xff)));
 8001e4a:	797b      	ldrb	r3, [r7, #5]
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	793b      	ldrb	r3, [r7, #4]
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	4313      	orrs	r3, r2
 8001e56:	80fb      	strh	r3, [r7, #6]

    return (temperature/100);
 8001e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <lps22hb_get_temp+0x44>)
 8001e5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e62:	1152      	asrs	r2, r2, #5
 8001e64:	17db      	asrs	r3, r3, #31
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001e72:	eeb0 0a67 	vmov.f32	s0, s15
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	51eb851f 	.word	0x51eb851f

08001e80 <lps22hb_init>:

uint8_t lps22hb_init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
	uint8_t status = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8001e8a:	2064      	movs	r0, #100	; 0x64
 8001e8c:	f7ff f9ca 	bl	8001224 <LL_mDelay>

	uint8_t val = lps22hb_read_byte(LPS22HB_WHO_AM_I_ADDRES);
 8001e90:	200f      	movs	r0, #15
 8001e92:	f7ff ff59 	bl	8001d48 <lps22hb_read_byte>
 8001e96:	4603      	mov	r3, r0
 8001e98:	71bb      	strb	r3, [r7, #6]

	if(val == LPS22HB_WHO_AM_I_VALUE)
 8001e9a:	79bb      	ldrb	r3, [r7, #6]
 8001e9c:	2bb1      	cmp	r3, #177	; 0xb1
 8001e9e:	d102      	bne.n	8001ea6 <lps22hb_init+0x26>
	{
		status = 1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	71fb      	strb	r3, [r7, #7]
 8001ea4:	e011      	b.n	8001eca <lps22hb_init+0x4a>
	}
	else
	{
		address_bar = LPS22HB_DEVICE_ADDRESS_1;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <lps22hb_init+0x64>)
 8001ea8:	22ba      	movs	r2, #186	; 0xba
 8001eaa:	701a      	strb	r2, [r3, #0]
		val = lps22hb_read_byte(LPS22HB_WHO_AM_I_ADDRES);
 8001eac:	200f      	movs	r0, #15
 8001eae:	f7ff ff4b 	bl	8001d48 <lps22hb_read_byte>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71bb      	strb	r3, [r7, #6]
		if(val == LPS22HB_WHO_AM_I_VALUE)
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	2bb1      	cmp	r3, #177	; 0xb1
 8001eba:	d102      	bne.n	8001ec2 <lps22hb_init+0x42>
		{
			status = 1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	71fb      	strb	r3, [r7, #7]
 8001ec0:	e003      	b.n	8001eca <lps22hb_init+0x4a>
		}
		else
		{
			status = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	71fb      	strb	r3, [r7, #7]
			return status;
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	e007      	b.n	8001eda <lps22hb_init+0x5a>
		}
	}

	uint8_t ctrl1 = 0b01001010;
 8001eca:	234a      	movs	r3, #74	; 0x4a
 8001ecc:	717b      	strb	r3, [r7, #5]
	lps22hb_write_byte(LPS22HB_ADDRESS_CTRL1, ctrl1);
 8001ece:	797b      	ldrb	r3, [r7, #5]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	2010      	movs	r0, #16
 8001ed4:	f7ff ff52 	bl	8001d7c <lps22hb_write_byte>

	return status;
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000002 	.word	0x20000002

08001ee8 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <lsm6ds0_read_byte+0x30>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	79fa      	ldrb	r2, [r7, #7]
 8001efc:	f107 000f 	add.w	r0, r7, #15
 8001f00:	2100      	movs	r1, #0
 8001f02:	9100      	str	r1, [sp, #0]
 8001f04:	2101      	movs	r1, #1
 8001f06:	f7ff fdfd 	bl	8001b04 <i2c_master_read>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	781b      	ldrb	r3, [r3, #0]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000003 	.word	0x20000003

08001f1c <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	460a      	mov	r2, r1
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <lsm6ds0_write_byte+0x28>)
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	79f9      	ldrb	r1, [r7, #7]
 8001f32:	79b8      	ldrb	r0, [r7, #6]
 8001f34:	2300      	movs	r3, #0
 8001f36:	f7ff fda1 	bl	8001a7c <i2c_master_write>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000003 	.word	0x20000003

08001f48 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001f52:	2064      	movs	r0, #100	; 0x64
 8001f54:	f7ff f966 	bl	8001224 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001f58:	200f      	movs	r0, #15
 8001f5a:	f7ff ffc5 	bl	8001ee8 <lsm6ds0_read_byte>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001f62:	79bb      	ldrb	r3, [r7, #6]
 8001f64:	2b6a      	cmp	r3, #106	; 0x6a
 8001f66:	d102      	bne.n	8001f6e <lsm6ds0_init+0x26>
	{
		status = 1;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	71fb      	strb	r3, [r7, #7]
 8001f6c:	e00f      	b.n	8001f8e <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <lsm6ds0_init+0x74>)
 8001f70:	22d7      	movs	r2, #215	; 0xd7
 8001f72:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001f74:	200f      	movs	r0, #15
 8001f76:	f7ff ffb7 	bl	8001ee8 <lsm6ds0_read_byte>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001f7e:	79bb      	ldrb	r3, [r7, #6]
 8001f80:	2b6a      	cmp	r3, #106	; 0x6a
 8001f82:	d102      	bne.n	8001f8a <lsm6ds0_init+0x42>
		{
			status = 1;
 8001f84:	2301      	movs	r3, #1
 8001f86:	71fb      	strb	r3, [r7, #7]
 8001f88:	e001      	b.n	8001f8e <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	71fb      	strb	r3, [r7, #7]
			//return status;
		}
	}

	//acc device init
	uint8_t ctrl1 = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 8001f8e:	2010      	movs	r0, #16
 8001f90:	f7ff ffaa 	bl	8001ee8 <lsm6ds0_read_byte>
 8001f94:	4603      	mov	r3, r0
 8001f96:	717b      	strb	r3, [r7, #5]
	ctrl1 &= ~0xFC;
 8001f98:	797b      	ldrb	r3, [r7, #5]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	717b      	strb	r3, [r7, #5]
	ctrl1 |= 0x70;
 8001fa0:	797b      	ldrb	r3, [r7, #5]
 8001fa2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001fa6:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8001fa8:	797b      	ldrb	r3, [r7, #5]
 8001faa:	4619      	mov	r1, r3
 8001fac:	2010      	movs	r0, #16
 8001fae:	f7ff ffb5 	bl	8001f1c <lsm6ds0_write_byte>

	return status;
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000003 	.word	0x20000003

08001fc0 <NVIC_SetPriorityGrouping>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <NVIC_SetPriorityGrouping+0x44>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <NVIC_SetPriorityGrouping+0x44>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <LL_RCC_HSI_Enable+0x1c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <LL_RCC_HSI_Enable+0x1c>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000

08002028 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <LL_RCC_HSI_IsReady+0x20>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b02      	cmp	r3, #2
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	40021000 	.word	0x40021000

0800204c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4904      	ldr	r1, [pc, #16]	; (8002074 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000

08002078 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <LL_RCC_SetSysClkSource+0x24>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 0203 	bic.w	r2, r3, #3
 8002088:	4904      	ldr	r1, [pc, #16]	; (800209c <LL_RCC_SetSysClkSource+0x24>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000

080020a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <LL_RCC_GetSysClkSource+0x18>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 030c 	and.w	r3, r3, #12
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000

080020bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020cc:	4904      	ldr	r1, [pc, #16]	; (80020e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40021000 	.word	0x40021000

080020e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f4:	4904      	ldr	r1, [pc, #16]	; (8002108 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40021000 	.word	0x40021000

0800210c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211c:	4904      	ldr	r1, [pc, #16]	; (8002130 <LL_RCC_SetAPB2Prescaler+0x24>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40021000 	.word	0x40021000

08002134 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <LL_RCC_SetI2CClockSource+0x2c>)
 800213e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0e1b      	lsrs	r3, r3, #24
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800214e:	4904      	ldr	r1, [pc, #16]	; (8002160 <LL_RCC_SetI2CClockSource+0x2c>)
 8002150:	4313      	orrs	r3, r2
 8002152:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40021000 	.word	0x40021000

08002164 <LL_APB1_GRP1_EnableClock>:
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <LL_APB1_GRP1_EnableClock+0x2c>)
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	4907      	ldr	r1, [pc, #28]	; (8002190 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <LL_APB1_GRP1_EnableClock+0x2c>)
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4013      	ands	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40021000 	.word	0x40021000

08002194 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4013      	ands	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40021000 	.word	0x40021000

080021c4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <LL_FLASH_SetLatency+0x24>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 0207 	bic.w	r2, r3, #7
 80021d4:	4904      	ldr	r1, [pc, #16]	; (80021e8 <LL_FLASH_SetLatency+0x24>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40022000 	.word	0x40022000

080021ec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <LL_FLASH_GetLatency+0x18>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000

08002208 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b04      	cmp	r3, #4
 8002214:	d106      	bne.n	8002224 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <LL_SYSTICK_SetClkSource+0x34>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <LL_SYSTICK_SetClkSource+0x34>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8002222:	e005      	b.n	8002230 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <LL_SYSTICK_SetClkSource+0x34>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <LL_SYSTICK_SetClkSource+0x34>)
 800222a:	f023 0304 	bic.w	r3, r3, #4
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e010 	.word	0xe000e010

08002240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002242:	b085      	sub	sp, #20
 8002244:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002246:	2001      	movs	r0, #1
 8002248:	f7ff ffa4 	bl	8002194 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800224c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002250:	f7ff ff88 	bl	8002164 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002254:	2003      	movs	r0, #3
 8002256:	f7ff feb3 	bl	8001fc0 <NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */
uint8_t state;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800225a:	f000 fa33 	bl	80026c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800225e:	f7ff f83d 	bl	80012dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002262:	f7ff fb8d 	bl	8001980 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002266:	f001 fb11 	bl	800388c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  lsm6ds0_init();
 800226a:	f7ff fe6d 	bl	8001f48 <lsm6ds0_init>
  hts221_init();
 800226e:	f7ff f9b1 	bl	80015d4 <hts221_init>
  lps22hb_init();
 8002272:	f7ff fe05 	bl	8001e80 <lps22hb_init>
  lis3mdl_init();
 8002276:	f7ff fd1f 	bl	8001cb8 <lis3mdl_init>


  initCD_Pin();
 800227a:	f001 fbcf 	bl	8003a1c <initCD_Pin>
   initCS_Pin();
 800227e:	f001 fbb3 	bl	80039e8 <initCS_Pin>
   initRES_Pin();
 8002282:	f001 fbe4 	bl	8003a4e <initRES_Pin>

   LL_mDelay(50);
 8002286:	2032      	movs	r0, #50	; 0x32
 8002288:	f7fe ffcc 	bl	8001224 <LL_mDelay>

   lcdInitialise(LCD_ORIENTATION3);
 800228c:	20c0      	movs	r0, #192	; 0xc0
 800228e:	f001 fdaa 	bl	8003de6 <lcdInitialise>
   lcdClearDisplay(decodeRgbValue(0, 0, 0));
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	2000      	movs	r0, #0
 8002298:	f002 f8e8 	bl	800446c <decodeRgbValue>
 800229c:	4603      	mov	r3, r0
 800229e:	4618      	mov	r0, r3
 80022a0:	f001 fe7c 	bl	8003f9c <lcdClearDisplay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {	  // setup & info

	  state = weather();
 80022a4:	f000 ffb2 	bl	800320c <weather>
 80022a8:	4603      	mov	r3, r0
 80022aa:	71fb      	strb	r3, [r7, #7]

	  memset(formated_temp, '\0', sizeof(formated_temp));
 80022ac:	2232      	movs	r2, #50	; 0x32
 80022ae:	2100      	movs	r1, #0
 80022b0:	48d3      	ldr	r0, [pc, #844]	; (8002600 <main+0x3c0>)
 80022b2:	f002 f97d 	bl	80045b0 <memset>
	  memset(formated_pressure, '\0', sizeof(formated_pressure));
 80022b6:	2232      	movs	r2, #50	; 0x32
 80022b8:	2100      	movs	r1, #0
 80022ba:	48d2      	ldr	r0, [pc, #840]	; (8002604 <main+0x3c4>)
 80022bc:	f002 f978 	bl	80045b0 <memset>
	  memset(formated_forecast, '\0', sizeof(formated_forecast));
 80022c0:	2232      	movs	r2, #50	; 0x32
 80022c2:	2100      	movs	r1, #0
 80022c4:	48d0      	ldr	r0, [pc, #832]	; (8002608 <main+0x3c8>)
 80022c6:	f002 f973 	bl	80045b0 <memset>
	  sprintf(formated_temp, "Temp [C]: %0.1f", hts221_get_temp());
 80022ca:	f7ff f8f9 	bl	80014c0 <hts221_get_temp>
 80022ce:	ee10 3a10 	vmov	r3, s0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f938 	bl	8000548 <__aeabi_f2d>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	49cb      	ldr	r1, [pc, #812]	; (800260c <main+0x3cc>)
 80022de:	48c8      	ldr	r0, [pc, #800]	; (8002600 <main+0x3c0>)
 80022e0:	f002 fdd8 	bl	8004e94 <siprintf>
	  sprintf(formated_pressure, "Press [Pa]: %0.1f", lps22hb_get_pressure());
 80022e4:	f7ff fd78 	bl	8001dd8 <lps22hb_get_pressure>
 80022e8:	ee10 3a10 	vmov	r3, s0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f92b 	bl	8000548 <__aeabi_f2d>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	49c6      	ldr	r1, [pc, #792]	; (8002610 <main+0x3d0>)
 80022f8:	48c2      	ldr	r0, [pc, #776]	; (8002604 <main+0x3c4>)
 80022fa:	f002 fdcb 	bl	8004e94 <siprintf>

	  LL_mDelay(200);
 80022fe:	20c8      	movs	r0, #200	; 0xc8
 8002300:	f7fe ff90 	bl	8001224 <LL_mDelay>

	  lcdPutS(formated_temp, lcdTextX(2), lcdTextY(3), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 8002304:	2002      	movs	r0, #2
 8002306:	f002 f8cd 	bl	80044a4 <lcdTextX>
 800230a:	4603      	mov	r3, r0
 800230c:	461c      	mov	r4, r3
 800230e:	2003      	movs	r0, #3
 8002310:	f002 f8d9 	bl	80044c6 <lcdTextY>
 8002314:	4603      	mov	r3, r0
 8002316:	461d      	mov	r5, r3
 8002318:	22ff      	movs	r2, #255	; 0xff
 800231a:	21ff      	movs	r1, #255	; 0xff
 800231c:	20ff      	movs	r0, #255	; 0xff
 800231e:	f002 f8a5 	bl	800446c <decodeRgbValue>
 8002322:	4603      	mov	r3, r0
 8002324:	461e      	mov	r6, r3
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2000      	movs	r0, #0
 800232c:	f002 f89e 	bl	800446c <decodeRgbValue>
 8002330:	4603      	mov	r3, r0
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4633      	mov	r3, r6
 8002336:	462a      	mov	r2, r5
 8002338:	4621      	mov	r1, r4
 800233a:	48b1      	ldr	r0, [pc, #708]	; (8002600 <main+0x3c0>)
 800233c:	f002 f8d1 	bl	80044e2 <lcdPutS>
	  lcdPutS(formated_pressure, lcdTextX(2), lcdTextY(3)+10, decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 8002340:	2002      	movs	r0, #2
 8002342:	f002 f8af 	bl	80044a4 <lcdTextX>
 8002346:	4603      	mov	r3, r0
 8002348:	461d      	mov	r5, r3
 800234a:	2003      	movs	r0, #3
 800234c:	f002 f8bb 	bl	80044c6 <lcdTextY>
 8002350:	4603      	mov	r3, r0
 8002352:	330a      	adds	r3, #10
 8002354:	b2dc      	uxtb	r4, r3
 8002356:	22ff      	movs	r2, #255	; 0xff
 8002358:	21ff      	movs	r1, #255	; 0xff
 800235a:	20ff      	movs	r0, #255	; 0xff
 800235c:	f002 f886 	bl	800446c <decodeRgbValue>
 8002360:	4603      	mov	r3, r0
 8002362:	461e      	mov	r6, r3
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	2000      	movs	r0, #0
 800236a:	f002 f87f 	bl	800446c <decodeRgbValue>
 800236e:	4603      	mov	r3, r0
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	4633      	mov	r3, r6
 8002374:	4622      	mov	r2, r4
 8002376:	4629      	mov	r1, r5
 8002378:	48a2      	ldr	r0, [pc, #648]	; (8002604 <main+0x3c4>)
 800237a:	f002 f8b2 	bl	80044e2 <lcdPutS>



	  // forecast
	  if((state==1) && (last_forecast != 1))
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d139      	bne.n	80023f8 <main+0x1b8>
 8002384:	4ba3      	ldr	r3, [pc, #652]	; (8002614 <main+0x3d4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d035      	beq.n	80023f8 <main+0x1b8>
	  {
		  lcdClearDisplay(decodeRgbValue(0, 0, 0));
 800238c:	2200      	movs	r2, #0
 800238e:	2100      	movs	r1, #0
 8002390:	2000      	movs	r0, #0
 8002392:	f002 f86b 	bl	800446c <decodeRgbValue>
 8002396:	4603      	mov	r3, r0
 8002398:	4618      	mov	r0, r3
 800239a:	f001 fdff 	bl	8003f9c <lcdClearDisplay>
		  LL_mDelay(1000);
 800239e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023a2:	f7fe ff3f 	bl	8001224 <LL_mDelay>
		  DrawSunny();
 80023a6:	f000 f9c7 	bl	8002738 <DrawSunny>
		  sprintf(formated_forecast, "SUNNY");
 80023aa:	499b      	ldr	r1, [pc, #620]	; (8002618 <main+0x3d8>)
 80023ac:	4896      	ldr	r0, [pc, #600]	; (8002608 <main+0x3c8>)
 80023ae:	f002 fd71 	bl	8004e94 <siprintf>
		  lcdPutS(formated_forecast, lcdTextX(2)+40, lcdTextY(3)+25, decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 80023b2:	2002      	movs	r0, #2
 80023b4:	f002 f876 	bl	80044a4 <lcdTextX>
 80023b8:	4603      	mov	r3, r0
 80023ba:	3328      	adds	r3, #40	; 0x28
 80023bc:	b2dc      	uxtb	r4, r3
 80023be:	2003      	movs	r0, #3
 80023c0:	f002 f881 	bl	80044c6 <lcdTextY>
 80023c4:	4603      	mov	r3, r0
 80023c6:	3319      	adds	r3, #25
 80023c8:	b2dd      	uxtb	r5, r3
 80023ca:	22ff      	movs	r2, #255	; 0xff
 80023cc:	21ff      	movs	r1, #255	; 0xff
 80023ce:	20ff      	movs	r0, #255	; 0xff
 80023d0:	f002 f84c 	bl	800446c <decodeRgbValue>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461e      	mov	r6, r3
 80023d8:	2200      	movs	r2, #0
 80023da:	2100      	movs	r1, #0
 80023dc:	2000      	movs	r0, #0
 80023de:	f002 f845 	bl	800446c <decodeRgbValue>
 80023e2:	4603      	mov	r3, r0
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	4633      	mov	r3, r6
 80023e8:	462a      	mov	r2, r5
 80023ea:	4621      	mov	r1, r4
 80023ec:	4886      	ldr	r0, [pc, #536]	; (8002608 <main+0x3c8>)
 80023ee:	f002 f878 	bl	80044e2 <lcdPutS>
		  last_forecast = 1;
 80023f2:	4b88      	ldr	r3, [pc, #544]	; (8002614 <main+0x3d4>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
	  }

	  if((state==2)&& (last_forecast != 2))
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d139      	bne.n	8002472 <main+0x232>
 80023fe:	4b85      	ldr	r3, [pc, #532]	; (8002614 <main+0x3d4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d035      	beq.n	8002472 <main+0x232>
	  	  {
		  lcdClearDisplay(decodeRgbValue(0, 0, 0));
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	2000      	movs	r0, #0
 800240c:	f002 f82e 	bl	800446c <decodeRgbValue>
 8002410:	4603      	mov	r3, r0
 8002412:	4618      	mov	r0, r3
 8002414:	f001 fdc2 	bl	8003f9c <lcdClearDisplay>
		  LL_mDelay(1000);
 8002418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800241c:	f7fe ff02 	bl	8001224 <LL_mDelay>
		  DrawCloudySunny();
 8002420:	f000 f9db 	bl	80027da <DrawCloudySunny>
		  sprintf(formated_forecast, "PARTIALLY CLOUDY");
 8002424:	497d      	ldr	r1, [pc, #500]	; (800261c <main+0x3dc>)
 8002426:	4878      	ldr	r0, [pc, #480]	; (8002608 <main+0x3c8>)
 8002428:	f002 fd34 	bl	8004e94 <siprintf>
		  lcdPutS(formated_forecast, lcdTextX(2)+8, lcdTextY(3)+25, decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 800242c:	2002      	movs	r0, #2
 800242e:	f002 f839 	bl	80044a4 <lcdTextX>
 8002432:	4603      	mov	r3, r0
 8002434:	3308      	adds	r3, #8
 8002436:	b2dc      	uxtb	r4, r3
 8002438:	2003      	movs	r0, #3
 800243a:	f002 f844 	bl	80044c6 <lcdTextY>
 800243e:	4603      	mov	r3, r0
 8002440:	3319      	adds	r3, #25
 8002442:	b2dd      	uxtb	r5, r3
 8002444:	22ff      	movs	r2, #255	; 0xff
 8002446:	21ff      	movs	r1, #255	; 0xff
 8002448:	20ff      	movs	r0, #255	; 0xff
 800244a:	f002 f80f 	bl	800446c <decodeRgbValue>
 800244e:	4603      	mov	r3, r0
 8002450:	461e      	mov	r6, r3
 8002452:	2200      	movs	r2, #0
 8002454:	2100      	movs	r1, #0
 8002456:	2000      	movs	r0, #0
 8002458:	f002 f808 	bl	800446c <decodeRgbValue>
 800245c:	4603      	mov	r3, r0
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	4633      	mov	r3, r6
 8002462:	462a      	mov	r2, r5
 8002464:	4621      	mov	r1, r4
 8002466:	4868      	ldr	r0, [pc, #416]	; (8002608 <main+0x3c8>)
 8002468:	f002 f83b 	bl	80044e2 <lcdPutS>
		  last_forecast = 2;
 800246c:	4b69      	ldr	r3, [pc, #420]	; (8002614 <main+0x3d4>)
 800246e:	2202      	movs	r2, #2
 8002470:	601a      	str	r2, [r3, #0]
	  	  }

	  if((state==3)&& (last_forecast != 3))
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d139      	bne.n	80024ec <main+0x2ac>
 8002478:	4b66      	ldr	r3, [pc, #408]	; (8002614 <main+0x3d4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d035      	beq.n	80024ec <main+0x2ac>
	  	  {
	  		lcdClearDisplay(decodeRgbValue(0, 0, 0));
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	2000      	movs	r0, #0
 8002486:	f001 fff1 	bl	800446c <decodeRgbValue>
 800248a:	4603      	mov	r3, r0
 800248c:	4618      	mov	r0, r3
 800248e:	f001 fd85 	bl	8003f9c <lcdClearDisplay>
	  		LL_mDelay(1000);
 8002492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002496:	f7fe fec5 	bl	8001224 <LL_mDelay>
	  		DrawCloudy();
 800249a:	f000 fa42 	bl	8002922 <DrawCloudy>
	  		sprintf(formated_forecast, "CLOUDY");
 800249e:	4960      	ldr	r1, [pc, #384]	; (8002620 <main+0x3e0>)
 80024a0:	4859      	ldr	r0, [pc, #356]	; (8002608 <main+0x3c8>)
 80024a2:	f002 fcf7 	bl	8004e94 <siprintf>
	  		lcdPutS(formated_forecast, lcdTextX(2)+36, lcdTextY(3)+25, decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 80024a6:	2002      	movs	r0, #2
 80024a8:	f001 fffc 	bl	80044a4 <lcdTextX>
 80024ac:	4603      	mov	r3, r0
 80024ae:	3324      	adds	r3, #36	; 0x24
 80024b0:	b2dc      	uxtb	r4, r3
 80024b2:	2003      	movs	r0, #3
 80024b4:	f002 f807 	bl	80044c6 <lcdTextY>
 80024b8:	4603      	mov	r3, r0
 80024ba:	3319      	adds	r3, #25
 80024bc:	b2dd      	uxtb	r5, r3
 80024be:	22ff      	movs	r2, #255	; 0xff
 80024c0:	21ff      	movs	r1, #255	; 0xff
 80024c2:	20ff      	movs	r0, #255	; 0xff
 80024c4:	f001 ffd2 	bl	800446c <decodeRgbValue>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461e      	mov	r6, r3
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	2000      	movs	r0, #0
 80024d2:	f001 ffcb 	bl	800446c <decodeRgbValue>
 80024d6:	4603      	mov	r3, r0
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	4633      	mov	r3, r6
 80024dc:	462a      	mov	r2, r5
 80024de:	4621      	mov	r1, r4
 80024e0:	4849      	ldr	r0, [pc, #292]	; (8002608 <main+0x3c8>)
 80024e2:	f001 fffe 	bl	80044e2 <lcdPutS>
	  	  	last_forecast = 3;
 80024e6:	4b4b      	ldr	r3, [pc, #300]	; (8002614 <main+0x3d4>)
 80024e8:	2203      	movs	r2, #3
 80024ea:	601a      	str	r2, [r3, #0]
	  	  	  }

	  if((state==4)&& (last_forecast != 4))
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d139      	bne.n	8002566 <main+0x326>
 80024f2:	4b48      	ldr	r3, [pc, #288]	; (8002614 <main+0x3d4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d035      	beq.n	8002566 <main+0x326>
	  	  {
	  		lcdClearDisplay(decodeRgbValue(0, 0, 0));
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	2000      	movs	r0, #0
 8002500:	f001 ffb4 	bl	800446c <decodeRgbValue>
 8002504:	4603      	mov	r3, r0
 8002506:	4618      	mov	r0, r3
 8002508:	f001 fd48 	bl	8003f9c <lcdClearDisplay>
	  		LL_mDelay(1000);
 800250c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002510:	f7fe fe88 	bl	8001224 <LL_mDelay>
		  	DrawWorsening();
 8002514:	f000 fa60 	bl	80029d8 <DrawWorsening>
		  	sprintf(formated_forecast, "Worsening");
 8002518:	4942      	ldr	r1, [pc, #264]	; (8002624 <main+0x3e4>)
 800251a:	483b      	ldr	r0, [pc, #236]	; (8002608 <main+0x3c8>)
 800251c:	f002 fcba 	bl	8004e94 <siprintf>
		  	lcdPutS(formated_forecast, lcdTextX(2)+28, lcdTextY(3)+25, decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 8002520:	2002      	movs	r0, #2
 8002522:	f001 ffbf 	bl	80044a4 <lcdTextX>
 8002526:	4603      	mov	r3, r0
 8002528:	331c      	adds	r3, #28
 800252a:	b2dc      	uxtb	r4, r3
 800252c:	2003      	movs	r0, #3
 800252e:	f001 ffca 	bl	80044c6 <lcdTextY>
 8002532:	4603      	mov	r3, r0
 8002534:	3319      	adds	r3, #25
 8002536:	b2dd      	uxtb	r5, r3
 8002538:	22ff      	movs	r2, #255	; 0xff
 800253a:	21ff      	movs	r1, #255	; 0xff
 800253c:	20ff      	movs	r0, #255	; 0xff
 800253e:	f001 ff95 	bl	800446c <decodeRgbValue>
 8002542:	4603      	mov	r3, r0
 8002544:	461e      	mov	r6, r3
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2000      	movs	r0, #0
 800254c:	f001 ff8e 	bl	800446c <decodeRgbValue>
 8002550:	4603      	mov	r3, r0
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	4633      	mov	r3, r6
 8002556:	462a      	mov	r2, r5
 8002558:	4621      	mov	r1, r4
 800255a:	482b      	ldr	r0, [pc, #172]	; (8002608 <main+0x3c8>)
 800255c:	f001 ffc1 	bl	80044e2 <lcdPutS>
		  	last_forecast = 4;
 8002560:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <main+0x3d4>)
 8002562:	2204      	movs	r2, #4
 8002564:	601a      	str	r2, [r3, #0]
	  	  	  	  }

	  if((state==5)&& (last_forecast != 5) && (hts221_get_temp() >= 0) )
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b05      	cmp	r3, #5
 800256a:	d142      	bne.n	80025f2 <main+0x3b2>
 800256c:	4b29      	ldr	r3, [pc, #164]	; (8002614 <main+0x3d4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b05      	cmp	r3, #5
 8002572:	d03e      	beq.n	80025f2 <main+0x3b2>
 8002574:	f7fe ffa4 	bl	80014c0 <hts221_get_temp>
 8002578:	eef0 7a40 	vmov.f32	s15, s0
 800257c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002584:	db35      	blt.n	80025f2 <main+0x3b2>
	 // if((state==5)&& (last_forecast != 5)&& (temp2 >= 0))
	  	  {
	  		lcdClearDisplay(decodeRgbValue(0, 0, 0));
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	2000      	movs	r0, #0
 800258c:	f001 ff6e 	bl	800446c <decodeRgbValue>
 8002590:	4603      	mov	r3, r0
 8002592:	4618      	mov	r0, r3
 8002594:	f001 fd02 	bl	8003f9c <lcdClearDisplay>
	  		LL_mDelay(1000);
 8002598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800259c:	f7fe fe42 	bl	8001224 <LL_mDelay>
	  	  	DrawRaining();
 80025a0:	f000 faa9 	bl	8002af6 <DrawRaining>
	  	  	sprintf(formated_forecast, "Raining");
 80025a4:	4920      	ldr	r1, [pc, #128]	; (8002628 <main+0x3e8>)
 80025a6:	4818      	ldr	r0, [pc, #96]	; (8002608 <main+0x3c8>)
 80025a8:	f002 fc74 	bl	8004e94 <siprintf>
	  	  	lcdPutS(formated_forecast, lcdTextX(2)+35, lcdTextY(3)+25, decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 80025ac:	2002      	movs	r0, #2
 80025ae:	f001 ff79 	bl	80044a4 <lcdTextX>
 80025b2:	4603      	mov	r3, r0
 80025b4:	3323      	adds	r3, #35	; 0x23
 80025b6:	b2dc      	uxtb	r4, r3
 80025b8:	2003      	movs	r0, #3
 80025ba:	f001 ff84 	bl	80044c6 <lcdTextY>
 80025be:	4603      	mov	r3, r0
 80025c0:	3319      	adds	r3, #25
 80025c2:	b2dd      	uxtb	r5, r3
 80025c4:	22ff      	movs	r2, #255	; 0xff
 80025c6:	21ff      	movs	r1, #255	; 0xff
 80025c8:	20ff      	movs	r0, #255	; 0xff
 80025ca:	f001 ff4f 	bl	800446c <decodeRgbValue>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461e      	mov	r6, r3
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	2000      	movs	r0, #0
 80025d8:	f001 ff48 	bl	800446c <decodeRgbValue>
 80025dc:	4603      	mov	r3, r0
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4633      	mov	r3, r6
 80025e2:	462a      	mov	r2, r5
 80025e4:	4621      	mov	r1, r4
 80025e6:	4808      	ldr	r0, [pc, #32]	; (8002608 <main+0x3c8>)
 80025e8:	f001 ff7b 	bl	80044e2 <lcdPutS>
	  	  	last_forecast = 5;
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <main+0x3d4>)
 80025ee:	2205      	movs	r2, #5
 80025f0:	601a      	str	r2, [r3, #0]
	  	  	 }

	  if((state==5)&& (last_forecast != 5)&& (hts221_get_temp() < 0))
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d159      	bne.n	80026ac <main+0x46c>
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <main+0x3d4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	e015      	b.n	800262c <main+0x3ec>
 8002600:	2000027c 	.word	0x2000027c
 8002604:	20000248 	.word	0x20000248
 8002608:	200002b0 	.word	0x200002b0
 800260c:	08008270 	.word	0x08008270
 8002610:	08008280 	.word	0x08008280
 8002614:	200001fc 	.word	0x200001fc
 8002618:	08008294 	.word	0x08008294
 800261c:	0800829c 	.word	0x0800829c
 8002620:	080082b0 	.word	0x080082b0
 8002624:	080082b8 	.word	0x080082b8
 8002628:	080082c4 	.word	0x080082c4
 800262c:	d03e      	beq.n	80026ac <main+0x46c>
 800262e:	f7fe ff47 	bl	80014c0 <hts221_get_temp>
 8002632:	eef0 7a40 	vmov.f32	s15, s0
 8002636:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	d535      	bpl.n	80026ac <main+0x46c>
	//  if((state==5)&& (last_forecast != 5)&& (temp2 < 0))
	  	  	  {
	  	  		lcdClearDisplay(decodeRgbValue(0, 0, 0));
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	2000      	movs	r0, #0
 8002646:	f001 ff11 	bl	800446c <decodeRgbValue>
 800264a:	4603      	mov	r3, r0
 800264c:	4618      	mov	r0, r3
 800264e:	f001 fca5 	bl	8003f9c <lcdClearDisplay>
	  	  		LL_mDelay(1000);
 8002652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002656:	f7fe fde5 	bl	8001224 <LL_mDelay>
	  	  	  	DrawSnow();
 800265a:	f000 fb4f 	bl	8002cfc <DrawSnow>
	  	  	  	sprintf(formated_forecast, "Snowing");
 800265e:	4916      	ldr	r1, [pc, #88]	; (80026b8 <main+0x478>)
 8002660:	4816      	ldr	r0, [pc, #88]	; (80026bc <main+0x47c>)
 8002662:	f002 fc17 	bl	8004e94 <siprintf>
	  	  	  	lcdPutS(formated_forecast, lcdTextX(2)+35, lcdTextY(3)+25, decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 8002666:	2002      	movs	r0, #2
 8002668:	f001 ff1c 	bl	80044a4 <lcdTextX>
 800266c:	4603      	mov	r3, r0
 800266e:	3323      	adds	r3, #35	; 0x23
 8002670:	b2dc      	uxtb	r4, r3
 8002672:	2003      	movs	r0, #3
 8002674:	f001 ff27 	bl	80044c6 <lcdTextY>
 8002678:	4603      	mov	r3, r0
 800267a:	3319      	adds	r3, #25
 800267c:	b2dd      	uxtb	r5, r3
 800267e:	22ff      	movs	r2, #255	; 0xff
 8002680:	21ff      	movs	r1, #255	; 0xff
 8002682:	20ff      	movs	r0, #255	; 0xff
 8002684:	f001 fef2 	bl	800446c <decodeRgbValue>
 8002688:	4603      	mov	r3, r0
 800268a:	461e      	mov	r6, r3
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	2000      	movs	r0, #0
 8002692:	f001 feeb 	bl	800446c <decodeRgbValue>
 8002696:	4603      	mov	r3, r0
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	4633      	mov	r3, r6
 800269c:	462a      	mov	r2, r5
 800269e:	4621      	mov	r1, r4
 80026a0:	4806      	ldr	r0, [pc, #24]	; (80026bc <main+0x47c>)
 80026a2:	f001 ff1e 	bl	80044e2 <lcdPutS>
	  	  	  	last_forecast = 5;
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <main+0x480>)
 80026a8:	2205      	movs	r2, #5
 80026aa:	601a      	str	r2, [r3, #0]
	  	  	  	 }




	  LL_mDelay(1000);
 80026ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b0:	f7fe fdb8 	bl	8001224 <LL_mDelay>
	  state = weather();
 80026b4:	e5f6      	b.n	80022a4 <main+0x64>
 80026b6:	bf00      	nop
 80026b8:	080082cc 	.word	0x080082cc
 80026bc:	200002b0 	.word	0x200002b0
 80026c0:	200001fc 	.word	0x200001fc

080026c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7ff fd7b 	bl	80021c4 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80026ce:	f7ff fd8d 	bl	80021ec <LL_FLASH_GetLatency>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <SystemClock_Config+0x18>
  {
  Error_Handler();
 80026d8:	f000 fb6b 	bl	8002db2 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80026dc:	f7ff fc94 	bl	8002008 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80026e0:	bf00      	nop
 80026e2:	f7ff fca1 	bl	8002028 <LL_RCC_HSI_IsReady>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d1fa      	bne.n	80026e2 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80026ec:	2010      	movs	r0, #16
 80026ee:	f7ff fcad 	bl	800204c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7ff fce2 	bl	80020bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7ff fcf3 	bl	80020e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80026fe:	2000      	movs	r0, #0
 8002700:	f7ff fd04 	bl	800210c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002704:	2000      	movs	r0, #0
 8002706:	f7ff fcb7 	bl	8002078 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800270a:	bf00      	nop
 800270c:	f7ff fcc8 	bl	80020a0 <LL_RCC_GetSysClkSource>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1fa      	bne.n	800270c <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8002716:	4807      	ldr	r0, [pc, #28]	; (8002734 <SystemClock_Config+0x70>)
 8002718:	f7fe fd76 	bl	8001208 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800271c:	2004      	movs	r0, #4
 800271e:	f7ff fd73 	bl	8002208 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8002722:	4804      	ldr	r0, [pc, #16]	; (8002734 <SystemClock_Config+0x70>)
 8002724:	f7fe fda4 	bl	8001270 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8002728:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800272c:	f7ff fd02 	bl	8002134 <LL_RCC_SetI2CClockSource>
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	007a1200 	.word	0x007a1200

08002738 <DrawSunny>:

/* USER CODE BEGIN 4 */
void DrawSunny(void){
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b085      	sub	sp, #20
 800273c:	af02      	add	r7, sp, #8

	for(int i=12; i>0;i--){
 800273e:	230c      	movs	r3, #12
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	e00f      	b.n	8002764 <DrawSunny+0x2c>
		lcdCircle(64, 85, i, decodeRgbValue(255, 255, 51));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	b21c      	sxth	r4, r3
 8002748:	2233      	movs	r2, #51	; 0x33
 800274a:	21ff      	movs	r1, #255	; 0xff
 800274c:	20ff      	movs	r0, #255	; 0xff
 800274e:	f001 fe8d 	bl	800446c <decodeRgbValue>
 8002752:	4603      	mov	r3, r0
 8002754:	4622      	mov	r2, r4
 8002756:	2155      	movs	r1, #85	; 0x55
 8002758:	2040      	movs	r0, #64	; 0x40
 800275a:	f001 fd44 	bl	80041e6 <lcdCircle>
	for(int i=12; i>0;i--){
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3b01      	subs	r3, #1
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	dcec      	bgt.n	8002744 <DrawSunny+0xc>
	}

	lcdLine(64, 65, 64, 105, decodeRgbValue(255, 255, 51));
 800276a:	2233      	movs	r2, #51	; 0x33
 800276c:	21ff      	movs	r1, #255	; 0xff
 800276e:	20ff      	movs	r0, #255	; 0xff
 8002770:	f001 fe7c 	bl	800446c <decodeRgbValue>
 8002774:	4603      	mov	r3, r0
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2369      	movs	r3, #105	; 0x69
 800277a:	2240      	movs	r2, #64	; 0x40
 800277c:	2141      	movs	r1, #65	; 0x41
 800277e:	2040      	movs	r0, #64	; 0x40
 8002780:	f001 fc85 	bl	800408e <lcdLine>
	lcdLine(42, 85, 85, 85, decodeRgbValue(255, 255, 51));
 8002784:	2233      	movs	r2, #51	; 0x33
 8002786:	21ff      	movs	r1, #255	; 0xff
 8002788:	20ff      	movs	r0, #255	; 0xff
 800278a:	f001 fe6f 	bl	800446c <decodeRgbValue>
 800278e:	4603      	mov	r3, r0
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2355      	movs	r3, #85	; 0x55
 8002794:	2255      	movs	r2, #85	; 0x55
 8002796:	2155      	movs	r1, #85	; 0x55
 8002798:	202a      	movs	r0, #42	; 0x2a
 800279a:	f001 fc78 	bl	800408e <lcdLine>
	lcdLine(50, 70, 79, 99, decodeRgbValue(255, 255, 51));
 800279e:	2233      	movs	r2, #51	; 0x33
 80027a0:	21ff      	movs	r1, #255	; 0xff
 80027a2:	20ff      	movs	r0, #255	; 0xff
 80027a4:	f001 fe62 	bl	800446c <decodeRgbValue>
 80027a8:	4603      	mov	r3, r0
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2363      	movs	r3, #99	; 0x63
 80027ae:	224f      	movs	r2, #79	; 0x4f
 80027b0:	2146      	movs	r1, #70	; 0x46
 80027b2:	2032      	movs	r0, #50	; 0x32
 80027b4:	f001 fc6b 	bl	800408e <lcdLine>
	lcdLine(49, 100, 80, 70, decodeRgbValue(255, 255, 51));
 80027b8:	2233      	movs	r2, #51	; 0x33
 80027ba:	21ff      	movs	r1, #255	; 0xff
 80027bc:	20ff      	movs	r0, #255	; 0xff
 80027be:	f001 fe55 	bl	800446c <decodeRgbValue>
 80027c2:	4603      	mov	r3, r0
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2346      	movs	r3, #70	; 0x46
 80027c8:	2250      	movs	r2, #80	; 0x50
 80027ca:	2164      	movs	r1, #100	; 0x64
 80027cc:	2031      	movs	r0, #49	; 0x31
 80027ce:	f001 fc5e 	bl	800408e <lcdLine>
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd90      	pop	{r4, r7, pc}

080027da <DrawCloudySunny>:

void DrawCloudySunny(void){
 80027da:	b590      	push	{r4, r7, lr}
 80027dc:	b087      	sub	sp, #28
 80027de:	af02      	add	r7, sp, #8
	//sun
	for(int i=12; i>0;i--){
 80027e0:	230c      	movs	r3, #12
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e00f      	b.n	8002806 <DrawCloudySunny+0x2c>
			lcdCircle(64, 85, i, decodeRgbValue(255, 255, 51));
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	b21c      	sxth	r4, r3
 80027ea:	2233      	movs	r2, #51	; 0x33
 80027ec:	21ff      	movs	r1, #255	; 0xff
 80027ee:	20ff      	movs	r0, #255	; 0xff
 80027f0:	f001 fe3c 	bl	800446c <decodeRgbValue>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4622      	mov	r2, r4
 80027f8:	2155      	movs	r1, #85	; 0x55
 80027fa:	2040      	movs	r0, #64	; 0x40
 80027fc:	f001 fcf3 	bl	80041e6 <lcdCircle>
	for(int i=12; i>0;i--){
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3b01      	subs	r3, #1
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	dcec      	bgt.n	80027e6 <DrawCloudySunny+0xc>
		}

	for(int i=10; i>0;i--){
 800280c:	230a      	movs	r3, #10
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	e01c      	b.n	800284c <DrawCloudySunny+0x72>
					lcdCircle(54, 100, i, decodeRgbValue(255, 255, 51));
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	b21c      	sxth	r4, r3
 8002816:	2233      	movs	r2, #51	; 0x33
 8002818:	21ff      	movs	r1, #255	; 0xff
 800281a:	20ff      	movs	r0, #255	; 0xff
 800281c:	f001 fe26 	bl	800446c <decodeRgbValue>
 8002820:	4603      	mov	r3, r0
 8002822:	4622      	mov	r2, r4
 8002824:	2164      	movs	r1, #100	; 0x64
 8002826:	2036      	movs	r0, #54	; 0x36
 8002828:	f001 fcdd 	bl	80041e6 <lcdCircle>
					lcdCircle(74, 100, i, decodeRgbValue(255, 255, 51));
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	b21c      	sxth	r4, r3
 8002830:	2233      	movs	r2, #51	; 0x33
 8002832:	21ff      	movs	r1, #255	; 0xff
 8002834:	20ff      	movs	r0, #255	; 0xff
 8002836:	f001 fe19 	bl	800446c <decodeRgbValue>
 800283a:	4603      	mov	r3, r0
 800283c:	4622      	mov	r2, r4
 800283e:	2164      	movs	r1, #100	; 0x64
 8002840:	204a      	movs	r0, #74	; 0x4a
 8002842:	f001 fcd0 	bl	80041e6 <lcdCircle>
	for(int i=10; i>0;i--){
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3b01      	subs	r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	dcdf      	bgt.n	8002812 <DrawCloudySunny+0x38>
	}

	for(int i=8; i>0;i--){
 8002852:	2308      	movs	r3, #8
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	e029      	b.n	80028ac <DrawCloudySunny+0xd2>

				lcdCircle(64, 105, i, decodeRgbValue(255, 255, 255));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	b21c      	sxth	r4, r3
 800285c:	22ff      	movs	r2, #255	; 0xff
 800285e:	21ff      	movs	r1, #255	; 0xff
 8002860:	20ff      	movs	r0, #255	; 0xff
 8002862:	f001 fe03 	bl	800446c <decodeRgbValue>
 8002866:	4603      	mov	r3, r0
 8002868:	4622      	mov	r2, r4
 800286a:	2169      	movs	r1, #105	; 0x69
 800286c:	2040      	movs	r0, #64	; 0x40
 800286e:	f001 fcba 	bl	80041e6 <lcdCircle>
				lcdCircle(44, 105, i, decodeRgbValue(255, 255, 255));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	b21c      	sxth	r4, r3
 8002876:	22ff      	movs	r2, #255	; 0xff
 8002878:	21ff      	movs	r1, #255	; 0xff
 800287a:	20ff      	movs	r0, #255	; 0xff
 800287c:	f001 fdf6 	bl	800446c <decodeRgbValue>
 8002880:	4603      	mov	r3, r0
 8002882:	4622      	mov	r2, r4
 8002884:	2169      	movs	r1, #105	; 0x69
 8002886:	202c      	movs	r0, #44	; 0x2c
 8002888:	f001 fcad 	bl	80041e6 <lcdCircle>
				lcdCircle(84, 105, i, decodeRgbValue(255, 255, 255));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	b21c      	sxth	r4, r3
 8002890:	22ff      	movs	r2, #255	; 0xff
 8002892:	21ff      	movs	r1, #255	; 0xff
 8002894:	20ff      	movs	r0, #255	; 0xff
 8002896:	f001 fde9 	bl	800446c <decodeRgbValue>
 800289a:	4603      	mov	r3, r0
 800289c:	4622      	mov	r2, r4
 800289e:	2169      	movs	r1, #105	; 0x69
 80028a0:	2054      	movs	r0, #84	; 0x54
 80028a2:	f001 fca0 	bl	80041e6 <lcdCircle>
	for(int i=8; i>0;i--){
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	dcd2      	bgt.n	8002858 <DrawCloudySunny+0x7e>
			}



		lcdLine(64, 65, 64, 82, decodeRgbValue(255, 255, 255));
 80028b2:	22ff      	movs	r2, #255	; 0xff
 80028b4:	21ff      	movs	r1, #255	; 0xff
 80028b6:	20ff      	movs	r0, #255	; 0xff
 80028b8:	f001 fdd8 	bl	800446c <decodeRgbValue>
 80028bc:	4603      	mov	r3, r0
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2352      	movs	r3, #82	; 0x52
 80028c2:	2240      	movs	r2, #64	; 0x40
 80028c4:	2141      	movs	r1, #65	; 0x41
 80028c6:	2040      	movs	r0, #64	; 0x40
 80028c8:	f001 fbe1 	bl	800408e <lcdLine>
		lcdLine(42, 85, 85, 85, decodeRgbValue(255, 255, 255));
 80028cc:	22ff      	movs	r2, #255	; 0xff
 80028ce:	21ff      	movs	r1, #255	; 0xff
 80028d0:	20ff      	movs	r0, #255	; 0xff
 80028d2:	f001 fdcb 	bl	800446c <decodeRgbValue>
 80028d6:	4603      	mov	r3, r0
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2355      	movs	r3, #85	; 0x55
 80028dc:	2255      	movs	r2, #85	; 0x55
 80028de:	2155      	movs	r1, #85	; 0x55
 80028e0:	202a      	movs	r0, #42	; 0x2a
 80028e2:	f001 fbd4 	bl	800408e <lcdLine>
		lcdLine(50, 70, 79, 99, decodeRgbValue(255, 255, 255));
 80028e6:	22ff      	movs	r2, #255	; 0xff
 80028e8:	21ff      	movs	r1, #255	; 0xff
 80028ea:	20ff      	movs	r0, #255	; 0xff
 80028ec:	f001 fdbe 	bl	800446c <decodeRgbValue>
 80028f0:	4603      	mov	r3, r0
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2363      	movs	r3, #99	; 0x63
 80028f6:	224f      	movs	r2, #79	; 0x4f
 80028f8:	2146      	movs	r1, #70	; 0x46
 80028fa:	2032      	movs	r0, #50	; 0x32
 80028fc:	f001 fbc7 	bl	800408e <lcdLine>
		lcdLine(49, 100, 80, 70, decodeRgbValue(255, 255, 255));
 8002900:	22ff      	movs	r2, #255	; 0xff
 8002902:	21ff      	movs	r1, #255	; 0xff
 8002904:	20ff      	movs	r0, #255	; 0xff
 8002906:	f001 fdb1 	bl	800446c <decodeRgbValue>
 800290a:	4603      	mov	r3, r0
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2346      	movs	r3, #70	; 0x46
 8002910:	2250      	movs	r2, #80	; 0x50
 8002912:	2164      	movs	r1, #100	; 0x64
 8002914:	2031      	movs	r0, #49	; 0x31
 8002916:	f001 fbba 	bl	800408e <lcdLine>
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}

08002922 <DrawCloudy>:


void DrawCloudy(void){
 8002922:	b590      	push	{r4, r7, lr}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0

	for(int i=10; i>0;i--){
 8002928:	230a      	movs	r3, #10
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	e01c      	b.n	8002968 <DrawCloudy+0x46>
					lcdCircle(54, 100, i, decodeRgbValue(255, 255, 255));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	b21c      	sxth	r4, r3
 8002932:	22ff      	movs	r2, #255	; 0xff
 8002934:	21ff      	movs	r1, #255	; 0xff
 8002936:	20ff      	movs	r0, #255	; 0xff
 8002938:	f001 fd98 	bl	800446c <decodeRgbValue>
 800293c:	4603      	mov	r3, r0
 800293e:	4622      	mov	r2, r4
 8002940:	2164      	movs	r1, #100	; 0x64
 8002942:	2036      	movs	r0, #54	; 0x36
 8002944:	f001 fc4f 	bl	80041e6 <lcdCircle>
					lcdCircle(74, 100, i, decodeRgbValue(255, 255, 255));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	b21c      	sxth	r4, r3
 800294c:	22ff      	movs	r2, #255	; 0xff
 800294e:	21ff      	movs	r1, #255	; 0xff
 8002950:	20ff      	movs	r0, #255	; 0xff
 8002952:	f001 fd8b 	bl	800446c <decodeRgbValue>
 8002956:	4603      	mov	r3, r0
 8002958:	4622      	mov	r2, r4
 800295a:	2164      	movs	r1, #100	; 0x64
 800295c:	204a      	movs	r0, #74	; 0x4a
 800295e:	f001 fc42 	bl	80041e6 <lcdCircle>
	for(int i=10; i>0;i--){
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3b01      	subs	r3, #1
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	dcdf      	bgt.n	800292e <DrawCloudy+0xc>
	}

	for(int i=8; i>0;i--){
 800296e:	2308      	movs	r3, #8
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	e029      	b.n	80029c8 <DrawCloudy+0xa6>

				lcdCircle(64, 105, i, decodeRgbValue(255, 255, 255));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	b21c      	sxth	r4, r3
 8002978:	22ff      	movs	r2, #255	; 0xff
 800297a:	21ff      	movs	r1, #255	; 0xff
 800297c:	20ff      	movs	r0, #255	; 0xff
 800297e:	f001 fd75 	bl	800446c <decodeRgbValue>
 8002982:	4603      	mov	r3, r0
 8002984:	4622      	mov	r2, r4
 8002986:	2169      	movs	r1, #105	; 0x69
 8002988:	2040      	movs	r0, #64	; 0x40
 800298a:	f001 fc2c 	bl	80041e6 <lcdCircle>
				lcdCircle(44, 105, i, decodeRgbValue(255, 255, 255));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b21c      	sxth	r4, r3
 8002992:	22ff      	movs	r2, #255	; 0xff
 8002994:	21ff      	movs	r1, #255	; 0xff
 8002996:	20ff      	movs	r0, #255	; 0xff
 8002998:	f001 fd68 	bl	800446c <decodeRgbValue>
 800299c:	4603      	mov	r3, r0
 800299e:	4622      	mov	r2, r4
 80029a0:	2169      	movs	r1, #105	; 0x69
 80029a2:	202c      	movs	r0, #44	; 0x2c
 80029a4:	f001 fc1f 	bl	80041e6 <lcdCircle>
				lcdCircle(84, 105, i, decodeRgbValue(255, 255, 255));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b21c      	sxth	r4, r3
 80029ac:	22ff      	movs	r2, #255	; 0xff
 80029ae:	21ff      	movs	r1, #255	; 0xff
 80029b0:	20ff      	movs	r0, #255	; 0xff
 80029b2:	f001 fd5b 	bl	800446c <decodeRgbValue>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4622      	mov	r2, r4
 80029ba:	2169      	movs	r1, #105	; 0x69
 80029bc:	2054      	movs	r0, #84	; 0x54
 80029be:	f001 fc12 	bl	80041e6 <lcdCircle>
	for(int i=8; i>0;i--){
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	dcd2      	bgt.n	8002974 <DrawCloudy+0x52>
			}
}
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd90      	pop	{r4, r7, pc}

080029d8 <DrawWorsening>:

void DrawWorsening(void){
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0

	for(int i=10; i>0;i--){
 80029de:	230a      	movs	r3, #10
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	e036      	b.n	8002a52 <DrawWorsening+0x7a>
					lcdCircle(54, 100, i, decodeRgbValue(255, 255, 255));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	b21c      	sxth	r4, r3
 80029e8:	22ff      	movs	r2, #255	; 0xff
 80029ea:	21ff      	movs	r1, #255	; 0xff
 80029ec:	20ff      	movs	r0, #255	; 0xff
 80029ee:	f001 fd3d 	bl	800446c <decodeRgbValue>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4622      	mov	r2, r4
 80029f6:	2164      	movs	r1, #100	; 0x64
 80029f8:	2036      	movs	r0, #54	; 0x36
 80029fa:	f001 fbf4 	bl	80041e6 <lcdCircle>
					lcdCircle(74, 100, i, decodeRgbValue(255, 255, 255));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	b21c      	sxth	r4, r3
 8002a02:	22ff      	movs	r2, #255	; 0xff
 8002a04:	21ff      	movs	r1, #255	; 0xff
 8002a06:	20ff      	movs	r0, #255	; 0xff
 8002a08:	f001 fd30 	bl	800446c <decodeRgbValue>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4622      	mov	r2, r4
 8002a10:	2164      	movs	r1, #100	; 0x64
 8002a12:	204a      	movs	r0, #74	; 0x4a
 8002a14:	f001 fbe7 	bl	80041e6 <lcdCircle>
					lcdCircle(94, 100, i, decodeRgbValue(255, 255, 255));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	b21c      	sxth	r4, r3
 8002a1c:	22ff      	movs	r2, #255	; 0xff
 8002a1e:	21ff      	movs	r1, #255	; 0xff
 8002a20:	20ff      	movs	r0, #255	; 0xff
 8002a22:	f001 fd23 	bl	800446c <decodeRgbValue>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4622      	mov	r2, r4
 8002a2a:	2164      	movs	r1, #100	; 0x64
 8002a2c:	205e      	movs	r0, #94	; 0x5e
 8002a2e:	f001 fbda 	bl	80041e6 <lcdCircle>
					lcdCircle(34, 100, i, decodeRgbValue(255, 255, 255));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	b21c      	sxth	r4, r3
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	21ff      	movs	r1, #255	; 0xff
 8002a3a:	20ff      	movs	r0, #255	; 0xff
 8002a3c:	f001 fd16 	bl	800446c <decodeRgbValue>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4622      	mov	r2, r4
 8002a44:	2164      	movs	r1, #100	; 0x64
 8002a46:	2022      	movs	r0, #34	; 0x22
 8002a48:	f001 fbcd 	bl	80041e6 <lcdCircle>
	for(int i=10; i>0;i--){
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	dcc5      	bgt.n	80029e4 <DrawWorsening+0xc>
	}

	for(int i=8; i>0;i--){
 8002a58:	2308      	movs	r3, #8
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	e043      	b.n	8002ae6 <DrawWorsening+0x10e>

				lcdCircle(64, 105, i, decodeRgbValue(255, 255, 255));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	b21c      	sxth	r4, r3
 8002a62:	22ff      	movs	r2, #255	; 0xff
 8002a64:	21ff      	movs	r1, #255	; 0xff
 8002a66:	20ff      	movs	r0, #255	; 0xff
 8002a68:	f001 fd00 	bl	800446c <decodeRgbValue>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4622      	mov	r2, r4
 8002a70:	2169      	movs	r1, #105	; 0x69
 8002a72:	2040      	movs	r0, #64	; 0x40
 8002a74:	f001 fbb7 	bl	80041e6 <lcdCircle>
				lcdCircle(44, 105, i, decodeRgbValue(255, 255, 255));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	b21c      	sxth	r4, r3
 8002a7c:	22ff      	movs	r2, #255	; 0xff
 8002a7e:	21ff      	movs	r1, #255	; 0xff
 8002a80:	20ff      	movs	r0, #255	; 0xff
 8002a82:	f001 fcf3 	bl	800446c <decodeRgbValue>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4622      	mov	r2, r4
 8002a8a:	2169      	movs	r1, #105	; 0x69
 8002a8c:	202c      	movs	r0, #44	; 0x2c
 8002a8e:	f001 fbaa 	bl	80041e6 <lcdCircle>
				lcdCircle(84, 105, i, decodeRgbValue(255, 255, 255));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	b21c      	sxth	r4, r3
 8002a96:	22ff      	movs	r2, #255	; 0xff
 8002a98:	21ff      	movs	r1, #255	; 0xff
 8002a9a:	20ff      	movs	r0, #255	; 0xff
 8002a9c:	f001 fce6 	bl	800446c <decodeRgbValue>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4622      	mov	r2, r4
 8002aa4:	2169      	movs	r1, #105	; 0x69
 8002aa6:	2054      	movs	r0, #84	; 0x54
 8002aa8:	f001 fb9d 	bl	80041e6 <lcdCircle>
				lcdCircle(104, 105, i, decodeRgbValue(255, 255, 255));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b21c      	sxth	r4, r3
 8002ab0:	22ff      	movs	r2, #255	; 0xff
 8002ab2:	21ff      	movs	r1, #255	; 0xff
 8002ab4:	20ff      	movs	r0, #255	; 0xff
 8002ab6:	f001 fcd9 	bl	800446c <decodeRgbValue>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4622      	mov	r2, r4
 8002abe:	2169      	movs	r1, #105	; 0x69
 8002ac0:	2068      	movs	r0, #104	; 0x68
 8002ac2:	f001 fb90 	bl	80041e6 <lcdCircle>
				lcdCircle(24, 105, i, decodeRgbValue(255, 255, 255));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	b21c      	sxth	r4, r3
 8002aca:	22ff      	movs	r2, #255	; 0xff
 8002acc:	21ff      	movs	r1, #255	; 0xff
 8002ace:	20ff      	movs	r0, #255	; 0xff
 8002ad0:	f001 fccc 	bl	800446c <decodeRgbValue>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	2169      	movs	r1, #105	; 0x69
 8002ada:	2018      	movs	r0, #24
 8002adc:	f001 fb83 	bl	80041e6 <lcdCircle>
	for(int i=8; i>0;i--){
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	dcb8      	bgt.n	8002a5e <DrawWorsening+0x86>
			}
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd90      	pop	{r4, r7, pc}

08002af6 <DrawRaining>:

void DrawRaining(void){
 8002af6:	b590      	push	{r4, r7, lr}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af02      	add	r7, sp, #8

	for(int i=10; i>0;i--){ // big circles
 8002afc:	230a      	movs	r3, #10
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	e036      	b.n	8002b70 <DrawRaining+0x7a>
						lcdCircle(54, 100, i, decodeRgbValue(255, 255, 255));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	b21c      	sxth	r4, r3
 8002b06:	22ff      	movs	r2, #255	; 0xff
 8002b08:	21ff      	movs	r1, #255	; 0xff
 8002b0a:	20ff      	movs	r0, #255	; 0xff
 8002b0c:	f001 fcae 	bl	800446c <decodeRgbValue>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4622      	mov	r2, r4
 8002b14:	2164      	movs	r1, #100	; 0x64
 8002b16:	2036      	movs	r0, #54	; 0x36
 8002b18:	f001 fb65 	bl	80041e6 <lcdCircle>
						lcdCircle(74, 100, i, decodeRgbValue(255, 255, 255));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	b21c      	sxth	r4, r3
 8002b20:	22ff      	movs	r2, #255	; 0xff
 8002b22:	21ff      	movs	r1, #255	; 0xff
 8002b24:	20ff      	movs	r0, #255	; 0xff
 8002b26:	f001 fca1 	bl	800446c <decodeRgbValue>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4622      	mov	r2, r4
 8002b2e:	2164      	movs	r1, #100	; 0x64
 8002b30:	204a      	movs	r0, #74	; 0x4a
 8002b32:	f001 fb58 	bl	80041e6 <lcdCircle>
						lcdCircle(94, 100, i, decodeRgbValue(255, 255, 255));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	b21c      	sxth	r4, r3
 8002b3a:	22ff      	movs	r2, #255	; 0xff
 8002b3c:	21ff      	movs	r1, #255	; 0xff
 8002b3e:	20ff      	movs	r0, #255	; 0xff
 8002b40:	f001 fc94 	bl	800446c <decodeRgbValue>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4622      	mov	r2, r4
 8002b48:	2164      	movs	r1, #100	; 0x64
 8002b4a:	205e      	movs	r0, #94	; 0x5e
 8002b4c:	f001 fb4b 	bl	80041e6 <lcdCircle>
						lcdCircle(34, 100, i, decodeRgbValue(255, 255, 255));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	b21c      	sxth	r4, r3
 8002b54:	22ff      	movs	r2, #255	; 0xff
 8002b56:	21ff      	movs	r1, #255	; 0xff
 8002b58:	20ff      	movs	r0, #255	; 0xff
 8002b5a:	f001 fc87 	bl	800446c <decodeRgbValue>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4622      	mov	r2, r4
 8002b62:	2164      	movs	r1, #100	; 0x64
 8002b64:	2022      	movs	r0, #34	; 0x22
 8002b66:	f001 fb3e 	bl	80041e6 <lcdCircle>
	for(int i=10; i>0;i--){ // big circles
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	dcc5      	bgt.n	8002b02 <DrawRaining+0xc>
		}

		for(int i=8; i>0;i--){ // small circles
 8002b76:	2308      	movs	r3, #8
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	e043      	b.n	8002c04 <DrawRaining+0x10e>

					lcdCircle(64, 105, i, decodeRgbValue(255, 255, 255));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b21c      	sxth	r4, r3
 8002b80:	22ff      	movs	r2, #255	; 0xff
 8002b82:	21ff      	movs	r1, #255	; 0xff
 8002b84:	20ff      	movs	r0, #255	; 0xff
 8002b86:	f001 fc71 	bl	800446c <decodeRgbValue>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4622      	mov	r2, r4
 8002b8e:	2169      	movs	r1, #105	; 0x69
 8002b90:	2040      	movs	r0, #64	; 0x40
 8002b92:	f001 fb28 	bl	80041e6 <lcdCircle>
					lcdCircle(44, 105, i, decodeRgbValue(255, 255, 255));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b21c      	sxth	r4, r3
 8002b9a:	22ff      	movs	r2, #255	; 0xff
 8002b9c:	21ff      	movs	r1, #255	; 0xff
 8002b9e:	20ff      	movs	r0, #255	; 0xff
 8002ba0:	f001 fc64 	bl	800446c <decodeRgbValue>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	2169      	movs	r1, #105	; 0x69
 8002baa:	202c      	movs	r0, #44	; 0x2c
 8002bac:	f001 fb1b 	bl	80041e6 <lcdCircle>
					lcdCircle(84, 105, i, decodeRgbValue(255, 255, 255));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b21c      	sxth	r4, r3
 8002bb4:	22ff      	movs	r2, #255	; 0xff
 8002bb6:	21ff      	movs	r1, #255	; 0xff
 8002bb8:	20ff      	movs	r0, #255	; 0xff
 8002bba:	f001 fc57 	bl	800446c <decodeRgbValue>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4622      	mov	r2, r4
 8002bc2:	2169      	movs	r1, #105	; 0x69
 8002bc4:	2054      	movs	r0, #84	; 0x54
 8002bc6:	f001 fb0e 	bl	80041e6 <lcdCircle>
					lcdCircle(104, 105, i, decodeRgbValue(255, 255, 255));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b21c      	sxth	r4, r3
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	21ff      	movs	r1, #255	; 0xff
 8002bd2:	20ff      	movs	r0, #255	; 0xff
 8002bd4:	f001 fc4a 	bl	800446c <decodeRgbValue>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4622      	mov	r2, r4
 8002bdc:	2169      	movs	r1, #105	; 0x69
 8002bde:	2068      	movs	r0, #104	; 0x68
 8002be0:	f001 fb01 	bl	80041e6 <lcdCircle>
					lcdCircle(24, 105, i, decodeRgbValue(255, 255, 255));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b21c      	sxth	r4, r3
 8002be8:	22ff      	movs	r2, #255	; 0xff
 8002bea:	21ff      	movs	r1, #255	; 0xff
 8002bec:	20ff      	movs	r0, #255	; 0xff
 8002bee:	f001 fc3d 	bl	800446c <decodeRgbValue>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4622      	mov	r2, r4
 8002bf6:	2169      	movs	r1, #105	; 0x69
 8002bf8:	2018      	movs	r0, #24
 8002bfa:	f001 faf4 	bl	80041e6 <lcdCircle>
		for(int i=8; i>0;i--){ // small circles
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	dcb8      	bgt.n	8002b7c <DrawRaining+0x86>
				}

		// rain
		lcdLine(24, 118, 24, 124, decodeRgbValue(0, 0, 255));
 8002c0a:	22ff      	movs	r2, #255	; 0xff
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f001 fc2c 	bl	800446c <decodeRgbValue>
 8002c14:	4603      	mov	r3, r0
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	237c      	movs	r3, #124	; 0x7c
 8002c1a:	2218      	movs	r2, #24
 8002c1c:	2176      	movs	r1, #118	; 0x76
 8002c1e:	2018      	movs	r0, #24
 8002c20:	f001 fa35 	bl	800408e <lcdLine>
		lcdLine(34, 114, 34, 122, decodeRgbValue(0, 0, 255));
 8002c24:	22ff      	movs	r2, #255	; 0xff
 8002c26:	2100      	movs	r1, #0
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f001 fc1f 	bl	800446c <decodeRgbValue>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	237a      	movs	r3, #122	; 0x7a
 8002c34:	2222      	movs	r2, #34	; 0x22
 8002c36:	2172      	movs	r1, #114	; 0x72
 8002c38:	2022      	movs	r0, #34	; 0x22
 8002c3a:	f001 fa28 	bl	800408e <lcdLine>
		lcdLine(44, 118, 44, 124, decodeRgbValue(0, 0, 255));
 8002c3e:	22ff      	movs	r2, #255	; 0xff
 8002c40:	2100      	movs	r1, #0
 8002c42:	2000      	movs	r0, #0
 8002c44:	f001 fc12 	bl	800446c <decodeRgbValue>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	237c      	movs	r3, #124	; 0x7c
 8002c4e:	222c      	movs	r2, #44	; 0x2c
 8002c50:	2176      	movs	r1, #118	; 0x76
 8002c52:	202c      	movs	r0, #44	; 0x2c
 8002c54:	f001 fa1b 	bl	800408e <lcdLine>
		lcdLine(54, 114, 54, 122, decodeRgbValue(0, 0, 255));
 8002c58:	22ff      	movs	r2, #255	; 0xff
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f001 fc05 	bl	800446c <decodeRgbValue>
 8002c62:	4603      	mov	r3, r0
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	237a      	movs	r3, #122	; 0x7a
 8002c68:	2236      	movs	r2, #54	; 0x36
 8002c6a:	2172      	movs	r1, #114	; 0x72
 8002c6c:	2036      	movs	r0, #54	; 0x36
 8002c6e:	f001 fa0e 	bl	800408e <lcdLine>
		lcdLine(64, 118, 64, 124, decodeRgbValue(0, 0, 255));
 8002c72:	22ff      	movs	r2, #255	; 0xff
 8002c74:	2100      	movs	r1, #0
 8002c76:	2000      	movs	r0, #0
 8002c78:	f001 fbf8 	bl	800446c <decodeRgbValue>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	237c      	movs	r3, #124	; 0x7c
 8002c82:	2240      	movs	r2, #64	; 0x40
 8002c84:	2176      	movs	r1, #118	; 0x76
 8002c86:	2040      	movs	r0, #64	; 0x40
 8002c88:	f001 fa01 	bl	800408e <lcdLine>
		lcdLine(74, 114, 74, 122, decodeRgbValue(0, 0, 255));
 8002c8c:	22ff      	movs	r2, #255	; 0xff
 8002c8e:	2100      	movs	r1, #0
 8002c90:	2000      	movs	r0, #0
 8002c92:	f001 fbeb 	bl	800446c <decodeRgbValue>
 8002c96:	4603      	mov	r3, r0
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	237a      	movs	r3, #122	; 0x7a
 8002c9c:	224a      	movs	r2, #74	; 0x4a
 8002c9e:	2172      	movs	r1, #114	; 0x72
 8002ca0:	204a      	movs	r0, #74	; 0x4a
 8002ca2:	f001 f9f4 	bl	800408e <lcdLine>
		lcdLine(84, 118, 84, 124, decodeRgbValue(0, 0, 255));
 8002ca6:	22ff      	movs	r2, #255	; 0xff
 8002ca8:	2100      	movs	r1, #0
 8002caa:	2000      	movs	r0, #0
 8002cac:	f001 fbde 	bl	800446c <decodeRgbValue>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	237c      	movs	r3, #124	; 0x7c
 8002cb6:	2254      	movs	r2, #84	; 0x54
 8002cb8:	2176      	movs	r1, #118	; 0x76
 8002cba:	2054      	movs	r0, #84	; 0x54
 8002cbc:	f001 f9e7 	bl	800408e <lcdLine>
		lcdLine(94, 114, 94, 122, decodeRgbValue(0, 0, 255));
 8002cc0:	22ff      	movs	r2, #255	; 0xff
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f001 fbd1 	bl	800446c <decodeRgbValue>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	237a      	movs	r3, #122	; 0x7a
 8002cd0:	225e      	movs	r2, #94	; 0x5e
 8002cd2:	2172      	movs	r1, #114	; 0x72
 8002cd4:	205e      	movs	r0, #94	; 0x5e
 8002cd6:	f001 f9da 	bl	800408e <lcdLine>
		lcdLine(104, 118, 104, 124, decodeRgbValue(0, 0, 255));
 8002cda:	22ff      	movs	r2, #255	; 0xff
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f001 fbc4 	bl	800446c <decodeRgbValue>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	237c      	movs	r3, #124	; 0x7c
 8002cea:	2268      	movs	r2, #104	; 0x68
 8002cec:	2176      	movs	r1, #118	; 0x76
 8002cee:	2068      	movs	r0, #104	; 0x68
 8002cf0:	f001 f9cd 	bl	800408e <lcdLine>



	}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd90      	pop	{r4, r7, pc}

08002cfc <DrawSnow>:

void DrawSnow(void){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af02      	add	r7, sp, #8

	lcdCircle(64, 85, 12, decodeRgbValue(0, 0, 255));
 8002d02:	22ff      	movs	r2, #255	; 0xff
 8002d04:	2100      	movs	r1, #0
 8002d06:	2000      	movs	r0, #0
 8002d08:	f001 fbb0 	bl	800446c <decodeRgbValue>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	220c      	movs	r2, #12
 8002d10:	2155      	movs	r1, #85	; 0x55
 8002d12:	2040      	movs	r0, #64	; 0x40
 8002d14:	f001 fa67 	bl	80041e6 <lcdCircle>
	lcdCircle(64, 85, 7, decodeRgbValue(0, 0, 255));
 8002d18:	22ff      	movs	r2, #255	; 0xff
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f001 fba5 	bl	800446c <decodeRgbValue>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2207      	movs	r2, #7
 8002d26:	2155      	movs	r1, #85	; 0x55
 8002d28:	2040      	movs	r0, #64	; 0x40
 8002d2a:	f001 fa5c 	bl	80041e6 <lcdCircle>
	lcdCircle(64, 85, 2, decodeRgbValue(0, 0, 255));
 8002d2e:	22ff      	movs	r2, #255	; 0xff
 8002d30:	2100      	movs	r1, #0
 8002d32:	2000      	movs	r0, #0
 8002d34:	f001 fb9a 	bl	800446c <decodeRgbValue>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	2155      	movs	r1, #85	; 0x55
 8002d3e:	2040      	movs	r0, #64	; 0x40
 8002d40:	f001 fa51 	bl	80041e6 <lcdCircle>

	lcdLine(64, 65, 64, 105, decodeRgbValue(0, 0, 255));
 8002d44:	22ff      	movs	r2, #255	; 0xff
 8002d46:	2100      	movs	r1, #0
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f001 fb8f 	bl	800446c <decodeRgbValue>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2369      	movs	r3, #105	; 0x69
 8002d54:	2240      	movs	r2, #64	; 0x40
 8002d56:	2141      	movs	r1, #65	; 0x41
 8002d58:	2040      	movs	r0, #64	; 0x40
 8002d5a:	f001 f998 	bl	800408e <lcdLine>
	lcdLine(42, 85, 85, 85, decodeRgbValue(0, 0, 255));
 8002d5e:	22ff      	movs	r2, #255	; 0xff
 8002d60:	2100      	movs	r1, #0
 8002d62:	2000      	movs	r0, #0
 8002d64:	f001 fb82 	bl	800446c <decodeRgbValue>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2355      	movs	r3, #85	; 0x55
 8002d6e:	2255      	movs	r2, #85	; 0x55
 8002d70:	2155      	movs	r1, #85	; 0x55
 8002d72:	202a      	movs	r0, #42	; 0x2a
 8002d74:	f001 f98b 	bl	800408e <lcdLine>
	lcdLine(50, 70, 79, 99, decodeRgbValue(0, 0, 255));
 8002d78:	22ff      	movs	r2, #255	; 0xff
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f001 fb75 	bl	800446c <decodeRgbValue>
 8002d82:	4603      	mov	r3, r0
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2363      	movs	r3, #99	; 0x63
 8002d88:	224f      	movs	r2, #79	; 0x4f
 8002d8a:	2146      	movs	r1, #70	; 0x46
 8002d8c:	2032      	movs	r0, #50	; 0x32
 8002d8e:	f001 f97e 	bl	800408e <lcdLine>
	lcdLine(49, 100, 80, 70, decodeRgbValue(0, 0, 255));
 8002d92:	22ff      	movs	r2, #255	; 0xff
 8002d94:	2100      	movs	r1, #0
 8002d96:	2000      	movs	r0, #0
 8002d98:	f001 fb68 	bl	800446c <decodeRgbValue>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2346      	movs	r3, #70	; 0x46
 8002da2:	2250      	movs	r2, #80	; 0x50
 8002da4:	2164      	movs	r1, #100	; 0x64
 8002da6:	2031      	movs	r0, #49	; 0x31
 8002da8:	f001 f971 	bl	800408e <lcdLine>
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <station2sealevel>:

unsigned long delayTime;
   int t_hour=0;
   int t_minute=0;

   int station2sealevel(int p, int height, int t){
 8002dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
     return (double) p*pow(1-0.0065*(double)height/(t+0.0065*(double)height+273.15),-5.275);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7fd fba8 	bl	8000524 <__aeabi_i2d>
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	460d      	mov	r5, r1
 8002dd8:	68b8      	ldr	r0, [r7, #8]
 8002dda:	f7fd fba3 	bl	8000524 <__aeabi_i2d>
 8002dde:	a32b      	add	r3, pc, #172	; (adr r3, 8002e8c <station2sealevel+0xcc>)
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f7fd fc08 	bl	80005f8 <__aeabi_dmul>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4692      	mov	sl, r2
 8002dee:	469b      	mov	fp, r3
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7fd fb97 	bl	8000524 <__aeabi_i2d>
 8002df6:	4680      	mov	r8, r0
 8002df8:	4689      	mov	r9, r1
 8002dfa:	68b8      	ldr	r0, [r7, #8]
 8002dfc:	f7fd fb92 	bl	8000524 <__aeabi_i2d>
 8002e00:	a322      	add	r3, pc, #136	; (adr r3, 8002e8c <station2sealevel+0xcc>)
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	f7fd fbf7 	bl	80005f8 <__aeabi_dmul>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4640      	mov	r0, r8
 8002e10:	4649      	mov	r1, r9
 8002e12:	f7fd fa3b 	bl	800028c <__adddf3>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	a31d      	add	r3, pc, #116	; (adr r3, 8002e94 <station2sealevel+0xd4>)
 8002e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e24:	f7fd fa32 	bl	800028c <__adddf3>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4650      	mov	r0, sl
 8002e2e:	4659      	mov	r1, fp
 8002e30:	f7fd fd0c 	bl	800084c <__aeabi_ddiv>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	f04f 0000 	mov.w	r0, #0
 8002e3c:	4912      	ldr	r1, [pc, #72]	; (8002e88 <station2sealevel+0xc8>)
 8002e3e:	f7fd fa23 	bl	8000288 <__aeabi_dsub>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	ec43 2b17 	vmov	d7, r2, r3
 8002e4a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8002e80 <station2sealevel+0xc0>
 8002e4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e52:	eef0 0a67 	vmov.f32	s1, s15
 8002e56:	f004 fa49 	bl	80072ec <pow>
 8002e5a:	ec53 2b10 	vmov	r2, r3, d0
 8002e5e:	4620      	mov	r0, r4
 8002e60:	4629      	mov	r1, r5
 8002e62:	f7fd fbc9 	bl	80005f8 <__aeabi_dmul>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7fd fe73 	bl	8000b58 <__aeabi_d2iz>
 8002e72:	4603      	mov	r3, r0
   }
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7e:	bf00      	nop
 8002e80:	9999999a 	.word	0x9999999a
 8002e84:	c0151999 	.word	0xc0151999
 8002e88:	3ff00000 	.word	0x3ff00000
 8002e8c:	76c8b439 	.word	0x76c8b439
 8002e90:	3f7a9fbe 	.word	0x3f7a9fbe
 8002e94:	66666666 	.word	0x66666666
 8002e98:	40711266 	.word	0x40711266

08002e9c <calc_zambretti>:
     if (val<0)
       return -val;
     return val;
   }

   int calc_zambretti(int curr_pressure, int prev_pressure, int mon){
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
           if (curr_pressure<prev_pressure){
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	f280 80a8 	bge.w	8003002 <calc_zambretti+0x166>
             //FALLING
             if (mon>=4 && mon<=9)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	dd53      	ble.n	8002f60 <calc_zambretti+0xc4>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b09      	cmp	r3, #9
 8002ebc:	dc50      	bgt.n	8002f60 <calc_zambretti+0xc4>
             //summer
             {
               if (curr_pressure>=1030)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f240 4205 	movw	r2, #1029	; 0x405
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	dd01      	ble.n	8002ecc <calc_zambretti+0x30>
                 return 2;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e199      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1020 && curr_pressure<1030)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8002ed2:	db06      	blt.n	8002ee2 <calc_zambretti+0x46>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f240 4205 	movw	r2, #1029	; 0x405
 8002eda:	4293      	cmp	r3, r2
 8002edc:	dc01      	bgt.n	8002ee2 <calc_zambretti+0x46>
                 return 8;
 8002ede:	2308      	movs	r3, #8
 8002ee0:	e18e      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1010 && curr_pressure<1020)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	dd05      	ble.n	8002ef8 <calc_zambretti+0x5c>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8002ef2:	da01      	bge.n	8002ef8 <calc_zambretti+0x5c>
                 return 18;
 8002ef4:	2312      	movs	r3, #18
 8002ef6:	e183      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1000 && curr_pressure<1010)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002efe:	db06      	blt.n	8002f0e <calc_zambretti+0x72>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8002f06:	4293      	cmp	r3, r2
 8002f08:	dc01      	bgt.n	8002f0e <calc_zambretti+0x72>
                 return 21;
 8002f0a:	2315      	movs	r3, #21
 8002f0c:	e178      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=990 && curr_pressure<1000)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f240 32dd 	movw	r2, #989	; 0x3dd
 8002f14:	4293      	cmp	r3, r2
 8002f16:	dd05      	ble.n	8002f24 <calc_zambretti+0x88>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f1e:	da01      	bge.n	8002f24 <calc_zambretti+0x88>
                 return 24;
 8002f20:	2318      	movs	r3, #24
 8002f22:	e16d      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=980 && curr_pressure<990)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 8002f2a:	db06      	blt.n	8002f3a <calc_zambretti+0x9e>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f240 32dd 	movw	r2, #989	; 0x3dd
 8002f32:	4293      	cmp	r3, r2
 8002f34:	dc01      	bgt.n	8002f3a <calc_zambretti+0x9e>
                 return 24;
 8002f36:	2318      	movs	r3, #24
 8002f38:	e162      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=970 && curr_pressure<980)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8002f40:	4293      	cmp	r3, r2
 8002f42:	dd05      	ble.n	8002f50 <calc_zambretti+0xb4>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 8002f4a:	da01      	bge.n	8002f50 <calc_zambretti+0xb4>
                 return 26;
 8002f4c:	231a      	movs	r3, #26
 8002f4e:	e157      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure<970)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f240 32c9 	movw	r2, #969	; 0x3c9
 8002f56:	4293      	cmp	r3, r2
 8002f58:	f300 814f 	bgt.w	80031fa <calc_zambretti+0x35e>
                 return 26;
 8002f5c:	231a      	movs	r3, #26
 8002f5e:	e14f      	b.n	8003200 <calc_zambretti+0x364>
             }
             else{
             //winter
               if (curr_pressure>=1030)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f240 4205 	movw	r2, #1029	; 0x405
 8002f66:	4293      	cmp	r3, r2
 8002f68:	dd01      	ble.n	8002f6e <calc_zambretti+0xd2>
                 return 2;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e148      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1020 && curr_pressure<1030)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8002f74:	db06      	blt.n	8002f84 <calc_zambretti+0xe8>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f240 4205 	movw	r2, #1029	; 0x405
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	dc01      	bgt.n	8002f84 <calc_zambretti+0xe8>
                 return 8;
 8002f80:	2308      	movs	r3, #8
 8002f82:	e13d      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1010 && curr_pressure<1020)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	dd05      	ble.n	8002f9a <calc_zambretti+0xfe>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8002f94:	da01      	bge.n	8002f9a <calc_zambretti+0xfe>
                 return 15;
 8002f96:	230f      	movs	r3, #15
 8002f98:	e132      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1000 && curr_pressure<1010)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa0:	db06      	blt.n	8002fb0 <calc_zambretti+0x114>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	dc01      	bgt.n	8002fb0 <calc_zambretti+0x114>
                 return 21;
 8002fac:	2315      	movs	r3, #21
 8002fae:	e127      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=990 && curr_pressure<1000)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f240 32dd 	movw	r2, #989	; 0x3dd
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	dd05      	ble.n	8002fc6 <calc_zambretti+0x12a>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc0:	da01      	bge.n	8002fc6 <calc_zambretti+0x12a>
                 return 22;
 8002fc2:	2316      	movs	r3, #22
 8002fc4:	e11c      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=980 && curr_pressure<990)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 8002fcc:	db06      	blt.n	8002fdc <calc_zambretti+0x140>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f240 32dd 	movw	r2, #989	; 0x3dd
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	dc01      	bgt.n	8002fdc <calc_zambretti+0x140>
                 return 24;
 8002fd8:	2318      	movs	r3, #24
 8002fda:	e111      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=970 && curr_pressure<980)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f240 32c9 	movw	r2, #969	; 0x3c9
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	dd05      	ble.n	8002ff2 <calc_zambretti+0x156>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 8002fec:	da01      	bge.n	8002ff2 <calc_zambretti+0x156>
                 return 26;
 8002fee:	231a      	movs	r3, #26
 8002ff0:	e106      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure<970)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	f300 8101 	bgt.w	8003200 <calc_zambretti+0x364>
                 return 26;
 8002ffe:	231a      	movs	r3, #26
 8003000:	e0fe      	b.n	8003200 <calc_zambretti+0x364>
             }
           }
           else if (curr_pressure>prev_pressure){
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	429a      	cmp	r2, r3
 8003008:	f340 80a7 	ble.w	800315a <calc_zambretti+0x2be>
             //RAISING
             if (mon>=4 && mon<=9){
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b03      	cmp	r3, #3
 8003010:	dd53      	ble.n	80030ba <calc_zambretti+0x21e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b09      	cmp	r3, #9
 8003016:	dc50      	bgt.n	80030ba <calc_zambretti+0x21e>
               //summer
               if (curr_pressure>=1030)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f240 4205 	movw	r2, #1029	; 0x405
 800301e:	4293      	cmp	r3, r2
 8003020:	dd01      	ble.n	8003026 <calc_zambretti+0x18a>
                 return 1;
 8003022:	2301      	movs	r3, #1
 8003024:	e0ec      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1020 && curr_pressure<1030)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800302c:	db06      	blt.n	800303c <calc_zambretti+0x1a0>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f240 4205 	movw	r2, #1029	; 0x405
 8003034:	4293      	cmp	r3, r2
 8003036:	dc01      	bgt.n	800303c <calc_zambretti+0x1a0>
                 return 2;
 8003038:	2302      	movs	r3, #2
 800303a:	e0e1      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1010 && curr_pressure<1020)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8003042:	4293      	cmp	r3, r2
 8003044:	dd05      	ble.n	8003052 <calc_zambretti+0x1b6>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800304c:	da01      	bge.n	8003052 <calc_zambretti+0x1b6>
                 return 3;
 800304e:	2303      	movs	r3, #3
 8003050:	e0d6      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1000 && curr_pressure<1010)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003058:	db06      	blt.n	8003068 <calc_zambretti+0x1cc>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8003060:	4293      	cmp	r3, r2
 8003062:	dc01      	bgt.n	8003068 <calc_zambretti+0x1cc>
                 return 7;
 8003064:	2307      	movs	r3, #7
 8003066:	e0cb      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=990 && curr_pressure<1000)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f240 32dd 	movw	r2, #989	; 0x3dd
 800306e:	4293      	cmp	r3, r2
 8003070:	dd05      	ble.n	800307e <calc_zambretti+0x1e2>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003078:	da01      	bge.n	800307e <calc_zambretti+0x1e2>
                 return 9;
 800307a:	2309      	movs	r3, #9
 800307c:	e0c0      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=980 && curr_pressure<990)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 8003084:	db06      	blt.n	8003094 <calc_zambretti+0x1f8>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f240 32dd 	movw	r2, #989	; 0x3dd
 800308c:	4293      	cmp	r3, r2
 800308e:	dc01      	bgt.n	8003094 <calc_zambretti+0x1f8>
                 return 12;
 8003090:	230c      	movs	r3, #12
 8003092:	e0b5      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=970 && curr_pressure<980)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f240 32c9 	movw	r2, #969	; 0x3c9
 800309a:	4293      	cmp	r3, r2
 800309c:	dd05      	ble.n	80030aa <calc_zambretti+0x20e>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 80030a4:	da01      	bge.n	80030aa <calc_zambretti+0x20e>
                 return 17;
 80030a6:	2311      	movs	r3, #17
 80030a8:	e0aa      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure<970)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f240 32c9 	movw	r2, #969	; 0x3c9
 80030b0:	4293      	cmp	r3, r2
 80030b2:	f300 80a4 	bgt.w	80031fe <calc_zambretti+0x362>
                 return 17;
 80030b6:	2311      	movs	r3, #17
 80030b8:	e0a2      	b.n	8003200 <calc_zambretti+0x364>
             }
             else
               //winter
              {
               if (curr_pressure>=1030)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f240 4205 	movw	r2, #1029	; 0x405
 80030c0:	4293      	cmp	r3, r2
 80030c2:	dd01      	ble.n	80030c8 <calc_zambretti+0x22c>
                 return 1;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e09b      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1020 && curr_pressure<1030)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 80030ce:	db06      	blt.n	80030de <calc_zambretti+0x242>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f240 4205 	movw	r2, #1029	; 0x405
 80030d6:	4293      	cmp	r3, r2
 80030d8:	dc01      	bgt.n	80030de <calc_zambretti+0x242>
                 return 2;
 80030da:	2302      	movs	r3, #2
 80030dc:	e090      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1010 && curr_pressure<1020)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80030e4:	4293      	cmp	r3, r2
 80030e6:	dd05      	ble.n	80030f4 <calc_zambretti+0x258>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 80030ee:	da01      	bge.n	80030f4 <calc_zambretti+0x258>
                 return 6;
 80030f0:	2306      	movs	r3, #6
 80030f2:	e085      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1000 && curr_pressure<1010)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030fa:	db06      	blt.n	800310a <calc_zambretti+0x26e>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8003102:	4293      	cmp	r3, r2
 8003104:	dc01      	bgt.n	800310a <calc_zambretti+0x26e>
                 return 7;
 8003106:	2307      	movs	r3, #7
 8003108:	e07a      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=990 && curr_pressure<1000)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f240 32dd 	movw	r2, #989	; 0x3dd
 8003110:	4293      	cmp	r3, r2
 8003112:	dd05      	ble.n	8003120 <calc_zambretti+0x284>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800311a:	da01      	bge.n	8003120 <calc_zambretti+0x284>
                 return 10;
 800311c:	230a      	movs	r3, #10
 800311e:	e06f      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=980 && curr_pressure<990)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 8003126:	db06      	blt.n	8003136 <calc_zambretti+0x29a>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f240 32dd 	movw	r2, #989	; 0x3dd
 800312e:	4293      	cmp	r3, r2
 8003130:	dc01      	bgt.n	8003136 <calc_zambretti+0x29a>
                 return 13;
 8003132:	230d      	movs	r3, #13
 8003134:	e064      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=970 && curr_pressure<980)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f240 32c9 	movw	r2, #969	; 0x3c9
 800313c:	4293      	cmp	r3, r2
 800313e:	dd05      	ble.n	800314c <calc_zambretti+0x2b0>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 8003146:	da01      	bge.n	800314c <calc_zambretti+0x2b0>
                 return 17;
 8003148:	2311      	movs	r3, #17
 800314a:	e059      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure<970)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f240 32c9 	movw	r2, #969	; 0x3c9
 8003152:	4293      	cmp	r3, r2
 8003154:	dc54      	bgt.n	8003200 <calc_zambretti+0x364>
                 return 17;
 8003156:	2311      	movs	r3, #17
 8003158:	e052      	b.n	8003200 <calc_zambretti+0x364>
              }
           }
           else{
               if (curr_pressure>=1030)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f240 4205 	movw	r2, #1029	; 0x405
 8003160:	4293      	cmp	r3, r2
 8003162:	dd01      	ble.n	8003168 <calc_zambretti+0x2cc>
                 return 1;
 8003164:	2301      	movs	r3, #1
 8003166:	e04b      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1020 && curr_pressure<1030)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800316e:	db06      	blt.n	800317e <calc_zambretti+0x2e2>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f240 4205 	movw	r2, #1029	; 0x405
 8003176:	4293      	cmp	r3, r2
 8003178:	dc01      	bgt.n	800317e <calc_zambretti+0x2e2>
                 return 2;
 800317a:	2302      	movs	r3, #2
 800317c:	e040      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1010 && curr_pressure<1020)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8003184:	4293      	cmp	r3, r2
 8003186:	dd05      	ble.n	8003194 <calc_zambretti+0x2f8>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800318e:	da01      	bge.n	8003194 <calc_zambretti+0x2f8>
                 return 11;
 8003190:	230b      	movs	r3, #11
 8003192:	e035      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=1000 && curr_pressure<1010)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800319a:	db06      	blt.n	80031aa <calc_zambretti+0x30e>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80031a2:	4293      	cmp	r3, r2
 80031a4:	dc01      	bgt.n	80031aa <calc_zambretti+0x30e>
                 return 14;
 80031a6:	230e      	movs	r3, #14
 80031a8:	e02a      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=990 && curr_pressure<1000)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f240 32dd 	movw	r2, #989	; 0x3dd
 80031b0:	4293      	cmp	r3, r2
 80031b2:	dd05      	ble.n	80031c0 <calc_zambretti+0x324>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ba:	da01      	bge.n	80031c0 <calc_zambretti+0x324>
                 return 19;
 80031bc:	2313      	movs	r3, #19
 80031be:	e01f      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=980 && curr_pressure<990)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 80031c6:	db06      	blt.n	80031d6 <calc_zambretti+0x33a>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f240 32dd 	movw	r2, #989	; 0x3dd
 80031ce:	4293      	cmp	r3, r2
 80031d0:	dc01      	bgt.n	80031d6 <calc_zambretti+0x33a>
                 return 23;
 80031d2:	2317      	movs	r3, #23
 80031d4:	e014      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure>=970 && curr_pressure<980)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80031dc:	4293      	cmp	r3, r2
 80031de:	dd05      	ble.n	80031ec <calc_zambretti+0x350>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 80031e6:	da01      	bge.n	80031ec <calc_zambretti+0x350>
                 return 24;
 80031e8:	2318      	movs	r3, #24
 80031ea:	e009      	b.n	8003200 <calc_zambretti+0x364>
               else if(curr_pressure<970)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f240 32c9 	movw	r2, #969	; 0x3c9
 80031f2:	4293      	cmp	r3, r2
 80031f4:	dc04      	bgt.n	8003200 <calc_zambretti+0x364>
                 return 26;
 80031f6:	231a      	movs	r3, #26
 80031f8:	e002      	b.n	8003200 <calc_zambretti+0x364>
               if (curr_pressure>=1030)
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <calc_zambretti+0x364>
               if (curr_pressure>=1030)
 80031fe:	bf00      	nop

           }

   }
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <weather>:

   //lsm6ds0_init();
   //hts221_init();
   //lps22hb_init();

   int weather() {
 800320c:	b580      	push	{r7, lr}
 800320e:	b0ba      	sub	sp, #232	; 0xe8
 8003210:	af00      	add	r7, sp, #0
     char pStr[22];
     char hStr[20];
     char pseaStr[26];
     char timeStr[6];
     char dateStr[12];
     char zambretti[10]="N/A";
 8003212:	4bc2      	ldr	r3, [pc, #776]	; (800351c <weather+0x310>)
 8003214:	643b      	str	r3, [r7, #64]	; 0x40
 8003216:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	809a      	strh	r2, [r3, #4]
     char pressureHistory[57];
     int temperature=(int)lps22hb_get_temp();
 8003220:	f7fe fe0a 	bl	8001e38 <lps22hb_get_temp>
 8003224:	eef0 7a40 	vmov.f32	s15, s0
 8003228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800322c:	ee17 3a90 	vmov	r3, s15
 8003230:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
     //int temperature=(int)hts221_get_temp();
     int humidity=hts221_get_humid();
 8003234:	f7fe f8dc 	bl	80013f0 <hts221_get_humid>
 8003238:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
     int pressure=(int)(lps22hb_get_pressure()/100.0F);
 800323c:	f7fe fdcc 	bl	8001dd8 <lps22hb_get_pressure>
 8003240:	eeb0 7a40 	vmov.f32	s14, s0
 8003244:	eddf 6ab6 	vldr	s13, [pc, #728]	; 8003520 <weather+0x314>
 8003248:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800324c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003250:	ee17 3a90 	vmov	r3, s15
 8003254:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
     int altitude=560;//(int)bme.readAltitude(SEALEVELPRESSURE_HPA);
 8003258:	f44f 730c 	mov.w	r3, #560	; 0x230
 800325c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
     int seapressure = station2sealevel(pressure,altitude,temperature);
 8003260:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003264:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003268:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800326c:	f7ff fda8 	bl	8002dc0 <station2sealevel>
 8003270:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
     int weather; //1-sunny 2-sunny_cloudy 3-cloudy 4-worsening 5-raining
     //int seapressure = station2sealevel(944,595,27);

     //DateTime now = rtc.now();
     int t_hour2=1;
 8003274:	2301      	movs	r3, #1
 8003276:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     int t_minute2=1;
 800327a:	2301      	movs	r3, #1
 800327c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
     int Z=0;
 8003280:	2300      	movs	r3, #0
 8003282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

     if (t_hour2!=t_hour || t_minute2!=t_minute){
 8003286:	4ba7      	ldr	r3, [pc, #668]	; (8003524 <weather+0x318>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800328e:	429a      	cmp	r2, r3
 8003290:	d106      	bne.n	80032a0 <weather+0x94>
 8003292:	4ba5      	ldr	r3, [pc, #660]	; (8003528 <weather+0x31c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800329a:	429a      	cmp	r2, r3
 800329c:	f000 8191 	beq.w	80035c2 <weather+0x3b6>
       delta_time++;
 80032a0:	4ba2      	ldr	r3, [pc, #648]	; (800352c <weather+0x320>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3301      	adds	r3, #1
 80032a6:	4aa1      	ldr	r2, [pc, #644]	; (800352c <weather+0x320>)
 80032a8:	6013      	str	r3, [r2, #0]
       if (delta_time>10){
 80032aa:	4ba0      	ldr	r3, [pc, #640]	; (800352c <weather+0x320>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b0a      	cmp	r3, #10
 80032b0:	dd33      	ble.n	800331a <weather+0x10e>
         delta_time=0;
 80032b2:	4b9e      	ldr	r3, [pc, #632]	; (800352c <weather+0x320>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

         if (counter==10)
 80032b8:	4b9d      	ldr	r3, [pc, #628]	; (8003530 <weather+0x324>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b0a      	cmp	r3, #10
 80032be:	d120      	bne.n	8003302 <weather+0xf6>
         {
           for (int i=0; i<9;i++){
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032c6:	e00f      	b.n	80032e8 <weather+0xdc>
             pressureArray[i]=pressureArray[i+1];
 80032c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032cc:	3301      	adds	r3, #1
 80032ce:	4a99      	ldr	r2, [pc, #612]	; (8003534 <weather+0x328>)
 80032d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032d4:	4997      	ldr	r1, [pc, #604]	; (8003534 <weather+0x328>)
 80032d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
           for (int i=0; i<9;i++){
 80032de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e2:	3301      	adds	r3, #1
 80032e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	ddeb      	ble.n	80032c8 <weather+0xbc>
           }
           pressureArray[counter-1]=seapressure;
 80032f0:	4b8f      	ldr	r3, [pc, #572]	; (8003530 <weather+0x324>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	498f      	ldr	r1, [pc, #572]	; (8003534 <weather+0x328>)
 80032f8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80032fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003300:	e00b      	b.n	800331a <weather+0x10e>
         }
         else{
           pressureArray[counter]=seapressure;
 8003302:	4b8b      	ldr	r3, [pc, #556]	; (8003530 <weather+0x324>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	498b      	ldr	r1, [pc, #556]	; (8003534 <weather+0x328>)
 8003308:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800330c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
           counter++;
 8003310:	4b87      	ldr	r3, [pc, #540]	; (8003530 <weather+0x324>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3301      	adds	r3, #1
 8003316:	4a86      	ldr	r2, [pc, #536]	; (8003530 <weather+0x324>)
 8003318:	6013      	str	r3, [r2, #0]
         }
       }
     Z=calc_zambretti((pressureArray[9]+pressureArray[8]+pressureArray[7])/3,(pressureArray[0]+pressureArray[1]+pressureArray[2])/3, 12);
 800331a:	4b86      	ldr	r3, [pc, #536]	; (8003534 <weather+0x328>)
 800331c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800331e:	4b85      	ldr	r3, [pc, #532]	; (8003534 <weather+0x328>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	441a      	add	r2, r3
 8003324:	4b83      	ldr	r3, [pc, #524]	; (8003534 <weather+0x328>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	4413      	add	r3, r2
 800332a:	4a83      	ldr	r2, [pc, #524]	; (8003538 <weather+0x32c>)
 800332c:	fb82 1203 	smull	r1, r2, r2, r3
 8003330:	17db      	asrs	r3, r3, #31
 8003332:	1ad0      	subs	r0, r2, r3
 8003334:	4b7f      	ldr	r3, [pc, #508]	; (8003534 <weather+0x328>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b7e      	ldr	r3, [pc, #504]	; (8003534 <weather+0x328>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	441a      	add	r2, r3
 800333e:	4b7d      	ldr	r3, [pc, #500]	; (8003534 <weather+0x328>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	4413      	add	r3, r2
 8003344:	4a7c      	ldr	r2, [pc, #496]	; (8003538 <weather+0x32c>)
 8003346:	fb82 1203 	smull	r1, r2, r2, r3
 800334a:	17db      	asrs	r3, r3, #31
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	220c      	movs	r2, #12
 8003350:	4619      	mov	r1, r3
 8003352:	f7ff fda3 	bl	8002e9c <calc_zambretti>
 8003356:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
     sprintf(zambretti, "Z=%d", Z);
 800335a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800335e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003362:	4976      	ldr	r1, [pc, #472]	; (800353c <weather+0x330>)
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fd95 	bl	8004e94 <siprintf>
        sprintf(tStr, "%d C", temperature);
 800336a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800336e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003372:	4973      	ldr	r1, [pc, #460]	; (8003540 <weather+0x334>)
 8003374:	4618      	mov	r0, r3
 8003376:	f001 fd8d 	bl	8004e94 <siprintf>
        sprintf(hStr, "%d %%", humidity);
 800337a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800337e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8003382:	4970      	ldr	r1, [pc, #448]	; (8003544 <weather+0x338>)
 8003384:	4618      	mov	r0, r3
 8003386:	f001 fd85 	bl	8004e94 <siprintf>
        sprintf(pStr, "%d hPa", pressure);
 800338a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800338e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003392:	496d      	ldr	r1, [pc, #436]	; (8003548 <weather+0x33c>)
 8003394:	4618      	mov	r0, r3
 8003396:	f001 fd7d 	bl	8004e94 <siprintf>
        sprintf(pseaStr, "%d hPa", seapressure);
 800339a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800339e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80033a2:	4969      	ldr	r1, [pc, #420]	; (8003548 <weather+0x33c>)
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 fd75 	bl	8004e94 <siprintf>
   //     pressureArray[2]=1020;
   //     pressureArray[1]=1020;
   //     pressureArray[0]= 1021;
   //     Z=6;

        if (pressureArray[9]>0 && pressureArray[0]>0){
 80033aa:	4b62      	ldr	r3, [pc, #392]	; (8003534 <weather+0x328>)
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f340 80d5 	ble.w	800355e <weather+0x352>
 80033b4:	4b5f      	ldr	r3, [pc, #380]	; (8003534 <weather+0x328>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f340 80d0 	ble.w	800355e <weather+0x352>
           if (pressureArray[9]+pressureArray[8]+pressureArray[7]-pressureArray[0]-pressureArray[1]-pressureArray[2]>=3){
 80033be:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <weather+0x328>)
 80033c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033c2:	4b5c      	ldr	r3, [pc, #368]	; (8003534 <weather+0x328>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	441a      	add	r2, r3
 80033c8:	4b5a      	ldr	r3, [pc, #360]	; (8003534 <weather+0x328>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	441a      	add	r2, r3
 80033ce:	4b59      	ldr	r3, [pc, #356]	; (8003534 <weather+0x328>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	1ad2      	subs	r2, r2, r3
 80033d4:	4b57      	ldr	r3, [pc, #348]	; (8003534 <weather+0x328>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	1ad2      	subs	r2, r2, r3
 80033da:	4b56      	ldr	r3, [pc, #344]	; (8003534 <weather+0x328>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	dd28      	ble.n	8003436 <weather+0x22a>
         //RAISING
           if (Z<3){
 80033e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	dc03      	bgt.n	80033f4 <weather+0x1e8>
             weather = 1;//sunny(500,350);
 80033ec:	2301      	movs	r3, #1
 80033ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           if (pressureArray[9]+pressureArray[8]+pressureArray[7]-pressureArray[0]-pressureArray[1]-pressureArray[2]>=3){
 80033f2:	e0dd      	b.n	80035b0 <weather+0x3a4>
           }
           else if (Z>=3 && Z<=9){
 80033f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	dd07      	ble.n	800340c <weather+0x200>
 80033fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003400:	2b09      	cmp	r3, #9
 8003402:	dc03      	bgt.n	800340c <weather+0x200>
        	   weather = 2;//sunny_cloudy(400,350);
 8003404:	2302      	movs	r3, #2
 8003406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800340a:	e0a7      	b.n	800355c <weather+0x350>
           }
           else if (Z>9 && Z<=17)
 800340c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003410:	2b09      	cmp	r3, #9
 8003412:	dd07      	ble.n	8003424 <weather+0x218>
 8003414:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003418:	2b11      	cmp	r3, #17
 800341a:	dc03      	bgt.n	8003424 <weather+0x218>
        	   weather = 3;//cloudy(300,300);
 800341c:	2303      	movs	r3, #3
 800341e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003422:	e09b      	b.n	800355c <weather+0x350>
           else if (Z>17){
 8003424:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003428:	2b11      	cmp	r3, #17
 800342a:	f340 80c1 	ble.w	80035b0 <weather+0x3a4>
        	   weather = 5;//rainy(300,300);
 800342e:	2305      	movs	r3, #5
 8003430:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           if (pressureArray[9]+pressureArray[8]+pressureArray[7]-pressureArray[0]-pressureArray[1]-pressureArray[2]>=3){
 8003434:	e0bc      	b.n	80035b0 <weather+0x3a4>
             }
         }

           else if (pressureArray[0]+pressureArray[1]+pressureArray[2]-pressureArray[9]-pressureArray[8]-pressureArray[7]>=3){
 8003436:	4b3f      	ldr	r3, [pc, #252]	; (8003534 <weather+0x328>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b3e      	ldr	r3, [pc, #248]	; (8003534 <weather+0x328>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	441a      	add	r2, r3
 8003440:	4b3c      	ldr	r3, [pc, #240]	; (8003534 <weather+0x328>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	441a      	add	r2, r3
 8003446:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <weather+0x328>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	1ad2      	subs	r2, r2, r3
 800344c:	4b39      	ldr	r3, [pc, #228]	; (8003534 <weather+0x328>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	1ad2      	subs	r2, r2, r3
 8003452:	4b38      	ldr	r3, [pc, #224]	; (8003534 <weather+0x328>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	dd33      	ble.n	80034c4 <weather+0x2b8>
         //FALLING

           if (Z<4)
 800345c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003460:	2b03      	cmp	r3, #3
 8003462:	dc03      	bgt.n	800346c <weather+0x260>
        	   weather = 1;//sunny(400,350);
 8003464:	2301      	movs	r3, #1
 8003466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           if (pressureArray[9]+pressureArray[8]+pressureArray[7]-pressureArray[0]-pressureArray[1]-pressureArray[2]>=3){
 800346a:	e0a1      	b.n	80035b0 <weather+0x3a4>
           else if (Z>=4 && Z<14){
 800346c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003470:	2b03      	cmp	r3, #3
 8003472:	dd07      	ble.n	8003484 <weather+0x278>
 8003474:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003478:	2b0d      	cmp	r3, #13
 800347a:	dc03      	bgt.n	8003484 <weather+0x278>
        	   weather = 2;//sunny_cloudy(400,350);
 800347c:	2302      	movs	r3, #2
 800347e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003482:	e06b      	b.n	800355c <weather+0x350>
           }
           else if (Z>=14 && Z<19){
 8003484:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003488:	2b0d      	cmp	r3, #13
 800348a:	dd07      	ble.n	800349c <weather+0x290>
 800348c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003490:	2b12      	cmp	r3, #18
 8003492:	dc03      	bgt.n	800349c <weather+0x290>
        	   weather = 4;//worsening(400,350);
 8003494:	2304      	movs	r3, #4
 8003496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800349a:	e05f      	b.n	800355c <weather+0x350>
           }
           else if (Z>=19 && Z<21)
 800349c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034a0:	2b12      	cmp	r3, #18
 80034a2:	dd07      	ble.n	80034b4 <weather+0x2a8>
 80034a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034a8:	2b14      	cmp	r3, #20
 80034aa:	dc03      	bgt.n	80034b4 <weather+0x2a8>
        	   weather = 3;//cloudy(300,300);
 80034ac:	2303      	movs	r3, #3
 80034ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034b2:	e053      	b.n	800355c <weather+0x350>
           else if (Z>=21){
 80034b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034b8:	2b14      	cmp	r3, #20
 80034ba:	dd79      	ble.n	80035b0 <weather+0x3a4>
        	   weather = 5;//rainy(300,300);
 80034bc:	2305      	movs	r3, #5
 80034be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           if (pressureArray[9]+pressureArray[8]+pressureArray[7]-pressureArray[0]-pressureArray[1]-pressureArray[2]>=3){
 80034c2:	e075      	b.n	80035b0 <weather+0x3a4>
             }
         }
         else{
          //STEADY
           //draw_arrow(670,450,0);
          if (Z<5)
 80034c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	dc03      	bgt.n	80034d4 <weather+0x2c8>
        	  weather = 1;//sunny(400,350);
 80034cc:	2301      	movs	r3, #1
 80034ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           if (pressureArray[9]+pressureArray[8]+pressureArray[7]-pressureArray[0]-pressureArray[1]-pressureArray[2]>=3){
 80034d2:	e06d      	b.n	80035b0 <weather+0x3a4>
           else if (Z>=5 && Z<=11){
 80034d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034d8:	2b04      	cmp	r3, #4
 80034da:	dd07      	ble.n	80034ec <weather+0x2e0>
 80034dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034e0:	2b0b      	cmp	r3, #11
 80034e2:	dc03      	bgt.n	80034ec <weather+0x2e0>
        	   weather = 2;//sunny_cloudy(400,350);
 80034e4:	2302      	movs	r3, #2
 80034e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034ea:	e037      	b.n	800355c <weather+0x350>
           }
           else if (Z>11 && Z<14)
 80034ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034f0:	2b0b      	cmp	r3, #11
 80034f2:	dd07      	ble.n	8003504 <weather+0x2f8>
 80034f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034f8:	2b0d      	cmp	r3, #13
 80034fa:	dc03      	bgt.n	8003504 <weather+0x2f8>
        	   weather = 3;//cloudy(300,300);
 80034fc:	2303      	movs	r3, #3
 80034fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003502:	e02b      	b.n	800355c <weather+0x350>
           else if (Z>=14 && Z<19){
 8003504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003508:	2b0d      	cmp	r3, #13
 800350a:	dd1f      	ble.n	800354c <weather+0x340>
 800350c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003510:	2b12      	cmp	r3, #18
 8003512:	dc1b      	bgt.n	800354c <weather+0x340>
        	   weather = 4;//worsening(400,350);
 8003514:	2304      	movs	r3, #4
 8003516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800351a:	e01f      	b.n	800355c <weather+0x350>
 800351c:	00412f4e 	.word	0x00412f4e
 8003520:	42c80000 	.word	0x42c80000
 8003524:	20000200 	.word	0x20000200
 8003528:	20000204 	.word	0x20000204
 800352c:	20000234 	.word	0x20000234
 8003530:	20000230 	.word	0x20000230
 8003534:	20000208 	.word	0x20000208
 8003538:	55555556 	.word	0x55555556
 800353c:	080082d4 	.word	0x080082d4
 8003540:	080082dc 	.word	0x080082dc
 8003544:	080082e4 	.word	0x080082e4
 8003548:	080082ec 	.word	0x080082ec
           }
           else if (Z>19){
 800354c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003550:	2b13      	cmp	r3, #19
 8003552:	dd2d      	ble.n	80035b0 <weather+0x3a4>
        	   weather = 5;//rainy(300,300);
 8003554:	2305      	movs	r3, #5
 8003556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           if (pressureArray[9]+pressureArray[8]+pressureArray[7]-pressureArray[0]-pressureArray[1]-pressureArray[2]>=3){
 800355a:	e029      	b.n	80035b0 <weather+0x3a4>
 800355c:	e028      	b.n	80035b0 <weather+0x3a4>
           }
         }
        }
        else{
         if (seapressure<1005)
 800355e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003562:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 8003566:	dc03      	bgt.n	8003570 <weather+0x364>
        	 weather = 5;//rainy(300,300);
 8003568:	2305      	movs	r3, #5
 800356a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800356e:	e020      	b.n	80035b2 <weather+0x3a6>
         else if (seapressure>=1005 && seapressure<=1015)
 8003570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003574:	f5b3 7f7b 	cmp.w	r3, #1004	; 0x3ec
 8003578:	dd08      	ble.n	800358c <weather+0x380>
 800357a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800357e:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 8003582:	da03      	bge.n	800358c <weather+0x380>
        	 weather = 3;//cloudy(300,300);
 8003584:	2303      	movs	r3, #3
 8003586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800358a:	e012      	b.n	80035b2 <weather+0x3a6>
         else if (seapressure>1015 && seapressure<1025)
 800358c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003590:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 8003594:	db08      	blt.n	80035a8 <weather+0x39c>
 8003596:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359e:	dc03      	bgt.n	80035a8 <weather+0x39c>
        	 weather = 2;//sunny_cloudy(400,350);
 80035a0:	2302      	movs	r3, #2
 80035a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035a6:	e004      	b.n	80035b2 <weather+0x3a6>
         else
        	 weather = 5;//rainy(300,300);
 80035a8:	2305      	movs	r3, #5
 80035aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035ae:	e000      	b.n	80035b2 <weather+0x3a6>
           if (pressureArray[9]+pressureArray[8]+pressureArray[7]-pressureArray[0]-pressureArray[1]-pressureArray[2]>=3){
 80035b0:	bf00      	nop
        }


       t_hour=t_hour2;
 80035b2:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <weather+0x3c4>)
 80035b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035b8:	6013      	str	r3, [r2, #0]
       t_minute=t_minute2;
 80035ba:	4a06      	ldr	r2, [pc, #24]	; (80035d4 <weather+0x3c8>)
 80035bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c0:	6013      	str	r3, [r2, #0]


     }

       return weather;
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   }
 80035c6:	4618      	mov	r0, r3
 80035c8:	37e8      	adds	r7, #232	; 0xe8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000200 	.word	0x20000200
 80035d4:	20000204 	.word	0x20000204

080035d8 <NVIC_GetPriorityGrouping>:
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <NVIC_GetPriorityGrouping+0x18>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	f003 0307 	and.w	r3, r3, #7
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <NVIC_EnableIRQ>:
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	f003 021f 	and.w	r2, r3, #31
 8003604:	4907      	ldr	r1, [pc, #28]	; (8003624 <NVIC_EnableIRQ+0x30>)
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	2001      	movs	r0, #1
 800360e:	fa00 f202 	lsl.w	r2, r0, r2
 8003612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	e000e100 	.word	0xe000e100

08003628 <NVIC_SetPriority>:
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	6039      	str	r1, [r7, #0]
 8003632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003638:	2b00      	cmp	r3, #0
 800363a:	da0b      	bge.n	8003654 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	490c      	ldr	r1, [pc, #48]	; (8003674 <NVIC_SetPriority+0x4c>)
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	3b04      	subs	r3, #4
 800364a:	0112      	lsls	r2, r2, #4
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	440b      	add	r3, r1
 8003650:	761a      	strb	r2, [r3, #24]
}
 8003652:	e009      	b.n	8003668 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	4907      	ldr	r1, [pc, #28]	; (8003678 <NVIC_SetPriority+0x50>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	0112      	lsls	r2, r2, #4
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	440b      	add	r3, r1
 8003664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00
 8003678:	e000e100 	.word	0xe000e100

0800367c <NVIC_EncodePriority>:
{
 800367c:	b480      	push	{r7}
 800367e:	b089      	sub	sp, #36	; 0x24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f1c3 0307 	rsb	r3, r3, #7
 8003696:	2b04      	cmp	r3, #4
 8003698:	bf28      	it	cs
 800369a:	2304      	movcs	r3, #4
 800369c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3304      	adds	r3, #4
 80036a2:	2b06      	cmp	r3, #6
 80036a4:	d902      	bls.n	80036ac <NVIC_EncodePriority+0x30>
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3b03      	subs	r3, #3
 80036aa:	e000      	b.n	80036ae <NVIC_EncodePriority+0x32>
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b0:	f04f 32ff 	mov.w	r2, #4294967295
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43da      	mvns	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	401a      	ands	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036c4:	f04f 31ff 	mov.w	r1, #4294967295
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	fa01 f303 	lsl.w	r3, r1, r3
 80036ce:	43d9      	mvns	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d4:	4313      	orrs	r3, r2
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3724      	adds	r7, #36	; 0x24
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <LL_AHB1_GRP1_EnableClock>:
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	4907      	ldr	r1, [pc, #28]	; (8003710 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4013      	ands	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003702:	68fb      	ldr	r3, [r7, #12]
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	40021000 	.word	0x40021000

08003714 <LL_APB2_GRP1_EnableClock>:
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <LL_APB2_GRP1_EnableClock+0x2c>)
 800371e:	699a      	ldr	r2, [r3, #24]
 8003720:	4907      	ldr	r1, [pc, #28]	; (8003740 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4313      	orrs	r3, r2
 8003726:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <LL_APB2_GRP1_EnableClock+0x2c>)
 800372a:	699a      	ldr	r2, [r3, #24]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4013      	ands	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003732:	68fb      	ldr	r3, [r7, #12]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40021000 	.word	0x40021000

08003744 <LL_SPI_Enable>:
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	601a      	str	r2, [r3, #0]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_SPI_SetStandard>:
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f023 0210 	bic.w	r2, r3, #16
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	605a      	str	r2, [r3, #4]
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f043 0208 	orr.w	r2, r3, #8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	605a      	str	r2, [r3, #4]
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f023 0208 	bic.w	r2, r3, #8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	605a      	str	r2, [r3, #4]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b01      	cmp	r3, #1
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	b2db      	uxtb	r3, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	330c      	adds	r3, #12
 8003840:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_GPIO_SetOutputPin>:
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	619a      	str	r2, [r3, #24]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_GPIO_ResetOutputPin>:
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b090      	sub	sp, #64	; 0x40
 8003890:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003892:	f107 0318 	add.w	r3, r7, #24
 8003896:	2228      	movs	r2, #40	; 0x28
 8003898:	2100      	movs	r1, #0
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fe88 	bl	80045b0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a0:	463b      	mov	r3, r7
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	60da      	str	r2, [r3, #12]
 80038ac:	611a      	str	r2, [r3, #16]
 80038ae:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80038b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80038b4:	f7ff ff2e 	bl	8003714 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80038b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80038bc:	f7ff ff12 	bl	80036e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80038c0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80038c4:	f7ff ff0e 	bl	80036e4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA7   ------> SPI1_MOSI
  PB3   ------> SPI1_SCK
  PB4   ------> SPI1_MISO
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80038cc:	2302      	movs	r3, #2
 80038ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80038d0:	2303      	movs	r3, #3
 80038d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80038dc:	2305      	movs	r3, #5
 80038de:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e0:	463b      	mov	r3, r7
 80038e2:	4619      	mov	r1, r3
 80038e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038e8:	f7fd faa9 	bl	8000e3e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 80038ec:	2318      	movs	r3, #24
 80038ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80038f0:	2302      	movs	r3, #2
 80038f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80038f4:	2303      	movs	r3, #3
 80038f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003900:	2305      	movs	r3, #5
 8003902:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003904:	463b      	mov	r3, r7
 8003906:	4619      	mov	r1, r3
 8003908:	4823      	ldr	r0, [pc, #140]	; (8003998 <MX_SPI1_Init+0x10c>)
 800390a:	f7fd fa98 	bl	8000e3e <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800390e:	f7ff fe63 	bl	80035d8 <NVIC_GetPriorityGrouping>
 8003912:	4603      	mov	r3, r0
 8003914:	2200      	movs	r2, #0
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff feaf 	bl	800367c <NVIC_EncodePriority>
 800391e:	4603      	mov	r3, r0
 8003920:	4619      	mov	r1, r3
 8003922:	2023      	movs	r0, #35	; 0x23
 8003924:	f7ff fe80 	bl	8003628 <NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 8003928:	2023      	movs	r0, #35	; 0x23
 800392a:	f7ff fe63 	bl	80035f4 <NVIC_EnableIRQ>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003932:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003936:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003938:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800393c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800393e:	2300      	movs	r3, #0
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8003942:	2300      	movs	r3, #0
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 800394c:	2320      	movs	r3, #32
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003950:	2300      	movs	r3, #0
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003954:	2300      	movs	r3, #0
 8003956:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003958:	2307      	movs	r3, #7
 800395a:	63fb      	str	r3, [r7, #60]	; 0x3c

  SPI1->CR2 |= 1 << 12;
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <MX_SPI1_Init+0x110>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4a0e      	ldr	r2, [pc, #56]	; (800399c <MX_SPI1_Init+0x110>)
 8003962:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003966:	6053      	str	r3, [r2, #4]

   LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003968:	f107 0318 	add.w	r3, r7, #24
 800396c:	4619      	mov	r1, r3
 800396e:	480b      	ldr	r0, [pc, #44]	; (800399c <MX_SPI1_Init+0x110>)
 8003970:	f7fd fbe1 	bl	8001136 <LL_SPI_Init>
   LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003974:	2100      	movs	r1, #0
 8003976:	4809      	ldr	r0, [pc, #36]	; (800399c <MX_SPI1_Init+0x110>)
 8003978:	f7ff fef4 	bl	8003764 <LL_SPI_SetStandard>
   LL_SPI_DisableNSSPulseMgt(SPI1);
 800397c:	4807      	ldr	r0, [pc, #28]	; (800399c <MX_SPI1_Init+0x110>)
 800397e:	f7ff ff14 	bl	80037aa <LL_SPI_DisableNSSPulseMgt>
   LL_SPI_EnableNSSPulseMgt(SPI1);
 8003982:	4806      	ldr	r0, [pc, #24]	; (800399c <MX_SPI1_Init+0x110>)
 8003984:	f7ff ff01 	bl	800378a <LL_SPI_EnableNSSPulseMgt>
   LL_SPI_Enable(SPI1);
 8003988:	4804      	ldr	r0, [pc, #16]	; (800399c <MX_SPI1_Init+0x110>)
 800398a:	f7ff fedb 	bl	8003744 <LL_SPI_Enable>

}
 800398e:	bf00      	nop
 8003990:	3740      	adds	r7, #64	; 0x40
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	48000400 	.word	0x48000400
 800399c:	40013000 	.word	0x40013000

080039a0 <readWriteSPI1>:

/* USER CODE BEGIN 1 */
unsigned char readWriteSPI1(unsigned char txData)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	LL_SPI_TransmitData8(SPI1, (uint8_t)txData);
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	4619      	mov	r1, r3
 80039ae:	480d      	ldr	r0, [pc, #52]	; (80039e4 <readWriteSPI1+0x44>)
 80039b0:	f7ff ff3e 	bl	8003830 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_TXE(SPI1) != SET);
 80039b4:	bf00      	nop
 80039b6:	480b      	ldr	r0, [pc, #44]	; (80039e4 <readWriteSPI1+0x44>)
 80039b8:	f7ff ff1a 	bl	80037f0 <LL_SPI_IsActiveFlag_TXE>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d1f9      	bne.n	80039b6 <readWriteSPI1+0x16>

	// wait until RXNE = 1
	while(LL_SPI_IsActiveFlag_RXNE(SPI1) != SET);
 80039c2:	bf00      	nop
 80039c4:	4807      	ldr	r0, [pc, #28]	; (80039e4 <readWriteSPI1+0x44>)
 80039c6:	f7ff ff00 	bl	80037ca <LL_SPI_IsActiveFlag_RXNE>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d1f9      	bne.n	80039c4 <readWriteSPI1+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = LL_SPI_ReceiveData8(SPI1);
 80039d0:	4804      	ldr	r0, [pc, #16]	; (80039e4 <readWriteSPI1+0x44>)
 80039d2:	f7ff ff20 	bl	8003816 <LL_SPI_ReceiveData8>
 80039d6:	4603      	mov	r3, r0
 80039d8:	73fb      	strb	r3, [r7, #15]

	return rxData;
 80039da:	7bfb      	ldrb	r3, [r7, #15]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40013000 	.word	0x40013000

080039e8 <initCS_Pin>:

void initCS_Pin(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
	cs_set();
 80039ec:	f000 f802 	bl	80039f4 <cs_set>
}
 80039f0:	bf00      	nop
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <cs_set>:

void cs_set(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80039f8:	2120      	movs	r1, #32
 80039fa:	4802      	ldr	r0, [pc, #8]	; (8003a04 <cs_set+0x10>)
 80039fc:	f7ff ff2a 	bl	8003854 <LL_GPIO_SetOutputPin>
}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	48000400 	.word	0x48000400

08003a08 <cs_reset>:

void cs_reset(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8003a0c:	2120      	movs	r1, #32
 8003a0e:	4802      	ldr	r0, [pc, #8]	; (8003a18 <cs_reset+0x10>)
 8003a10:	f7ff ff2e 	bl	8003870 <LL_GPIO_ResetOutputPin>
}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	48000400 	.word	0x48000400

08003a1c <initCD_Pin>:

void initCD_Pin(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <cd_set>:

void cd_set(void)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8003a2e:	2110      	movs	r1, #16
 8003a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a34:	f7ff ff0e 	bl	8003854 <LL_GPIO_SetOutputPin>
}
 8003a38:	bf00      	nop
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <cd_reset>:

void cd_reset(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8003a40:	2110      	movs	r1, #16
 8003a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a46:	f7ff ff13 	bl	8003870 <LL_GPIO_ResetOutputPin>
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <initRES_Pin>:

void initRES_Pin(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	*/
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <res_set>:

void res_set(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8003a60:	2108      	movs	r1, #8
 8003a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a66:	f7ff fef5 	bl	8003854 <LL_GPIO_SetOutputPin>
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <res_reset>:

void res_reset(void)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8003a72:	2108      	movs	r1, #8
 8003a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a78:	f7ff fefa 	bl	8003870 <LL_GPIO_ResetOutputPin>
}
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a92:	e7fe      	b.n	8003a92 <HardFault_Handler+0x4>

08003a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a98:	e7fe      	b.n	8003a98 <MemManage_Handler+0x4>

08003a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a9e:	e7fe      	b.n	8003a9e <BusFault_Handler+0x4>

08003aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa4:	e7fe      	b.n	8003aa4 <UsageFault_Handler+0x4>

08003aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab8:	bf00      	nop
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
	return 1;
 8003af0:	2301      	movs	r3, #1
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <_kill>:

int _kill(int pid, int sig)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b06:	f000 fd29 	bl	800455c <__errno>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2216      	movs	r2, #22
 8003b0e:	601a      	str	r2, [r3, #0]
	return -1;
 8003b10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <_exit>:

void _exit (int status)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b24:	f04f 31ff 	mov.w	r1, #4294967295
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ffe7 	bl	8003afc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b2e:	e7fe      	b.n	8003b2e <_exit+0x12>

08003b30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	e00a      	b.n	8003b58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b42:	f3af 8000 	nop.w
 8003b46:	4601      	mov	r1, r0
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	60ba      	str	r2, [r7, #8]
 8003b4e:	b2ca      	uxtb	r2, r1
 8003b50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	3301      	adds	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	dbf0      	blt.n	8003b42 <_read+0x12>
	}

return len;
 8003b60:	687b      	ldr	r3, [r7, #4]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b086      	sub	sp, #24
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	e009      	b.n	8003b90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	60ba      	str	r2, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	dbf1      	blt.n	8003b7c <_write+0x12>
	}
	return len;
 8003b98:	687b      	ldr	r3, [r7, #4]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <_close>:

int _close(int file)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
	return -1;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bca:	605a      	str	r2, [r3, #4]
	return 0;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <_isatty>:

int _isatty(int file)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
	return 1;
 8003be2:	2301      	movs	r3, #1
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
	return 0;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <_sbrk+0x50>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <_sbrk+0x16>
		heap_end = &end;
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <_sbrk+0x50>)
 8003c1e:	4a10      	ldr	r2, [pc, #64]	; (8003c60 <_sbrk+0x54>)
 8003c20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <_sbrk+0x50>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <_sbrk+0x50>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	466a      	mov	r2, sp
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d907      	bls.n	8003c46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003c36:	f000 fc91 	bl	800455c <__errno>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	220c      	movs	r2, #12
 8003c3e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003c40:	f04f 33ff 	mov.w	r3, #4294967295
 8003c44:	e006      	b.n	8003c54 <_sbrk+0x48>
	}

	heap_end += incr;
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <_sbrk+0x50>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4a03      	ldr	r2, [pc, #12]	; (8003c5c <_sbrk+0x50>)
 8003c50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000238 	.word	0x20000238
 8003c60:	200002f8 	.word	0x200002f8

08003c64 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c68:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <SystemInit+0x84>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <SystemInit+0x84>)
 8003c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003c78:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <SystemInit+0x88>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <SystemInit+0x88>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003c84:	4b19      	ldr	r3, [pc, #100]	; (8003cec <SystemInit+0x88>)
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	4918      	ldr	r1, [pc, #96]	; (8003cec <SystemInit+0x88>)
 8003c8a:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <SystemInit+0x8c>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003c90:	4b16      	ldr	r3, [pc, #88]	; (8003cec <SystemInit+0x88>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a15      	ldr	r2, [pc, #84]	; (8003cec <SystemInit+0x88>)
 8003c96:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ca0:	4b12      	ldr	r3, [pc, #72]	; (8003cec <SystemInit+0x88>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a11      	ldr	r2, [pc, #68]	; (8003cec <SystemInit+0x88>)
 8003ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003caa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <SystemInit+0x88>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <SystemInit+0x88>)
 8003cb2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003cb6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <SystemInit+0x88>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	4a0b      	ldr	r2, [pc, #44]	; (8003cec <SystemInit+0x88>)
 8003cbe:	f023 030f 	bic.w	r3, r3, #15
 8003cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <SystemInit+0x88>)
 8003cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc8:	4908      	ldr	r1, [pc, #32]	; (8003cec <SystemInit+0x88>)
 8003cca:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <SystemInit+0x90>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <SystemInit+0x88>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003cd6:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <SystemInit+0x84>)
 8003cd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cdc:	609a      	str	r2, [r3, #8]
#endif
}
 8003cde:	bf00      	nop
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	f87fc00c 	.word	0xf87fc00c
 8003cf4:	ff00fccc 	.word	0xff00fccc

08003cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003cfc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003cfe:	e003      	b.n	8003d08 <LoopCopyDataInit>

08003d00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003d02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003d04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003d06:	3104      	adds	r1, #4

08003d08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003d08:	480b      	ldr	r0, [pc, #44]	; (8003d38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003d0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003d0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003d10:	d3f6      	bcc.n	8003d00 <CopyDataInit>
	ldr	r2, =_sbss
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003d14:	e002      	b.n	8003d1c <LoopFillZerobss>

08003d16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003d16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003d18:	f842 3b04 	str.w	r3, [r2], #4

08003d1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <LoopForever+0x16>)
	cmp	r2, r3
 8003d1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003d20:	d3f9      	bcc.n	8003d16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d22:	f7ff ff9f 	bl	8003c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d26:	f000 fc1f 	bl	8004568 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d2a:	f7fe fa89 	bl	8002240 <main>

08003d2e <LoopForever>:

LoopForever:
    b LoopForever
 8003d2e:	e7fe      	b.n	8003d2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003d30:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003d34:	08008a20 	.word	0x08008a20
	ldr	r0, =_sdata
 8003d38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003d3c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8003d40:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8003d44:	200002f4 	.word	0x200002f4

08003d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d48:	e7fe      	b.n	8003d48 <ADC1_2_IRQHandler>

08003d4a <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 8003d4e:	f7ff fe8e 	bl	8003a6e <res_reset>
	LL_mDelay(100);
 8003d52:	2064      	movs	r0, #100	; 0x64
 8003d54:	f7fd fa66 	bl	8001224 <LL_mDelay>

	res_set();
 8003d58:	f7ff fe80 	bl	8003a5c <res_set>
	LL_mDelay(100);
 8003d5c:	2064      	movs	r0, #100	; 0x64
 8003d5e:	f7fd fa61 	bl	8001224 <LL_mDelay>
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 8003d70:	f7ff fe64 	bl	8003a3c <cd_reset>
	cs_reset();
 8003d74:	f7ff fe48 	bl	8003a08 <cs_reset>
	readWriteSPI1(address);
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fe10 	bl	80039a0 <readWriteSPI1>
	cs_set();
 8003d80:	f7ff fe38 	bl	80039f4 <cs_set>
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <lcdWriteParameter>:

void lcdWriteParameter(uint8_t parameter)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
	cd_set();
 8003d96:	f7ff fe48 	bl	8003a2a <cd_set>
	cs_reset();
 8003d9a:	f7ff fe35 	bl	8003a08 <cs_reset>
	readWriteSPI1(parameter);
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fdfd 	bl	80039a0 <readWriteSPI1>
	cs_set();
 8003da6:	f7ff fe25 	bl	80039f4 <cs_set>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	4603      	mov	r3, r0
 8003dba:	460a      	mov	r2, r1
 8003dbc:	71fb      	strb	r3, [r7, #7]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	71bb      	strb	r3, [r7, #6]
	cd_set();
 8003dc2:	f7ff fe32 	bl	8003a2a <cd_set>
	cs_reset();
 8003dc6:	f7ff fe1f 	bl	8003a08 <cs_reset>
	readWriteSPI1(dataByte1);
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fde7 	bl	80039a0 <readWriteSPI1>
	readWriteSPI1(dataByte2);
 8003dd2:	79bb      	ldrb	r3, [r7, #6]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fde3 	bl	80039a0 <readWriteSPI1>
	cs_set();
 8003dda:	f7ff fe0b 	bl	80039f4 <cs_set>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <lcdInitialise>:

void lcdInitialise(uint8_t orientation)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 8003df0:	f7ff ffab 	bl	8003d4a <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 8003df4:	2011      	movs	r0, #17
 8003df6:	f7ff ffb6 	bl	8003d66 <lcdWriteCommand>
    LL_mDelay(100); //Delay(10000); // Wait for the screen to wake up
 8003dfa:	2064      	movs	r0, #100	; 0x64
 8003dfc:	f7fd fa12 	bl	8001224 <LL_mDelay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 8003e00:	203a      	movs	r0, #58	; 0x3a
 8003e02:	f7ff ffb0 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 8003e06:	2005      	movs	r0, #5
 8003e08:	f7ff ffc0 	bl	8003d8c <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 8003e0c:	2026      	movs	r0, #38	; 0x26
 8003e0e:	f7ff ffaa 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 8003e12:	2004      	movs	r0, #4
 8003e14:	f7ff ffba 	bl	8003d8c <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8003e18:	20f2      	movs	r0, #242	; 0xf2
 8003e1a:	f7ff ffa4 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 8003e1e:	2001      	movs	r0, #1
 8003e20:	f7ff ffb4 	bl	8003d8c <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 8003e24:	20e0      	movs	r0, #224	; 0xe0
 8003e26:	f7ff ff9e 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8003e2a:	203f      	movs	r0, #63	; 0x3f
 8003e2c:	f7ff ffae 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 8003e30:	2025      	movs	r0, #37	; 0x25
 8003e32:	f7ff ffab 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 8003e36:	201c      	movs	r0, #28
 8003e38:	f7ff ffa8 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 8003e3c:	201e      	movs	r0, #30
 8003e3e:	f7ff ffa5 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 8003e42:	2020      	movs	r0, #32
 8003e44:	f7ff ffa2 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 8003e48:	2012      	movs	r0, #18
 8003e4a:	f7ff ff9f 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 8003e4e:	202a      	movs	r0, #42	; 0x2a
 8003e50:	f7ff ff9c 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 8003e54:	2090      	movs	r0, #144	; 0x90
 8003e56:	f7ff ff99 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 8003e5a:	2024      	movs	r0, #36	; 0x24
 8003e5c:	f7ff ff96 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 8003e60:	2011      	movs	r0, #17
 8003e62:	f7ff ff93 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 8003e66:	2000      	movs	r0, #0
 8003e68:	f7ff ff90 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	f7ff ff8d 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 8003e72:	2000      	movs	r0, #0
 8003e74:	f7ff ff8a 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 8003e78:	2000      	movs	r0, #0
 8003e7a:	f7ff ff87 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f7ff ff84 	bl	8003d8c <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 8003e84:	20e1      	movs	r0, #225	; 0xe1
 8003e86:	f7ff ff6e 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 8003e8a:	2020      	movs	r0, #32
 8003e8c:	f7ff ff7e 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 8003e90:	2020      	movs	r0, #32
 8003e92:	f7ff ff7b 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 8003e96:	2020      	movs	r0, #32
 8003e98:	f7ff ff78 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 8003e9c:	2020      	movs	r0, #32
 8003e9e:	f7ff ff75 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 8003ea2:	2005      	movs	r0, #5
 8003ea4:	f7ff ff72 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f7ff ff6f 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 8003eae:	2015      	movs	r0, #21
 8003eb0:	f7ff ff6c 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 8003eb4:	20a7      	movs	r0, #167	; 0xa7
 8003eb6:	f7ff ff69 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 8003eba:	203d      	movs	r0, #61	; 0x3d
 8003ebc:	f7ff ff66 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 8003ec0:	2018      	movs	r0, #24
 8003ec2:	f7ff ff63 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 8003ec6:	2025      	movs	r0, #37	; 0x25
 8003ec8:	f7ff ff60 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 8003ecc:	202a      	movs	r0, #42	; 0x2a
 8003ece:	f7ff ff5d 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 8003ed2:	202b      	movs	r0, #43	; 0x2b
 8003ed4:	f7ff ff5a 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 8003ed8:	202b      	movs	r0, #43	; 0x2b
 8003eda:	f7ff ff57 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 8003ede:	203a      	movs	r0, #58	; 0x3a
 8003ee0:	f7ff ff54 	bl	8003d8c <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 8003ee4:	20b1      	movs	r0, #177	; 0xb1
 8003ee6:	f7ff ff3e 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 8003eea:	2008      	movs	r0, #8
 8003eec:	f7ff ff4e 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 8003ef0:	2008      	movs	r0, #8
 8003ef2:	f7ff ff4b 	bl	8003d8c <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 8003ef6:	20b4      	movs	r0, #180	; 0xb4
 8003ef8:	f7ff ff35 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8003efc:	2007      	movs	r0, #7
 8003efe:	f7ff ff45 	bl	8003d8c <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 8003f02:	20c0      	movs	r0, #192	; 0xc0
 8003f04:	f7ff ff2f 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8003f08:	200a      	movs	r0, #10
 8003f0a:	f7ff ff3f 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 8003f0e:	2002      	movs	r0, #2
 8003f10:	f7ff ff3c 	bl	8003d8c <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 8003f14:	20c1      	movs	r0, #193	; 0xc1
 8003f16:	f7ff ff26 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 8003f1a:	2002      	movs	r0, #2
 8003f1c:	f7ff ff36 	bl	8003d8c <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 8003f20:	20c5      	movs	r0, #197	; 0xc5
 8003f22:	f7ff ff20 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 8003f26:	2050      	movs	r0, #80	; 0x50
 8003f28:	f7ff ff30 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 8003f2c:	205b      	movs	r0, #91	; 0x5b
 8003f2e:	f7ff ff2d 	bl	8003d8c <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 8003f32:	20c7      	movs	r0, #199	; 0xc7
 8003f34:	f7ff ff17 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 8003f38:	2040      	movs	r0, #64	; 0x40
 8003f3a:	f7ff ff27 	bl	8003d8c <lcdWriteParameter>

    lcdWriteCommand(SET_COLUMN_ADDRESS);
 8003f3e:	202a      	movs	r0, #42	; 0x2a
 8003f40:	f7ff ff11 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x00); // XSH
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7ff ff21 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x00); // XSL
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f7ff ff1e 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x00); // XEH
 8003f50:	2000      	movs	r0, #0
 8003f52:	f7ff ff1b 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x7f); // XEL (128 pixels x)
 8003f56:	207f      	movs	r0, #127	; 0x7f
 8003f58:	f7ff ff18 	bl	8003d8c <lcdWriteParameter>

    lcdWriteCommand(SET_PAGE_ADDRESS);
 8003f5c:	202b      	movs	r0, #43	; 0x2b
 8003f5e:	f7ff ff02 	bl	8003d66 <lcdWriteCommand>
    lcdWriteParameter(0x00);
 8003f62:	2000      	movs	r0, #0
 8003f64:	f7ff ff12 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f7ff ff0f 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8003f6e:	2000      	movs	r0, #0
 8003f70:	f7ff ff0c 	bl	8003d8c <lcdWriteParameter>
    lcdWriteParameter(0x7f); // 128 pixels y
 8003f74:	207f      	movs	r0, #127	; 0x7f
 8003f76:	f7ff ff09 	bl	8003d8c <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 8003f7a:	2036      	movs	r0, #54	; 0x36
 8003f7c:	f7ff fef3 	bl	8003d66 <lcdWriteCommand>
	lcdWriteParameter(orientation);
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff ff02 	bl	8003d8c <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 8003f88:	2029      	movs	r0, #41	; 0x29
 8003f8a:	f7ff feec 	bl	8003d66 <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 8003f8e:	202c      	movs	r0, #44	; 0x2c
 8003f90:	f7ff fee9 	bl	8003d66 <lcdWriteCommand>
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	80fb      	strh	r3, [r7, #6]
	uint16_t pixel;

	// Set the column address to 0-127
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8003fa6:	202a      	movs	r0, #42	; 0x2a
 8003fa8:	f7ff fedd 	bl	8003d66 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8003fac:	2000      	movs	r0, #0
 8003fae:	f7ff feed 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	f7ff feea 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8003fb8:	2000      	movs	r0, #0
 8003fba:	f7ff fee7 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8003fbe:	207f      	movs	r0, #127	; 0x7f
 8003fc0:	f7ff fee4 	bl	8003d8c <lcdWriteParameter>

	// Set the page address to 0-127
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8003fc4:	202b      	movs	r0, #43	; 0x2b
 8003fc6:	f7ff fece 	bl	8003d66 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f7ff fede 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f7ff fedb 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f7ff fed8 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8003fdc:	207f      	movs	r0, #127	; 0x7f
 8003fde:	f7ff fed5 	bl	8003d8c <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 8003fe2:	202c      	movs	r0, #44	; 0x2c
 8003fe4:	f7ff febf 	bl	8003d66 <lcdWriteCommand>
	for(pixel = 0; pixel < 16385; pixel++)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	81fb      	strh	r3, [r7, #14]
 8003fec:	e00c      	b.n	8004008 <lcdClearDisplay+0x6c>
	{
		lcdWriteData(colour >> 8, colour);
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	0a1b      	lsrs	r3, r3, #8
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fed8 	bl	8003db2 <lcdWriteData>
	for(pixel = 0; pixel < 16385; pixel++)
 8004002:	89fb      	ldrh	r3, [r7, #14]
 8004004:	3301      	adds	r3, #1
 8004006:	81fb      	strh	r3, [r7, #14]
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400e:	d9ee      	bls.n	8003fee <lcdClearDisplay+0x52>
	}
}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <lcdPlot>:

void lcdPlot(uint8_t x, uint8_t y, uint16_t colour)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	4603      	mov	r3, r0
 8004022:	71fb      	strb	r3, [r7, #7]
 8004024:	460b      	mov	r3, r1
 8004026:	71bb      	strb	r3, [r7, #6]
 8004028:	4613      	mov	r3, r2
 800402a:	80bb      	strh	r3, [r7, #4]
	// Horizontal Address Start Position
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 800402c:	202a      	movs	r0, #42	; 0x2a
 800402e:	f7ff fe9a 	bl	8003d66 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8004032:	2000      	movs	r0, #0
 8004034:	f7ff feaa 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(x);
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fea6 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8004040:	2000      	movs	r0, #0
 8004042:	f7ff fea3 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8004046:	207f      	movs	r0, #127	; 0x7f
 8004048:	f7ff fea0 	bl	8003d8c <lcdWriteParameter>

	// Vertical Address end Position
	lcdWriteCommand(SET_PAGE_ADDRESS);
 800404c:	202b      	movs	r0, #43	; 0x2b
 800404e:	f7ff fe8a 	bl	8003d66 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8004052:	2000      	movs	r0, #0
 8004054:	f7ff fe9a 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(y);
 8004058:	79bb      	ldrb	r3, [r7, #6]
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff fe96 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8004060:	2000      	movs	r0, #0
 8004062:	f7ff fe93 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x7f);//7f
 8004066:	207f      	movs	r0, #127	; 0x7f
 8004068:	f7ff fe90 	bl	8003d8c <lcdWriteParameter>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 800406c:	202c      	movs	r0, #44	; 0x2c
 800406e:	f7ff fe7a 	bl	8003d66 <lcdWriteCommand>
	lcdWriteData(colour >> 8, colour);
 8004072:	88bb      	ldrh	r3, [r7, #4]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	b29b      	uxth	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	88ba      	ldrh	r2, [r7, #4]
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fe96 	bl	8003db2 <lcdWriteData>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <lcdLine>:

// Draw a line from x0, y0 to x1, y1
// Note:	This is a version of Bresenham's line drawing algorithm
//			It only draws lines from left to right!
void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 800408e:	b590      	push	{r4, r7, lr}
 8004090:	b087      	sub	sp, #28
 8004092:	af00      	add	r7, sp, #0
 8004094:	4604      	mov	r4, r0
 8004096:	4608      	mov	r0, r1
 8004098:	4611      	mov	r1, r2
 800409a:	461a      	mov	r2, r3
 800409c:	4623      	mov	r3, r4
 800409e:	80fb      	strh	r3, [r7, #6]
 80040a0:	4603      	mov	r3, r0
 80040a2:	80bb      	strh	r3, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
 80040a8:	4613      	mov	r3, r2
 80040aa:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 80040ac:	883a      	ldrh	r2, [r7, #0]
 80040ae:	88bb      	ldrh	r3, [r7, #4]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	82fb      	strh	r3, [r7, #22]
	int16_t dx = x1 - x0;
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	b29b      	uxth	r3, r3
 80040be:	82bb      	strh	r3, [r7, #20]
	int16_t stepx, stepy;

	if (dy < 0)
 80040c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	da07      	bge.n	80040d8 <lcdLine+0x4a>
	{
		dy = -dy; stepy = -1;
 80040c8:	8afb      	ldrh	r3, [r7, #22]
 80040ca:	425b      	negs	r3, r3
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	82fb      	strh	r3, [r7, #22]
 80040d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040d4:	823b      	strh	r3, [r7, #16]
 80040d6:	e001      	b.n	80040dc <lcdLine+0x4e>
	}
	else stepy = 1;
 80040d8:	2301      	movs	r3, #1
 80040da:	823b      	strh	r3, [r7, #16]

 	if (dx < 0)
 80040dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	da07      	bge.n	80040f4 <lcdLine+0x66>
	{
		dx = -dx; stepx = -1;
 80040e4:	8abb      	ldrh	r3, [r7, #20]
 80040e6:	425b      	negs	r3, r3
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	82bb      	strh	r3, [r7, #20]
 80040ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040f0:	827b      	strh	r3, [r7, #18]
 80040f2:	e001      	b.n	80040f8 <lcdLine+0x6a>
	}
	else stepx = 1;
 80040f4:	2301      	movs	r3, #1
 80040f6:	827b      	strh	r3, [r7, #18]

	dy <<= 1; 							// dy is now 2*dy
 80040f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	82fb      	strh	r3, [r7, #22]
	dx <<= 1; 							// dx is now 2*dx
 8004100:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	82bb      	strh	r3, [r7, #20]

	lcdPlot(x0, y0, colour);
 8004108:	88fb      	ldrh	r3, [r7, #6]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	88ba      	ldrh	r2, [r7, #4]
 800410e:	b2d1      	uxtb	r1, r2
 8004110:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff ff81 	bl	800401a <lcdPlot>

	if (dx > dy) {
 8004118:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800411c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004120:	429a      	cmp	r2, r3
 8004122:	dd2e      	ble.n	8004182 <lcdLine+0xf4>
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
 8004124:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004128:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800412c:	1052      	asrs	r2, r2, #1
 800412e:	b212      	sxth	r2, r2
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
		while (x0 != x1)
 8004134:	e01e      	b.n	8004174 <lcdLine+0xe6>
		{
			if (fraction >= 0)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	db09      	blt.n	8004150 <lcdLine+0xc2>
			{
				y0 += stepy;
 800413c:	88ba      	ldrh	r2, [r7, #4]
 800413e:	8a3b      	ldrh	r3, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	b29b      	uxth	r3, r3
 8004144:	80bb      	strh	r3, [r7, #4]
				fraction -= dx; 		// same as fraction -= 2*dx
 8004146:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	60fb      	str	r3, [r7, #12]
			}

   			x0 += stepx;
 8004150:	88fa      	ldrh	r2, [r7, #6]
 8004152:	8a7b      	ldrh	r3, [r7, #18]
 8004154:	4413      	add	r3, r2
 8004156:	b29b      	uxth	r3, r3
 8004158:	80fb      	strh	r3, [r7, #6]
   			fraction += dy; 				// same as fraction -= 2*dy
 800415a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
   			lcdPlot(x0, y0, colour);
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	88ba      	ldrh	r2, [r7, #4]
 800416a:	b2d1      	uxtb	r1, r2
 800416c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff ff53 	bl	800401a <lcdPlot>
		while (x0 != x1)
 8004174:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004178:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800417c:	429a      	cmp	r2, r3
 800417e:	d1da      	bne.n	8004136 <lcdLine+0xa8>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
}
 8004180:	e02d      	b.n	80041de <lcdLine+0x150>
		int fraction = dx - (dy >> 1);
 8004182:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004186:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800418a:	1052      	asrs	r2, r2, #1
 800418c:	b212      	sxth	r2, r2
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	60bb      	str	r3, [r7, #8]
		while (y0 != y1)
 8004192:	e01e      	b.n	80041d2 <lcdLine+0x144>
			if (fraction >= 0)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	db09      	blt.n	80041ae <lcdLine+0x120>
				x0 += stepx;
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	8a7b      	ldrh	r3, [r7, #18]
 800419e:	4413      	add	r3, r2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 80041a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	60bb      	str	r3, [r7, #8]
			y0 += stepy;
 80041ae:	88ba      	ldrh	r2, [r7, #4]
 80041b0:	8a3b      	ldrh	r3, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 80041b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	4413      	add	r3, r2
 80041c0:	60bb      	str	r3, [r7, #8]
			lcdPlot(x0, y0, colour);
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	88ba      	ldrh	r2, [r7, #4]
 80041c8:	b2d1      	uxtb	r1, r2
 80041ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff ff24 	bl	800401a <lcdPlot>
		while (y0 != y1)
 80041d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80041d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d1da      	bne.n	8004194 <lcdLine+0x106>
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd90      	pop	{r4, r7, pc}

080041e6 <lcdCircle>:
// Draw a circle
// Note:	This is another version of Bresenham's line drawing algorithm.
//			There's plenty of documentation on the web if you are curious
//			how this works.
void lcdCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour)
{
 80041e6:	b590      	push	{r4, r7, lr}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	4604      	mov	r4, r0
 80041ee:	4608      	mov	r0, r1
 80041f0:	4611      	mov	r1, r2
 80041f2:	461a      	mov	r2, r3
 80041f4:	4623      	mov	r3, r4
 80041f6:	80fb      	strh	r3, [r7, #6]
 80041f8:	4603      	mov	r3, r0
 80041fa:	80bb      	strh	r3, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	807b      	strh	r3, [r7, #2]
 8004200:	4613      	mov	r3, r2
 8004202:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 8004204:	2300      	movs	r3, #0
 8004206:	81fb      	strh	r3, [r7, #14]
 8004208:	887b      	ldrh	r3, [r7, #2]
 800420a:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 800420c:	887b      	ldrh	r3, [r7, #2]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	b29b      	uxth	r3, r3
 8004212:	f1c3 0303 	rsb	r3, r3, #3
 8004216:	b29b      	uxth	r3, r3
 8004218:	817b      	strh	r3, [r7, #10]

    while(x <= y)
 800421a:	e0a5      	b.n	8004368 <lcdCircle+0x182>
	{
		lcdPlot(xCentre + x, yCentre + y, colour);
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	b2da      	uxtb	r2, r3
 8004220:	89fb      	ldrh	r3, [r7, #14]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	4413      	add	r3, r2
 8004226:	b2d8      	uxtb	r0, r3
 8004228:	88bb      	ldrh	r3, [r7, #4]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	89bb      	ldrh	r3, [r7, #12]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	4413      	add	r3, r2
 8004232:	b2db      	uxtb	r3, r3
 8004234:	883a      	ldrh	r2, [r7, #0]
 8004236:	4619      	mov	r1, r3
 8004238:	f7ff feef 	bl	800401a <lcdPlot>
		lcdPlot(xCentre + y, yCentre + x, colour);
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	89bb      	ldrh	r3, [r7, #12]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	4413      	add	r3, r2
 8004246:	b2d8      	uxtb	r0, r3
 8004248:	88bb      	ldrh	r3, [r7, #4]
 800424a:	b2da      	uxtb	r2, r3
 800424c:	89fb      	ldrh	r3, [r7, #14]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	4413      	add	r3, r2
 8004252:	b2db      	uxtb	r3, r3
 8004254:	883a      	ldrh	r2, [r7, #0]
 8004256:	4619      	mov	r1, r3
 8004258:	f7ff fedf 	bl	800401a <lcdPlot>
		lcdPlot(xCentre - x, yCentre + y, colour);
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	b2da      	uxtb	r2, r3
 8004260:	89fb      	ldrh	r3, [r7, #14]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	b2d8      	uxtb	r0, r3
 8004268:	88bb      	ldrh	r3, [r7, #4]
 800426a:	b2da      	uxtb	r2, r3
 800426c:	89bb      	ldrh	r3, [r7, #12]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	4413      	add	r3, r2
 8004272:	b2db      	uxtb	r3, r3
 8004274:	883a      	ldrh	r2, [r7, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	f7ff fecf 	bl	800401a <lcdPlot>
		lcdPlot(xCentre + y, yCentre - x, colour);
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	89bb      	ldrh	r3, [r7, #12]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	4413      	add	r3, r2
 8004286:	b2d8      	uxtb	r0, r3
 8004288:	88bb      	ldrh	r3, [r7, #4]
 800428a:	b2da      	uxtb	r2, r3
 800428c:	89fb      	ldrh	r3, [r7, #14]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	883a      	ldrh	r2, [r7, #0]
 8004296:	4619      	mov	r1, r3
 8004298:	f7ff febf 	bl	800401a <lcdPlot>
		lcdPlot(xCentre - x, yCentre - y, colour);
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	89fb      	ldrh	r3, [r7, #14]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	b2d8      	uxtb	r0, r3
 80042a8:	88bb      	ldrh	r3, [r7, #4]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	89bb      	ldrh	r3, [r7, #12]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	883a      	ldrh	r2, [r7, #0]
 80042b6:	4619      	mov	r1, r3
 80042b8:	f7ff feaf 	bl	800401a <lcdPlot>
		lcdPlot(xCentre - y, yCentre - x, colour);
 80042bc:	88fb      	ldrh	r3, [r7, #6]
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	89bb      	ldrh	r3, [r7, #12]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	b2d8      	uxtb	r0, r3
 80042c8:	88bb      	ldrh	r3, [r7, #4]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	89fb      	ldrh	r3, [r7, #14]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	883a      	ldrh	r2, [r7, #0]
 80042d6:	4619      	mov	r1, r3
 80042d8:	f7ff fe9f 	bl	800401a <lcdPlot>
		lcdPlot(xCentre + x, yCentre - y, colour);
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	89fb      	ldrh	r3, [r7, #14]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	4413      	add	r3, r2
 80042e6:	b2d8      	uxtb	r0, r3
 80042e8:	88bb      	ldrh	r3, [r7, #4]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	89bb      	ldrh	r3, [r7, #12]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	883a      	ldrh	r2, [r7, #0]
 80042f6:	4619      	mov	r1, r3
 80042f8:	f7ff fe8f 	bl	800401a <lcdPlot>
		lcdPlot(xCentre - y, yCentre + x, colour);
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	89bb      	ldrh	r3, [r7, #12]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	b2d8      	uxtb	r0, r3
 8004308:	88bb      	ldrh	r3, [r7, #4]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	89fb      	ldrh	r3, [r7, #14]
 800430e:	b2db      	uxtb	r3, r3
 8004310:	4413      	add	r3, r2
 8004312:	b2db      	uxtb	r3, r3
 8004314:	883a      	ldrh	r2, [r7, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	f7ff fe7f 	bl	800401a <lcdPlot>

		if (d < 0) d += (4 * x) + 6;
 800431c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004320:	2b00      	cmp	r3, #0
 8004322:	da09      	bge.n	8004338 <lcdCircle+0x152>
 8004324:	89fb      	ldrh	r3, [r7, #14]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	b29a      	uxth	r2, r3
 800432a:	897b      	ldrh	r3, [r7, #10]
 800432c:	4413      	add	r3, r2
 800432e:	b29b      	uxth	r3, r3
 8004330:	3306      	adds	r3, #6
 8004332:	b29b      	uxth	r3, r3
 8004334:	817b      	strh	r3, [r7, #10]
 8004336:	e011      	b.n	800435c <lcdCircle+0x176>
		else
		{
			d += (4 * (x - y)) + 10;
 8004338:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800433c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	b29b      	uxth	r3, r3
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	b29a      	uxth	r2, r3
 8004348:	897b      	ldrh	r3, [r7, #10]
 800434a:	4413      	add	r3, r2
 800434c:	b29b      	uxth	r3, r3
 800434e:	330a      	adds	r3, #10
 8004350:	b29b      	uxth	r3, r3
 8004352:	817b      	strh	r3, [r7, #10]
			y -= 1;
 8004354:	89bb      	ldrh	r3, [r7, #12]
 8004356:	3b01      	subs	r3, #1
 8004358:	b29b      	uxth	r3, r3
 800435a:	81bb      	strh	r3, [r7, #12]
		}

		x++;
 800435c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004360:	b29b      	uxth	r3, r3
 8004362:	3301      	adds	r3, #1
 8004364:	b29b      	uxth	r3, r3
 8004366:	81fb      	strh	r3, [r7, #14]
    while(x <= y)
 8004368:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800436c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004370:	429a      	cmp	r2, r3
 8004372:	f77f af53 	ble.w	800421c <lcdCircle+0x36>
	}
}
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	bd90      	pop	{r4, r7, pc}

08004380 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4623      	mov	r3, r4
 8004390:	71fb      	strb	r3, [r7, #7]
 8004392:	4603      	mov	r3, r0
 8004394:	71bb      	strb	r3, [r7, #6]
 8004396:	460b      	mov	r3, r1
 8004398:	717b      	strb	r3, [r7, #5]
 800439a:	4613      	mov	r3, r2
 800439c:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 800439e:	202a      	movs	r0, #42	; 0x2a
 80043a0:	f7ff fce1 	bl	8003d66 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80043a4:	2000      	movs	r0, #0
 80043a6:	f7ff fcf1 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(x);
 80043aa:	79bb      	ldrb	r3, [r7, #6]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fced 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80043b2:	2000      	movs	r0, #0
 80043b4:	f7ff fcea 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(x+5);
 80043b8:	79bb      	ldrb	r3, [r7, #6]
 80043ba:	3305      	adds	r3, #5
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fce4 	bl	8003d8c <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 80043c4:	202b      	movs	r0, #43	; 0x2b
 80043c6:	f7ff fcce 	bl	8003d66 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80043ca:	2000      	movs	r0, #0
 80043cc:	f7ff fcde 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(y);
 80043d0:	797b      	ldrb	r3, [r7, #5]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff fcda 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80043d8:	2000      	movs	r0, #0
 80043da:	f7ff fcd7 	bl	8003d8c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 80043de:	207f      	movs	r0, #127	; 0x7f
 80043e0:	f7ff fcd4 	bl	8003d8c <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 80043e4:	202c      	movs	r0, #44	; 0x2c
 80043e6:	f7ff fcbe 	bl	8003d66 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
 80043ee:	e032      	b.n	8004456 <lcdPutCh+0xd6>
	{
		for (column = 0; column < 6; column++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	73bb      	strb	r3, [r7, #14]
 80043f4:	e029      	b.n	800444a <lcdPutCh+0xca>
		{
			//if ((font5x8[character][column]) & (1 << row))
			if ((fontus[character][column]) & (1 << row))
 80043f6:	79fa      	ldrb	r2, [r7, #7]
 80043f8:	7bb9      	ldrb	r1, [r7, #14]
 80043fa:	481b      	ldr	r0, [pc, #108]	; (8004468 <lcdPutCh+0xe8>)
 80043fc:	4613      	mov	r3, r2
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4413      	add	r3, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	4403      	add	r3, r0
 8004406:	440b      	add	r3, r1
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	fa42 f303 	asr.w	r3, r2, r3
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <lcdPutCh+0xb0>
				lcdWriteData(fgColour>>8, fgColour);
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	0a1b      	lsrs	r3, r3, #8
 800441e:	b29b      	uxth	r3, r3
 8004420:	b2db      	uxtb	r3, r3
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	4611      	mov	r1, r2
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fcc2 	bl	8003db2 <lcdWriteData>
 800442e:	e009      	b.n	8004444 <lcdPutCh+0xc4>
			else lcdWriteData(bgColour >> 8, bgColour);
 8004430:	8c3b      	ldrh	r3, [r7, #32]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	b29b      	uxth	r3, r3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	8c3a      	ldrh	r2, [r7, #32]
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	4611      	mov	r1, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fcb7 	bl	8003db2 <lcdWriteData>
		for (column = 0; column < 6; column++)
 8004444:	7bbb      	ldrb	r3, [r7, #14]
 8004446:	3301      	adds	r3, #1
 8004448:	73bb      	strb	r3, [r7, #14]
 800444a:	7bbb      	ldrb	r3, [r7, #14]
 800444c:	2b05      	cmp	r3, #5
 800444e:	d9d2      	bls.n	80043f6 <lcdPutCh+0x76>
	for (row = 0; row < 8; row++)
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	3301      	adds	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2b07      	cmp	r3, #7
 800445a:	d9c9      	bls.n	80043f0 <lcdPutCh+0x70>
		}
	}
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	bd90      	pop	{r4, r7, pc}
 8004466:	bf00      	nop
 8004468:	080082f4 	.word	0x080082f4

0800446c <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
 8004476:	460b      	mov	r3, r1
 8004478:	71bb      	strb	r3, [r7, #6]
 800447a:	4613      	mov	r3, r2
 800447c:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 800447e:	797b      	ldrb	r3, [r7, #5]
 8004480:	02db      	lsls	r3, r3, #11
 8004482:	b21a      	sxth	r2, r3
 8004484:	79bb      	ldrb	r3, [r7, #6]
 8004486:	019b      	lsls	r3, r3, #6
 8004488:	b21b      	sxth	r3, r3
 800448a:	4313      	orrs	r3, r2
 800448c:	b21a      	sxth	r2, r3
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	b21b      	sxth	r3, r3
 8004492:	4313      	orrs	r3, r2
 8004494:	b21b      	sxth	r3, r3
 8004496:	b29b      	uxth	r3, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <lcdTextX>:

// This routine takes a row number from 0 to 20 and
// returns the x coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextX(uint8_t x) { return x*6; }
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	461a      	mov	r2, r3
 80044b2:	0052      	lsls	r2, r2, #1
 80044b4:	4413      	add	r3, r2
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <lcdTextY>:

// This routine takes a column number from 0 to 20 and
// returns the y coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	4603      	mov	r3, r0
 80044ce:	71fb      	strb	r3, [r7, #7]
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <lcdPutS>:

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 80044e2:	b590      	push	{r4, r7, lr}
 80044e4:	b087      	sub	sp, #28
 80044e6:	af02      	add	r7, sp, #8
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	4608      	mov	r0, r1
 80044ec:	4611      	mov	r1, r2
 80044ee:	461a      	mov	r2, r3
 80044f0:	4603      	mov	r3, r0
 80044f2:	70fb      	strb	r3, [r7, #3]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70bb      	strb	r3, [r7, #2]
 80044f8:	4613      	mov	r3, r2
 80044fa:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8004500:	2300      	movs	r3, #0
 8004502:	73fb      	strb	r3, [r7, #15]
 8004504:	e01c      	b.n	8004540 <lcdPutS+0x5e>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x > 121)
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	2b79      	cmp	r3, #121	; 0x79
 800450a:	d904      	bls.n	8004516 <lcdPutS+0x34>
		{
			x = origin;
 800450c:	7bbb      	ldrb	r3, [r7, #14]
 800450e:	70fb      	strb	r3, [r7, #3]
			y += 8;
 8004510:	78bb      	ldrb	r3, [r7, #2]
 8004512:	3308      	adds	r3, #8
 8004514:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 8004516:	78bb      	ldrb	r3, [r7, #2]
 8004518:	2b78      	cmp	r3, #120	; 0x78
 800451a:	d819      	bhi.n	8004550 <lcdPutS+0x6e>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	4413      	add	r3, r2
 8004522:	7818      	ldrb	r0, [r3, #0]
 8004524:	883c      	ldrh	r4, [r7, #0]
 8004526:	78ba      	ldrb	r2, [r7, #2]
 8004528:	78f9      	ldrb	r1, [r7, #3]
 800452a:	8c3b      	ldrh	r3, [r7, #32]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	4623      	mov	r3, r4
 8004530:	f7ff ff26 	bl	8004380 <lcdPutCh>
		x += 6;
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	3306      	adds	r3, #6
 8004538:	70fb      	strb	r3, [r7, #3]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	3301      	adds	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	7bfc      	ldrb	r4, [r7, #15]
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fb fe44 	bl	80001d0 <strlen>
 8004548:	4603      	mov	r3, r0
 800454a:	429c      	cmp	r4, r3
 800454c:	d3db      	bcc.n	8004506 <lcdPutS+0x24>
	}
}
 800454e:	e000      	b.n	8004552 <lcdPutS+0x70>
		if (y > 120) break;
 8004550:	bf00      	nop
}
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	bd90      	pop	{r4, r7, pc}
	...

0800455c <__errno>:
 800455c:	4b01      	ldr	r3, [pc, #4]	; (8004564 <__errno+0x8>)
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000008 	.word	0x20000008

08004568 <__libc_init_array>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	4d0d      	ldr	r5, [pc, #52]	; (80045a0 <__libc_init_array+0x38>)
 800456c:	4c0d      	ldr	r4, [pc, #52]	; (80045a4 <__libc_init_array+0x3c>)
 800456e:	1b64      	subs	r4, r4, r5
 8004570:	10a4      	asrs	r4, r4, #2
 8004572:	2600      	movs	r6, #0
 8004574:	42a6      	cmp	r6, r4
 8004576:	d109      	bne.n	800458c <__libc_init_array+0x24>
 8004578:	4d0b      	ldr	r5, [pc, #44]	; (80045a8 <__libc_init_array+0x40>)
 800457a:	4c0c      	ldr	r4, [pc, #48]	; (80045ac <__libc_init_array+0x44>)
 800457c:	f003 fe6a 	bl	8008254 <_init>
 8004580:	1b64      	subs	r4, r4, r5
 8004582:	10a4      	asrs	r4, r4, #2
 8004584:	2600      	movs	r6, #0
 8004586:	42a6      	cmp	r6, r4
 8004588:	d105      	bne.n	8004596 <__libc_init_array+0x2e>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004590:	4798      	blx	r3
 8004592:	3601      	adds	r6, #1
 8004594:	e7ee      	b.n	8004574 <__libc_init_array+0xc>
 8004596:	f855 3b04 	ldr.w	r3, [r5], #4
 800459a:	4798      	blx	r3
 800459c:	3601      	adds	r6, #1
 800459e:	e7f2      	b.n	8004586 <__libc_init_array+0x1e>
 80045a0:	08008a18 	.word	0x08008a18
 80045a4:	08008a18 	.word	0x08008a18
 80045a8:	08008a18 	.word	0x08008a18
 80045ac:	08008a1c 	.word	0x08008a1c

080045b0 <memset>:
 80045b0:	4402      	add	r2, r0
 80045b2:	4603      	mov	r3, r0
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d100      	bne.n	80045ba <memset+0xa>
 80045b8:	4770      	bx	lr
 80045ba:	f803 1b01 	strb.w	r1, [r3], #1
 80045be:	e7f9      	b.n	80045b4 <memset+0x4>

080045c0 <__cvt>:
 80045c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045c4:	ec55 4b10 	vmov	r4, r5, d0
 80045c8:	2d00      	cmp	r5, #0
 80045ca:	460e      	mov	r6, r1
 80045cc:	4619      	mov	r1, r3
 80045ce:	462b      	mov	r3, r5
 80045d0:	bfbb      	ittet	lt
 80045d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80045d6:	461d      	movlt	r5, r3
 80045d8:	2300      	movge	r3, #0
 80045da:	232d      	movlt	r3, #45	; 0x2d
 80045dc:	700b      	strb	r3, [r1, #0]
 80045de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80045e4:	4691      	mov	r9, r2
 80045e6:	f023 0820 	bic.w	r8, r3, #32
 80045ea:	bfbc      	itt	lt
 80045ec:	4622      	movlt	r2, r4
 80045ee:	4614      	movlt	r4, r2
 80045f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045f4:	d005      	beq.n	8004602 <__cvt+0x42>
 80045f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045fa:	d100      	bne.n	80045fe <__cvt+0x3e>
 80045fc:	3601      	adds	r6, #1
 80045fe:	2102      	movs	r1, #2
 8004600:	e000      	b.n	8004604 <__cvt+0x44>
 8004602:	2103      	movs	r1, #3
 8004604:	ab03      	add	r3, sp, #12
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	ab02      	add	r3, sp, #8
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	ec45 4b10 	vmov	d0, r4, r5
 8004610:	4653      	mov	r3, sl
 8004612:	4632      	mov	r2, r6
 8004614:	f000 fcec 	bl	8004ff0 <_dtoa_r>
 8004618:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800461c:	4607      	mov	r7, r0
 800461e:	d102      	bne.n	8004626 <__cvt+0x66>
 8004620:	f019 0f01 	tst.w	r9, #1
 8004624:	d022      	beq.n	800466c <__cvt+0xac>
 8004626:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800462a:	eb07 0906 	add.w	r9, r7, r6
 800462e:	d110      	bne.n	8004652 <__cvt+0x92>
 8004630:	783b      	ldrb	r3, [r7, #0]
 8004632:	2b30      	cmp	r3, #48	; 0x30
 8004634:	d10a      	bne.n	800464c <__cvt+0x8c>
 8004636:	2200      	movs	r2, #0
 8004638:	2300      	movs	r3, #0
 800463a:	4620      	mov	r0, r4
 800463c:	4629      	mov	r1, r5
 800463e:	f7fc fa43 	bl	8000ac8 <__aeabi_dcmpeq>
 8004642:	b918      	cbnz	r0, 800464c <__cvt+0x8c>
 8004644:	f1c6 0601 	rsb	r6, r6, #1
 8004648:	f8ca 6000 	str.w	r6, [sl]
 800464c:	f8da 3000 	ldr.w	r3, [sl]
 8004650:	4499      	add	r9, r3
 8004652:	2200      	movs	r2, #0
 8004654:	2300      	movs	r3, #0
 8004656:	4620      	mov	r0, r4
 8004658:	4629      	mov	r1, r5
 800465a:	f7fc fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 800465e:	b108      	cbz	r0, 8004664 <__cvt+0xa4>
 8004660:	f8cd 900c 	str.w	r9, [sp, #12]
 8004664:	2230      	movs	r2, #48	; 0x30
 8004666:	9b03      	ldr	r3, [sp, #12]
 8004668:	454b      	cmp	r3, r9
 800466a:	d307      	bcc.n	800467c <__cvt+0xbc>
 800466c:	9b03      	ldr	r3, [sp, #12]
 800466e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004670:	1bdb      	subs	r3, r3, r7
 8004672:	4638      	mov	r0, r7
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	b004      	add	sp, #16
 8004678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800467c:	1c59      	adds	r1, r3, #1
 800467e:	9103      	str	r1, [sp, #12]
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	e7f0      	b.n	8004666 <__cvt+0xa6>

08004684 <__exponent>:
 8004684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004686:	4603      	mov	r3, r0
 8004688:	2900      	cmp	r1, #0
 800468a:	bfb8      	it	lt
 800468c:	4249      	neglt	r1, r1
 800468e:	f803 2b02 	strb.w	r2, [r3], #2
 8004692:	bfb4      	ite	lt
 8004694:	222d      	movlt	r2, #45	; 0x2d
 8004696:	222b      	movge	r2, #43	; 0x2b
 8004698:	2909      	cmp	r1, #9
 800469a:	7042      	strb	r2, [r0, #1]
 800469c:	dd2a      	ble.n	80046f4 <__exponent+0x70>
 800469e:	f10d 0407 	add.w	r4, sp, #7
 80046a2:	46a4      	mov	ip, r4
 80046a4:	270a      	movs	r7, #10
 80046a6:	46a6      	mov	lr, r4
 80046a8:	460a      	mov	r2, r1
 80046aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80046ae:	fb07 1516 	mls	r5, r7, r6, r1
 80046b2:	3530      	adds	r5, #48	; 0x30
 80046b4:	2a63      	cmp	r2, #99	; 0x63
 80046b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80046ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80046be:	4631      	mov	r1, r6
 80046c0:	dcf1      	bgt.n	80046a6 <__exponent+0x22>
 80046c2:	3130      	adds	r1, #48	; 0x30
 80046c4:	f1ae 0502 	sub.w	r5, lr, #2
 80046c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80046cc:	1c44      	adds	r4, r0, #1
 80046ce:	4629      	mov	r1, r5
 80046d0:	4561      	cmp	r1, ip
 80046d2:	d30a      	bcc.n	80046ea <__exponent+0x66>
 80046d4:	f10d 0209 	add.w	r2, sp, #9
 80046d8:	eba2 020e 	sub.w	r2, r2, lr
 80046dc:	4565      	cmp	r5, ip
 80046de:	bf88      	it	hi
 80046e0:	2200      	movhi	r2, #0
 80046e2:	4413      	add	r3, r2
 80046e4:	1a18      	subs	r0, r3, r0
 80046e6:	b003      	add	sp, #12
 80046e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046f2:	e7ed      	b.n	80046d0 <__exponent+0x4c>
 80046f4:	2330      	movs	r3, #48	; 0x30
 80046f6:	3130      	adds	r1, #48	; 0x30
 80046f8:	7083      	strb	r3, [r0, #2]
 80046fa:	70c1      	strb	r1, [r0, #3]
 80046fc:	1d03      	adds	r3, r0, #4
 80046fe:	e7f1      	b.n	80046e4 <__exponent+0x60>

08004700 <_printf_float>:
 8004700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004704:	ed2d 8b02 	vpush	{d8}
 8004708:	b08d      	sub	sp, #52	; 0x34
 800470a:	460c      	mov	r4, r1
 800470c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004710:	4616      	mov	r6, r2
 8004712:	461f      	mov	r7, r3
 8004714:	4605      	mov	r5, r0
 8004716:	f001 fa57 	bl	8005bc8 <_localeconv_r>
 800471a:	f8d0 a000 	ldr.w	sl, [r0]
 800471e:	4650      	mov	r0, sl
 8004720:	f7fb fd56 	bl	80001d0 <strlen>
 8004724:	2300      	movs	r3, #0
 8004726:	930a      	str	r3, [sp, #40]	; 0x28
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	9305      	str	r3, [sp, #20]
 800472c:	f8d8 3000 	ldr.w	r3, [r8]
 8004730:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004734:	3307      	adds	r3, #7
 8004736:	f023 0307 	bic.w	r3, r3, #7
 800473a:	f103 0208 	add.w	r2, r3, #8
 800473e:	f8c8 2000 	str.w	r2, [r8]
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800474a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800474e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004752:	9307      	str	r3, [sp, #28]
 8004754:	f8cd 8018 	str.w	r8, [sp, #24]
 8004758:	ee08 0a10 	vmov	s16, r0
 800475c:	4b9f      	ldr	r3, [pc, #636]	; (80049dc <_printf_float+0x2dc>)
 800475e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004762:	f04f 32ff 	mov.w	r2, #4294967295
 8004766:	f7fc f9e1 	bl	8000b2c <__aeabi_dcmpun>
 800476a:	bb88      	cbnz	r0, 80047d0 <_printf_float+0xd0>
 800476c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004770:	4b9a      	ldr	r3, [pc, #616]	; (80049dc <_printf_float+0x2dc>)
 8004772:	f04f 32ff 	mov.w	r2, #4294967295
 8004776:	f7fc f9bb 	bl	8000af0 <__aeabi_dcmple>
 800477a:	bb48      	cbnz	r0, 80047d0 <_printf_float+0xd0>
 800477c:	2200      	movs	r2, #0
 800477e:	2300      	movs	r3, #0
 8004780:	4640      	mov	r0, r8
 8004782:	4649      	mov	r1, r9
 8004784:	f7fc f9aa 	bl	8000adc <__aeabi_dcmplt>
 8004788:	b110      	cbz	r0, 8004790 <_printf_float+0x90>
 800478a:	232d      	movs	r3, #45	; 0x2d
 800478c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004790:	4b93      	ldr	r3, [pc, #588]	; (80049e0 <_printf_float+0x2e0>)
 8004792:	4894      	ldr	r0, [pc, #592]	; (80049e4 <_printf_float+0x2e4>)
 8004794:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004798:	bf94      	ite	ls
 800479a:	4698      	movls	r8, r3
 800479c:	4680      	movhi	r8, r0
 800479e:	2303      	movs	r3, #3
 80047a0:	6123      	str	r3, [r4, #16]
 80047a2:	9b05      	ldr	r3, [sp, #20]
 80047a4:	f023 0204 	bic.w	r2, r3, #4
 80047a8:	6022      	str	r2, [r4, #0]
 80047aa:	f04f 0900 	mov.w	r9, #0
 80047ae:	9700      	str	r7, [sp, #0]
 80047b0:	4633      	mov	r3, r6
 80047b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80047b4:	4621      	mov	r1, r4
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 f9d8 	bl	8004b6c <_printf_common>
 80047bc:	3001      	adds	r0, #1
 80047be:	f040 8090 	bne.w	80048e2 <_printf_float+0x1e2>
 80047c2:	f04f 30ff 	mov.w	r0, #4294967295
 80047c6:	b00d      	add	sp, #52	; 0x34
 80047c8:	ecbd 8b02 	vpop	{d8}
 80047cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d0:	4642      	mov	r2, r8
 80047d2:	464b      	mov	r3, r9
 80047d4:	4640      	mov	r0, r8
 80047d6:	4649      	mov	r1, r9
 80047d8:	f7fc f9a8 	bl	8000b2c <__aeabi_dcmpun>
 80047dc:	b140      	cbz	r0, 80047f0 <_printf_float+0xf0>
 80047de:	464b      	mov	r3, r9
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bfbc      	itt	lt
 80047e4:	232d      	movlt	r3, #45	; 0x2d
 80047e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047ea:	487f      	ldr	r0, [pc, #508]	; (80049e8 <_printf_float+0x2e8>)
 80047ec:	4b7f      	ldr	r3, [pc, #508]	; (80049ec <_printf_float+0x2ec>)
 80047ee:	e7d1      	b.n	8004794 <_printf_float+0x94>
 80047f0:	6863      	ldr	r3, [r4, #4]
 80047f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80047f6:	9206      	str	r2, [sp, #24]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	d13f      	bne.n	800487c <_printf_float+0x17c>
 80047fc:	2306      	movs	r3, #6
 80047fe:	6063      	str	r3, [r4, #4]
 8004800:	9b05      	ldr	r3, [sp, #20]
 8004802:	6861      	ldr	r1, [r4, #4]
 8004804:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004808:	2300      	movs	r3, #0
 800480a:	9303      	str	r3, [sp, #12]
 800480c:	ab0a      	add	r3, sp, #40	; 0x28
 800480e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004812:	ab09      	add	r3, sp, #36	; 0x24
 8004814:	ec49 8b10 	vmov	d0, r8, r9
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	6022      	str	r2, [r4, #0]
 800481c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004820:	4628      	mov	r0, r5
 8004822:	f7ff fecd 	bl	80045c0 <__cvt>
 8004826:	9b06      	ldr	r3, [sp, #24]
 8004828:	9909      	ldr	r1, [sp, #36]	; 0x24
 800482a:	2b47      	cmp	r3, #71	; 0x47
 800482c:	4680      	mov	r8, r0
 800482e:	d108      	bne.n	8004842 <_printf_float+0x142>
 8004830:	1cc8      	adds	r0, r1, #3
 8004832:	db02      	blt.n	800483a <_printf_float+0x13a>
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	4299      	cmp	r1, r3
 8004838:	dd41      	ble.n	80048be <_printf_float+0x1be>
 800483a:	f1ab 0b02 	sub.w	fp, fp, #2
 800483e:	fa5f fb8b 	uxtb.w	fp, fp
 8004842:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004846:	d820      	bhi.n	800488a <_printf_float+0x18a>
 8004848:	3901      	subs	r1, #1
 800484a:	465a      	mov	r2, fp
 800484c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004850:	9109      	str	r1, [sp, #36]	; 0x24
 8004852:	f7ff ff17 	bl	8004684 <__exponent>
 8004856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004858:	1813      	adds	r3, r2, r0
 800485a:	2a01      	cmp	r2, #1
 800485c:	4681      	mov	r9, r0
 800485e:	6123      	str	r3, [r4, #16]
 8004860:	dc02      	bgt.n	8004868 <_printf_float+0x168>
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	07d2      	lsls	r2, r2, #31
 8004866:	d501      	bpl.n	800486c <_printf_float+0x16c>
 8004868:	3301      	adds	r3, #1
 800486a:	6123      	str	r3, [r4, #16]
 800486c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004870:	2b00      	cmp	r3, #0
 8004872:	d09c      	beq.n	80047ae <_printf_float+0xae>
 8004874:	232d      	movs	r3, #45	; 0x2d
 8004876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800487a:	e798      	b.n	80047ae <_printf_float+0xae>
 800487c:	9a06      	ldr	r2, [sp, #24]
 800487e:	2a47      	cmp	r2, #71	; 0x47
 8004880:	d1be      	bne.n	8004800 <_printf_float+0x100>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1bc      	bne.n	8004800 <_printf_float+0x100>
 8004886:	2301      	movs	r3, #1
 8004888:	e7b9      	b.n	80047fe <_printf_float+0xfe>
 800488a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800488e:	d118      	bne.n	80048c2 <_printf_float+0x1c2>
 8004890:	2900      	cmp	r1, #0
 8004892:	6863      	ldr	r3, [r4, #4]
 8004894:	dd0b      	ble.n	80048ae <_printf_float+0x1ae>
 8004896:	6121      	str	r1, [r4, #16]
 8004898:	b913      	cbnz	r3, 80048a0 <_printf_float+0x1a0>
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	07d0      	lsls	r0, r2, #31
 800489e:	d502      	bpl.n	80048a6 <_printf_float+0x1a6>
 80048a0:	3301      	adds	r3, #1
 80048a2:	440b      	add	r3, r1
 80048a4:	6123      	str	r3, [r4, #16]
 80048a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80048a8:	f04f 0900 	mov.w	r9, #0
 80048ac:	e7de      	b.n	800486c <_printf_float+0x16c>
 80048ae:	b913      	cbnz	r3, 80048b6 <_printf_float+0x1b6>
 80048b0:	6822      	ldr	r2, [r4, #0]
 80048b2:	07d2      	lsls	r2, r2, #31
 80048b4:	d501      	bpl.n	80048ba <_printf_float+0x1ba>
 80048b6:	3302      	adds	r3, #2
 80048b8:	e7f4      	b.n	80048a4 <_printf_float+0x1a4>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e7f2      	b.n	80048a4 <_printf_float+0x1a4>
 80048be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80048c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048c4:	4299      	cmp	r1, r3
 80048c6:	db05      	blt.n	80048d4 <_printf_float+0x1d4>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	6121      	str	r1, [r4, #16]
 80048cc:	07d8      	lsls	r0, r3, #31
 80048ce:	d5ea      	bpl.n	80048a6 <_printf_float+0x1a6>
 80048d0:	1c4b      	adds	r3, r1, #1
 80048d2:	e7e7      	b.n	80048a4 <_printf_float+0x1a4>
 80048d4:	2900      	cmp	r1, #0
 80048d6:	bfd4      	ite	le
 80048d8:	f1c1 0202 	rsble	r2, r1, #2
 80048dc:	2201      	movgt	r2, #1
 80048de:	4413      	add	r3, r2
 80048e0:	e7e0      	b.n	80048a4 <_printf_float+0x1a4>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	055a      	lsls	r2, r3, #21
 80048e6:	d407      	bmi.n	80048f8 <_printf_float+0x1f8>
 80048e8:	6923      	ldr	r3, [r4, #16]
 80048ea:	4642      	mov	r2, r8
 80048ec:	4631      	mov	r1, r6
 80048ee:	4628      	mov	r0, r5
 80048f0:	47b8      	blx	r7
 80048f2:	3001      	adds	r0, #1
 80048f4:	d12c      	bne.n	8004950 <_printf_float+0x250>
 80048f6:	e764      	b.n	80047c2 <_printf_float+0xc2>
 80048f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048fc:	f240 80e0 	bls.w	8004ac0 <_printf_float+0x3c0>
 8004900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004904:	2200      	movs	r2, #0
 8004906:	2300      	movs	r3, #0
 8004908:	f7fc f8de 	bl	8000ac8 <__aeabi_dcmpeq>
 800490c:	2800      	cmp	r0, #0
 800490e:	d034      	beq.n	800497a <_printf_float+0x27a>
 8004910:	4a37      	ldr	r2, [pc, #220]	; (80049f0 <_printf_float+0x2f0>)
 8004912:	2301      	movs	r3, #1
 8004914:	4631      	mov	r1, r6
 8004916:	4628      	mov	r0, r5
 8004918:	47b8      	blx	r7
 800491a:	3001      	adds	r0, #1
 800491c:	f43f af51 	beq.w	80047c2 <_printf_float+0xc2>
 8004920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004924:	429a      	cmp	r2, r3
 8004926:	db02      	blt.n	800492e <_printf_float+0x22e>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	07d8      	lsls	r0, r3, #31
 800492c:	d510      	bpl.n	8004950 <_printf_float+0x250>
 800492e:	ee18 3a10 	vmov	r3, s16
 8004932:	4652      	mov	r2, sl
 8004934:	4631      	mov	r1, r6
 8004936:	4628      	mov	r0, r5
 8004938:	47b8      	blx	r7
 800493a:	3001      	adds	r0, #1
 800493c:	f43f af41 	beq.w	80047c2 <_printf_float+0xc2>
 8004940:	f04f 0800 	mov.w	r8, #0
 8004944:	f104 091a 	add.w	r9, r4, #26
 8004948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800494a:	3b01      	subs	r3, #1
 800494c:	4543      	cmp	r3, r8
 800494e:	dc09      	bgt.n	8004964 <_printf_float+0x264>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	079b      	lsls	r3, r3, #30
 8004954:	f100 8105 	bmi.w	8004b62 <_printf_float+0x462>
 8004958:	68e0      	ldr	r0, [r4, #12]
 800495a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800495c:	4298      	cmp	r0, r3
 800495e:	bfb8      	it	lt
 8004960:	4618      	movlt	r0, r3
 8004962:	e730      	b.n	80047c6 <_printf_float+0xc6>
 8004964:	2301      	movs	r3, #1
 8004966:	464a      	mov	r2, r9
 8004968:	4631      	mov	r1, r6
 800496a:	4628      	mov	r0, r5
 800496c:	47b8      	blx	r7
 800496e:	3001      	adds	r0, #1
 8004970:	f43f af27 	beq.w	80047c2 <_printf_float+0xc2>
 8004974:	f108 0801 	add.w	r8, r8, #1
 8004978:	e7e6      	b.n	8004948 <_printf_float+0x248>
 800497a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	dc39      	bgt.n	80049f4 <_printf_float+0x2f4>
 8004980:	4a1b      	ldr	r2, [pc, #108]	; (80049f0 <_printf_float+0x2f0>)
 8004982:	2301      	movs	r3, #1
 8004984:	4631      	mov	r1, r6
 8004986:	4628      	mov	r0, r5
 8004988:	47b8      	blx	r7
 800498a:	3001      	adds	r0, #1
 800498c:	f43f af19 	beq.w	80047c2 <_printf_float+0xc2>
 8004990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004994:	4313      	orrs	r3, r2
 8004996:	d102      	bne.n	800499e <_printf_float+0x29e>
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	07d9      	lsls	r1, r3, #31
 800499c:	d5d8      	bpl.n	8004950 <_printf_float+0x250>
 800499e:	ee18 3a10 	vmov	r3, s16
 80049a2:	4652      	mov	r2, sl
 80049a4:	4631      	mov	r1, r6
 80049a6:	4628      	mov	r0, r5
 80049a8:	47b8      	blx	r7
 80049aa:	3001      	adds	r0, #1
 80049ac:	f43f af09 	beq.w	80047c2 <_printf_float+0xc2>
 80049b0:	f04f 0900 	mov.w	r9, #0
 80049b4:	f104 0a1a 	add.w	sl, r4, #26
 80049b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ba:	425b      	negs	r3, r3
 80049bc:	454b      	cmp	r3, r9
 80049be:	dc01      	bgt.n	80049c4 <_printf_float+0x2c4>
 80049c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049c2:	e792      	b.n	80048ea <_printf_float+0x1ea>
 80049c4:	2301      	movs	r3, #1
 80049c6:	4652      	mov	r2, sl
 80049c8:	4631      	mov	r1, r6
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b8      	blx	r7
 80049ce:	3001      	adds	r0, #1
 80049d0:	f43f aef7 	beq.w	80047c2 <_printf_float+0xc2>
 80049d4:	f109 0901 	add.w	r9, r9, #1
 80049d8:	e7ee      	b.n	80049b8 <_printf_float+0x2b8>
 80049da:	bf00      	nop
 80049dc:	7fefffff 	.word	0x7fefffff
 80049e0:	080085f8 	.word	0x080085f8
 80049e4:	080085fc 	.word	0x080085fc
 80049e8:	08008604 	.word	0x08008604
 80049ec:	08008600 	.word	0x08008600
 80049f0:	08008608 	.word	0x08008608
 80049f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049f8:	429a      	cmp	r2, r3
 80049fa:	bfa8      	it	ge
 80049fc:	461a      	movge	r2, r3
 80049fe:	2a00      	cmp	r2, #0
 8004a00:	4691      	mov	r9, r2
 8004a02:	dc37      	bgt.n	8004a74 <_printf_float+0x374>
 8004a04:	f04f 0b00 	mov.w	fp, #0
 8004a08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a0c:	f104 021a 	add.w	r2, r4, #26
 8004a10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a12:	9305      	str	r3, [sp, #20]
 8004a14:	eba3 0309 	sub.w	r3, r3, r9
 8004a18:	455b      	cmp	r3, fp
 8004a1a:	dc33      	bgt.n	8004a84 <_printf_float+0x384>
 8004a1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a20:	429a      	cmp	r2, r3
 8004a22:	db3b      	blt.n	8004a9c <_printf_float+0x39c>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	07da      	lsls	r2, r3, #31
 8004a28:	d438      	bmi.n	8004a9c <_printf_float+0x39c>
 8004a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a2c:	9b05      	ldr	r3, [sp, #20]
 8004a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	eba2 0901 	sub.w	r9, r2, r1
 8004a36:	4599      	cmp	r9, r3
 8004a38:	bfa8      	it	ge
 8004a3a:	4699      	movge	r9, r3
 8004a3c:	f1b9 0f00 	cmp.w	r9, #0
 8004a40:	dc35      	bgt.n	8004aae <_printf_float+0x3ae>
 8004a42:	f04f 0800 	mov.w	r8, #0
 8004a46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a4a:	f104 0a1a 	add.w	sl, r4, #26
 8004a4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	eba3 0309 	sub.w	r3, r3, r9
 8004a58:	4543      	cmp	r3, r8
 8004a5a:	f77f af79 	ble.w	8004950 <_printf_float+0x250>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	4652      	mov	r2, sl
 8004a62:	4631      	mov	r1, r6
 8004a64:	4628      	mov	r0, r5
 8004a66:	47b8      	blx	r7
 8004a68:	3001      	adds	r0, #1
 8004a6a:	f43f aeaa 	beq.w	80047c2 <_printf_float+0xc2>
 8004a6e:	f108 0801 	add.w	r8, r8, #1
 8004a72:	e7ec      	b.n	8004a4e <_printf_float+0x34e>
 8004a74:	4613      	mov	r3, r2
 8004a76:	4631      	mov	r1, r6
 8004a78:	4642      	mov	r2, r8
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	47b8      	blx	r7
 8004a7e:	3001      	adds	r0, #1
 8004a80:	d1c0      	bne.n	8004a04 <_printf_float+0x304>
 8004a82:	e69e      	b.n	80047c2 <_printf_float+0xc2>
 8004a84:	2301      	movs	r3, #1
 8004a86:	4631      	mov	r1, r6
 8004a88:	4628      	mov	r0, r5
 8004a8a:	9205      	str	r2, [sp, #20]
 8004a8c:	47b8      	blx	r7
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f43f ae97 	beq.w	80047c2 <_printf_float+0xc2>
 8004a94:	9a05      	ldr	r2, [sp, #20]
 8004a96:	f10b 0b01 	add.w	fp, fp, #1
 8004a9a:	e7b9      	b.n	8004a10 <_printf_float+0x310>
 8004a9c:	ee18 3a10 	vmov	r3, s16
 8004aa0:	4652      	mov	r2, sl
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b8      	blx	r7
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d1be      	bne.n	8004a2a <_printf_float+0x32a>
 8004aac:	e689      	b.n	80047c2 <_printf_float+0xc2>
 8004aae:	9a05      	ldr	r2, [sp, #20]
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	4442      	add	r2, r8
 8004ab4:	4631      	mov	r1, r6
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	47b8      	blx	r7
 8004aba:	3001      	adds	r0, #1
 8004abc:	d1c1      	bne.n	8004a42 <_printf_float+0x342>
 8004abe:	e680      	b.n	80047c2 <_printf_float+0xc2>
 8004ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ac2:	2a01      	cmp	r2, #1
 8004ac4:	dc01      	bgt.n	8004aca <_printf_float+0x3ca>
 8004ac6:	07db      	lsls	r3, r3, #31
 8004ac8:	d538      	bpl.n	8004b3c <_printf_float+0x43c>
 8004aca:	2301      	movs	r3, #1
 8004acc:	4642      	mov	r2, r8
 8004ace:	4631      	mov	r1, r6
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	47b8      	blx	r7
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	f43f ae74 	beq.w	80047c2 <_printf_float+0xc2>
 8004ada:	ee18 3a10 	vmov	r3, s16
 8004ade:	4652      	mov	r2, sl
 8004ae0:	4631      	mov	r1, r6
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	47b8      	blx	r7
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	f43f ae6b 	beq.w	80047c2 <_printf_float+0xc2>
 8004aec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004af0:	2200      	movs	r2, #0
 8004af2:	2300      	movs	r3, #0
 8004af4:	f7fb ffe8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004af8:	b9d8      	cbnz	r0, 8004b32 <_printf_float+0x432>
 8004afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004afc:	f108 0201 	add.w	r2, r8, #1
 8004b00:	3b01      	subs	r3, #1
 8004b02:	4631      	mov	r1, r6
 8004b04:	4628      	mov	r0, r5
 8004b06:	47b8      	blx	r7
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d10e      	bne.n	8004b2a <_printf_float+0x42a>
 8004b0c:	e659      	b.n	80047c2 <_printf_float+0xc2>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	4652      	mov	r2, sl
 8004b12:	4631      	mov	r1, r6
 8004b14:	4628      	mov	r0, r5
 8004b16:	47b8      	blx	r7
 8004b18:	3001      	adds	r0, #1
 8004b1a:	f43f ae52 	beq.w	80047c2 <_printf_float+0xc2>
 8004b1e:	f108 0801 	add.w	r8, r8, #1
 8004b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b24:	3b01      	subs	r3, #1
 8004b26:	4543      	cmp	r3, r8
 8004b28:	dcf1      	bgt.n	8004b0e <_printf_float+0x40e>
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b30:	e6dc      	b.n	80048ec <_printf_float+0x1ec>
 8004b32:	f04f 0800 	mov.w	r8, #0
 8004b36:	f104 0a1a 	add.w	sl, r4, #26
 8004b3a:	e7f2      	b.n	8004b22 <_printf_float+0x422>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	4642      	mov	r2, r8
 8004b40:	e7df      	b.n	8004b02 <_printf_float+0x402>
 8004b42:	2301      	movs	r3, #1
 8004b44:	464a      	mov	r2, r9
 8004b46:	4631      	mov	r1, r6
 8004b48:	4628      	mov	r0, r5
 8004b4a:	47b8      	blx	r7
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	f43f ae38 	beq.w	80047c2 <_printf_float+0xc2>
 8004b52:	f108 0801 	add.w	r8, r8, #1
 8004b56:	68e3      	ldr	r3, [r4, #12]
 8004b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b5a:	1a5b      	subs	r3, r3, r1
 8004b5c:	4543      	cmp	r3, r8
 8004b5e:	dcf0      	bgt.n	8004b42 <_printf_float+0x442>
 8004b60:	e6fa      	b.n	8004958 <_printf_float+0x258>
 8004b62:	f04f 0800 	mov.w	r8, #0
 8004b66:	f104 0919 	add.w	r9, r4, #25
 8004b6a:	e7f4      	b.n	8004b56 <_printf_float+0x456>

08004b6c <_printf_common>:
 8004b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	4616      	mov	r6, r2
 8004b72:	4699      	mov	r9, r3
 8004b74:	688a      	ldr	r2, [r1, #8]
 8004b76:	690b      	ldr	r3, [r1, #16]
 8004b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	bfb8      	it	lt
 8004b80:	4613      	movlt	r3, r2
 8004b82:	6033      	str	r3, [r6, #0]
 8004b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b88:	4607      	mov	r7, r0
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	b10a      	cbz	r2, 8004b92 <_printf_common+0x26>
 8004b8e:	3301      	adds	r3, #1
 8004b90:	6033      	str	r3, [r6, #0]
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	0699      	lsls	r1, r3, #26
 8004b96:	bf42      	ittt	mi
 8004b98:	6833      	ldrmi	r3, [r6, #0]
 8004b9a:	3302      	addmi	r3, #2
 8004b9c:	6033      	strmi	r3, [r6, #0]
 8004b9e:	6825      	ldr	r5, [r4, #0]
 8004ba0:	f015 0506 	ands.w	r5, r5, #6
 8004ba4:	d106      	bne.n	8004bb4 <_printf_common+0x48>
 8004ba6:	f104 0a19 	add.w	sl, r4, #25
 8004baa:	68e3      	ldr	r3, [r4, #12]
 8004bac:	6832      	ldr	r2, [r6, #0]
 8004bae:	1a9b      	subs	r3, r3, r2
 8004bb0:	42ab      	cmp	r3, r5
 8004bb2:	dc26      	bgt.n	8004c02 <_printf_common+0x96>
 8004bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bb8:	1e13      	subs	r3, r2, #0
 8004bba:	6822      	ldr	r2, [r4, #0]
 8004bbc:	bf18      	it	ne
 8004bbe:	2301      	movne	r3, #1
 8004bc0:	0692      	lsls	r2, r2, #26
 8004bc2:	d42b      	bmi.n	8004c1c <_printf_common+0xb0>
 8004bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bc8:	4649      	mov	r1, r9
 8004bca:	4638      	mov	r0, r7
 8004bcc:	47c0      	blx	r8
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d01e      	beq.n	8004c10 <_printf_common+0xa4>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	68e5      	ldr	r5, [r4, #12]
 8004bd6:	6832      	ldr	r2, [r6, #0]
 8004bd8:	f003 0306 	and.w	r3, r3, #6
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	bf08      	it	eq
 8004be0:	1aad      	subeq	r5, r5, r2
 8004be2:	68a3      	ldr	r3, [r4, #8]
 8004be4:	6922      	ldr	r2, [r4, #16]
 8004be6:	bf0c      	ite	eq
 8004be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bec:	2500      	movne	r5, #0
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	bfc4      	itt	gt
 8004bf2:	1a9b      	subgt	r3, r3, r2
 8004bf4:	18ed      	addgt	r5, r5, r3
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	341a      	adds	r4, #26
 8004bfa:	42b5      	cmp	r5, r6
 8004bfc:	d11a      	bne.n	8004c34 <_printf_common+0xc8>
 8004bfe:	2000      	movs	r0, #0
 8004c00:	e008      	b.n	8004c14 <_printf_common+0xa8>
 8004c02:	2301      	movs	r3, #1
 8004c04:	4652      	mov	r2, sl
 8004c06:	4649      	mov	r1, r9
 8004c08:	4638      	mov	r0, r7
 8004c0a:	47c0      	blx	r8
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d103      	bne.n	8004c18 <_printf_common+0xac>
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c18:	3501      	adds	r5, #1
 8004c1a:	e7c6      	b.n	8004baa <_printf_common+0x3e>
 8004c1c:	18e1      	adds	r1, r4, r3
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	2030      	movs	r0, #48	; 0x30
 8004c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c26:	4422      	add	r2, r4
 8004c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c30:	3302      	adds	r3, #2
 8004c32:	e7c7      	b.n	8004bc4 <_printf_common+0x58>
 8004c34:	2301      	movs	r3, #1
 8004c36:	4622      	mov	r2, r4
 8004c38:	4649      	mov	r1, r9
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	47c0      	blx	r8
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d0e6      	beq.n	8004c10 <_printf_common+0xa4>
 8004c42:	3601      	adds	r6, #1
 8004c44:	e7d9      	b.n	8004bfa <_printf_common+0x8e>
	...

08004c48 <_printf_i>:
 8004c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	4691      	mov	r9, r2
 8004c50:	7e27      	ldrb	r7, [r4, #24]
 8004c52:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c54:	2f78      	cmp	r7, #120	; 0x78
 8004c56:	4680      	mov	r8, r0
 8004c58:	469a      	mov	sl, r3
 8004c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c5e:	d807      	bhi.n	8004c70 <_printf_i+0x28>
 8004c60:	2f62      	cmp	r7, #98	; 0x62
 8004c62:	d80a      	bhi.n	8004c7a <_printf_i+0x32>
 8004c64:	2f00      	cmp	r7, #0
 8004c66:	f000 80d8 	beq.w	8004e1a <_printf_i+0x1d2>
 8004c6a:	2f58      	cmp	r7, #88	; 0x58
 8004c6c:	f000 80a3 	beq.w	8004db6 <_printf_i+0x16e>
 8004c70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c78:	e03a      	b.n	8004cf0 <_printf_i+0xa8>
 8004c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c7e:	2b15      	cmp	r3, #21
 8004c80:	d8f6      	bhi.n	8004c70 <_printf_i+0x28>
 8004c82:	a001      	add	r0, pc, #4	; (adr r0, 8004c88 <_printf_i+0x40>)
 8004c84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c88:	08004ce1 	.word	0x08004ce1
 8004c8c:	08004cf5 	.word	0x08004cf5
 8004c90:	08004c71 	.word	0x08004c71
 8004c94:	08004c71 	.word	0x08004c71
 8004c98:	08004c71 	.word	0x08004c71
 8004c9c:	08004c71 	.word	0x08004c71
 8004ca0:	08004cf5 	.word	0x08004cf5
 8004ca4:	08004c71 	.word	0x08004c71
 8004ca8:	08004c71 	.word	0x08004c71
 8004cac:	08004c71 	.word	0x08004c71
 8004cb0:	08004c71 	.word	0x08004c71
 8004cb4:	08004e01 	.word	0x08004e01
 8004cb8:	08004d25 	.word	0x08004d25
 8004cbc:	08004de3 	.word	0x08004de3
 8004cc0:	08004c71 	.word	0x08004c71
 8004cc4:	08004c71 	.word	0x08004c71
 8004cc8:	08004e23 	.word	0x08004e23
 8004ccc:	08004c71 	.word	0x08004c71
 8004cd0:	08004d25 	.word	0x08004d25
 8004cd4:	08004c71 	.word	0x08004c71
 8004cd8:	08004c71 	.word	0x08004c71
 8004cdc:	08004deb 	.word	0x08004deb
 8004ce0:	680b      	ldr	r3, [r1, #0]
 8004ce2:	1d1a      	adds	r2, r3, #4
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	600a      	str	r2, [r1, #0]
 8004ce8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0a3      	b.n	8004e3c <_printf_i+0x1f4>
 8004cf4:	6825      	ldr	r5, [r4, #0]
 8004cf6:	6808      	ldr	r0, [r1, #0]
 8004cf8:	062e      	lsls	r6, r5, #24
 8004cfa:	f100 0304 	add.w	r3, r0, #4
 8004cfe:	d50a      	bpl.n	8004d16 <_printf_i+0xce>
 8004d00:	6805      	ldr	r5, [r0, #0]
 8004d02:	600b      	str	r3, [r1, #0]
 8004d04:	2d00      	cmp	r5, #0
 8004d06:	da03      	bge.n	8004d10 <_printf_i+0xc8>
 8004d08:	232d      	movs	r3, #45	; 0x2d
 8004d0a:	426d      	negs	r5, r5
 8004d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d10:	485e      	ldr	r0, [pc, #376]	; (8004e8c <_printf_i+0x244>)
 8004d12:	230a      	movs	r3, #10
 8004d14:	e019      	b.n	8004d4a <_printf_i+0x102>
 8004d16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d1a:	6805      	ldr	r5, [r0, #0]
 8004d1c:	600b      	str	r3, [r1, #0]
 8004d1e:	bf18      	it	ne
 8004d20:	b22d      	sxthne	r5, r5
 8004d22:	e7ef      	b.n	8004d04 <_printf_i+0xbc>
 8004d24:	680b      	ldr	r3, [r1, #0]
 8004d26:	6825      	ldr	r5, [r4, #0]
 8004d28:	1d18      	adds	r0, r3, #4
 8004d2a:	6008      	str	r0, [r1, #0]
 8004d2c:	0628      	lsls	r0, r5, #24
 8004d2e:	d501      	bpl.n	8004d34 <_printf_i+0xec>
 8004d30:	681d      	ldr	r5, [r3, #0]
 8004d32:	e002      	b.n	8004d3a <_printf_i+0xf2>
 8004d34:	0669      	lsls	r1, r5, #25
 8004d36:	d5fb      	bpl.n	8004d30 <_printf_i+0xe8>
 8004d38:	881d      	ldrh	r5, [r3, #0]
 8004d3a:	4854      	ldr	r0, [pc, #336]	; (8004e8c <_printf_i+0x244>)
 8004d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d3e:	bf0c      	ite	eq
 8004d40:	2308      	moveq	r3, #8
 8004d42:	230a      	movne	r3, #10
 8004d44:	2100      	movs	r1, #0
 8004d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d4a:	6866      	ldr	r6, [r4, #4]
 8004d4c:	60a6      	str	r6, [r4, #8]
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	bfa2      	ittt	ge
 8004d52:	6821      	ldrge	r1, [r4, #0]
 8004d54:	f021 0104 	bicge.w	r1, r1, #4
 8004d58:	6021      	strge	r1, [r4, #0]
 8004d5a:	b90d      	cbnz	r5, 8004d60 <_printf_i+0x118>
 8004d5c:	2e00      	cmp	r6, #0
 8004d5e:	d04d      	beq.n	8004dfc <_printf_i+0x1b4>
 8004d60:	4616      	mov	r6, r2
 8004d62:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d66:	fb03 5711 	mls	r7, r3, r1, r5
 8004d6a:	5dc7      	ldrb	r7, [r0, r7]
 8004d6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d70:	462f      	mov	r7, r5
 8004d72:	42bb      	cmp	r3, r7
 8004d74:	460d      	mov	r5, r1
 8004d76:	d9f4      	bls.n	8004d62 <_printf_i+0x11a>
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d10b      	bne.n	8004d94 <_printf_i+0x14c>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	07df      	lsls	r7, r3, #31
 8004d80:	d508      	bpl.n	8004d94 <_printf_i+0x14c>
 8004d82:	6923      	ldr	r3, [r4, #16]
 8004d84:	6861      	ldr	r1, [r4, #4]
 8004d86:	4299      	cmp	r1, r3
 8004d88:	bfde      	ittt	le
 8004d8a:	2330      	movle	r3, #48	; 0x30
 8004d8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d94:	1b92      	subs	r2, r2, r6
 8004d96:	6122      	str	r2, [r4, #16]
 8004d98:	f8cd a000 	str.w	sl, [sp]
 8004d9c:	464b      	mov	r3, r9
 8004d9e:	aa03      	add	r2, sp, #12
 8004da0:	4621      	mov	r1, r4
 8004da2:	4640      	mov	r0, r8
 8004da4:	f7ff fee2 	bl	8004b6c <_printf_common>
 8004da8:	3001      	adds	r0, #1
 8004daa:	d14c      	bne.n	8004e46 <_printf_i+0x1fe>
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295
 8004db0:	b004      	add	sp, #16
 8004db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db6:	4835      	ldr	r0, [pc, #212]	; (8004e8c <_printf_i+0x244>)
 8004db8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	680e      	ldr	r6, [r1, #0]
 8004dc0:	061f      	lsls	r7, r3, #24
 8004dc2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dc6:	600e      	str	r6, [r1, #0]
 8004dc8:	d514      	bpl.n	8004df4 <_printf_i+0x1ac>
 8004dca:	07d9      	lsls	r1, r3, #31
 8004dcc:	bf44      	itt	mi
 8004dce:	f043 0320 	orrmi.w	r3, r3, #32
 8004dd2:	6023      	strmi	r3, [r4, #0]
 8004dd4:	b91d      	cbnz	r5, 8004dde <_printf_i+0x196>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	f023 0320 	bic.w	r3, r3, #32
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	2310      	movs	r3, #16
 8004de0:	e7b0      	b.n	8004d44 <_printf_i+0xfc>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	f043 0320 	orr.w	r3, r3, #32
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	2378      	movs	r3, #120	; 0x78
 8004dec:	4828      	ldr	r0, [pc, #160]	; (8004e90 <_printf_i+0x248>)
 8004dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004df2:	e7e3      	b.n	8004dbc <_printf_i+0x174>
 8004df4:	065e      	lsls	r6, r3, #25
 8004df6:	bf48      	it	mi
 8004df8:	b2ad      	uxthmi	r5, r5
 8004dfa:	e7e6      	b.n	8004dca <_printf_i+0x182>
 8004dfc:	4616      	mov	r6, r2
 8004dfe:	e7bb      	b.n	8004d78 <_printf_i+0x130>
 8004e00:	680b      	ldr	r3, [r1, #0]
 8004e02:	6826      	ldr	r6, [r4, #0]
 8004e04:	6960      	ldr	r0, [r4, #20]
 8004e06:	1d1d      	adds	r5, r3, #4
 8004e08:	600d      	str	r5, [r1, #0]
 8004e0a:	0635      	lsls	r5, r6, #24
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	d501      	bpl.n	8004e14 <_printf_i+0x1cc>
 8004e10:	6018      	str	r0, [r3, #0]
 8004e12:	e002      	b.n	8004e1a <_printf_i+0x1d2>
 8004e14:	0671      	lsls	r1, r6, #25
 8004e16:	d5fb      	bpl.n	8004e10 <_printf_i+0x1c8>
 8004e18:	8018      	strh	r0, [r3, #0]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	6123      	str	r3, [r4, #16]
 8004e1e:	4616      	mov	r6, r2
 8004e20:	e7ba      	b.n	8004d98 <_printf_i+0x150>
 8004e22:	680b      	ldr	r3, [r1, #0]
 8004e24:	1d1a      	adds	r2, r3, #4
 8004e26:	600a      	str	r2, [r1, #0]
 8004e28:	681e      	ldr	r6, [r3, #0]
 8004e2a:	6862      	ldr	r2, [r4, #4]
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f7fb f9d6 	bl	80001e0 <memchr>
 8004e34:	b108      	cbz	r0, 8004e3a <_printf_i+0x1f2>
 8004e36:	1b80      	subs	r0, r0, r6
 8004e38:	6060      	str	r0, [r4, #4]
 8004e3a:	6863      	ldr	r3, [r4, #4]
 8004e3c:	6123      	str	r3, [r4, #16]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e44:	e7a8      	b.n	8004d98 <_printf_i+0x150>
 8004e46:	6923      	ldr	r3, [r4, #16]
 8004e48:	4632      	mov	r2, r6
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	47d0      	blx	sl
 8004e50:	3001      	adds	r0, #1
 8004e52:	d0ab      	beq.n	8004dac <_printf_i+0x164>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	079b      	lsls	r3, r3, #30
 8004e58:	d413      	bmi.n	8004e82 <_printf_i+0x23a>
 8004e5a:	68e0      	ldr	r0, [r4, #12]
 8004e5c:	9b03      	ldr	r3, [sp, #12]
 8004e5e:	4298      	cmp	r0, r3
 8004e60:	bfb8      	it	lt
 8004e62:	4618      	movlt	r0, r3
 8004e64:	e7a4      	b.n	8004db0 <_printf_i+0x168>
 8004e66:	2301      	movs	r3, #1
 8004e68:	4632      	mov	r2, r6
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	47d0      	blx	sl
 8004e70:	3001      	adds	r0, #1
 8004e72:	d09b      	beq.n	8004dac <_printf_i+0x164>
 8004e74:	3501      	adds	r5, #1
 8004e76:	68e3      	ldr	r3, [r4, #12]
 8004e78:	9903      	ldr	r1, [sp, #12]
 8004e7a:	1a5b      	subs	r3, r3, r1
 8004e7c:	42ab      	cmp	r3, r5
 8004e7e:	dcf2      	bgt.n	8004e66 <_printf_i+0x21e>
 8004e80:	e7eb      	b.n	8004e5a <_printf_i+0x212>
 8004e82:	2500      	movs	r5, #0
 8004e84:	f104 0619 	add.w	r6, r4, #25
 8004e88:	e7f5      	b.n	8004e76 <_printf_i+0x22e>
 8004e8a:	bf00      	nop
 8004e8c:	0800860a 	.word	0x0800860a
 8004e90:	0800861b 	.word	0x0800861b

08004e94 <siprintf>:
 8004e94:	b40e      	push	{r1, r2, r3}
 8004e96:	b500      	push	{lr}
 8004e98:	b09c      	sub	sp, #112	; 0x70
 8004e9a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e9c:	9002      	str	r0, [sp, #8]
 8004e9e:	9006      	str	r0, [sp, #24]
 8004ea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ea4:	4809      	ldr	r0, [pc, #36]	; (8004ecc <siprintf+0x38>)
 8004ea6:	9107      	str	r1, [sp, #28]
 8004ea8:	9104      	str	r1, [sp, #16]
 8004eaa:	4909      	ldr	r1, [pc, #36]	; (8004ed0 <siprintf+0x3c>)
 8004eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eb0:	9105      	str	r1, [sp, #20]
 8004eb2:	6800      	ldr	r0, [r0, #0]
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	a902      	add	r1, sp, #8
 8004eb8:	f001 fb34 	bl	8006524 <_svfiprintf_r>
 8004ebc:	9b02      	ldr	r3, [sp, #8]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	b01c      	add	sp, #112	; 0x70
 8004ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ec8:	b003      	add	sp, #12
 8004eca:	4770      	bx	lr
 8004ecc:	20000008 	.word	0x20000008
 8004ed0:	ffff0208 	.word	0xffff0208

08004ed4 <quorem>:
 8004ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed8:	6903      	ldr	r3, [r0, #16]
 8004eda:	690c      	ldr	r4, [r1, #16]
 8004edc:	42a3      	cmp	r3, r4
 8004ede:	4607      	mov	r7, r0
 8004ee0:	f2c0 8081 	blt.w	8004fe6 <quorem+0x112>
 8004ee4:	3c01      	subs	r4, #1
 8004ee6:	f101 0814 	add.w	r8, r1, #20
 8004eea:	f100 0514 	add.w	r5, r0, #20
 8004eee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ef8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004efc:	3301      	adds	r3, #1
 8004efe:	429a      	cmp	r2, r3
 8004f00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f08:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f0c:	d331      	bcc.n	8004f72 <quorem+0x9e>
 8004f0e:	f04f 0e00 	mov.w	lr, #0
 8004f12:	4640      	mov	r0, r8
 8004f14:	46ac      	mov	ip, r5
 8004f16:	46f2      	mov	sl, lr
 8004f18:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f1c:	b293      	uxth	r3, r2
 8004f1e:	fb06 e303 	mla	r3, r6, r3, lr
 8004f22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	ebaa 0303 	sub.w	r3, sl, r3
 8004f2c:	0c12      	lsrs	r2, r2, #16
 8004f2e:	f8dc a000 	ldr.w	sl, [ip]
 8004f32:	fb06 e202 	mla	r2, r6, r2, lr
 8004f36:	fa13 f38a 	uxtah	r3, r3, sl
 8004f3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f3e:	fa1f fa82 	uxth.w	sl, r2
 8004f42:	f8dc 2000 	ldr.w	r2, [ip]
 8004f46:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004f4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f54:	4581      	cmp	r9, r0
 8004f56:	f84c 3b04 	str.w	r3, [ip], #4
 8004f5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f5e:	d2db      	bcs.n	8004f18 <quorem+0x44>
 8004f60:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f64:	b92b      	cbnz	r3, 8004f72 <quorem+0x9e>
 8004f66:	9b01      	ldr	r3, [sp, #4]
 8004f68:	3b04      	subs	r3, #4
 8004f6a:	429d      	cmp	r5, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	d32e      	bcc.n	8004fce <quorem+0xfa>
 8004f70:	613c      	str	r4, [r7, #16]
 8004f72:	4638      	mov	r0, r7
 8004f74:	f001 f8c0 	bl	80060f8 <__mcmp>
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	db24      	blt.n	8004fc6 <quorem+0xf2>
 8004f7c:	3601      	adds	r6, #1
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f04f 0c00 	mov.w	ip, #0
 8004f84:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f88:	f8d0 e000 	ldr.w	lr, [r0]
 8004f8c:	b293      	uxth	r3, r2
 8004f8e:	ebac 0303 	sub.w	r3, ip, r3
 8004f92:	0c12      	lsrs	r2, r2, #16
 8004f94:	fa13 f38e 	uxtah	r3, r3, lr
 8004f98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fa6:	45c1      	cmp	r9, r8
 8004fa8:	f840 3b04 	str.w	r3, [r0], #4
 8004fac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004fb0:	d2e8      	bcs.n	8004f84 <quorem+0xb0>
 8004fb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fba:	b922      	cbnz	r2, 8004fc6 <quorem+0xf2>
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	429d      	cmp	r5, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	d30a      	bcc.n	8004fda <quorem+0x106>
 8004fc4:	613c      	str	r4, [r7, #16]
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	b003      	add	sp, #12
 8004fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	3b04      	subs	r3, #4
 8004fd2:	2a00      	cmp	r2, #0
 8004fd4:	d1cc      	bne.n	8004f70 <quorem+0x9c>
 8004fd6:	3c01      	subs	r4, #1
 8004fd8:	e7c7      	b.n	8004f6a <quorem+0x96>
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	3b04      	subs	r3, #4
 8004fde:	2a00      	cmp	r2, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <quorem+0xf0>
 8004fe2:	3c01      	subs	r4, #1
 8004fe4:	e7eb      	b.n	8004fbe <quorem+0xea>
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	e7ee      	b.n	8004fc8 <quorem+0xf4>
 8004fea:	0000      	movs	r0, r0
 8004fec:	0000      	movs	r0, r0
	...

08004ff0 <_dtoa_r>:
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	ed2d 8b02 	vpush	{d8}
 8004ff8:	ec57 6b10 	vmov	r6, r7, d0
 8004ffc:	b095      	sub	sp, #84	; 0x54
 8004ffe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005000:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005004:	9105      	str	r1, [sp, #20]
 8005006:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800500a:	4604      	mov	r4, r0
 800500c:	9209      	str	r2, [sp, #36]	; 0x24
 800500e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005010:	b975      	cbnz	r5, 8005030 <_dtoa_r+0x40>
 8005012:	2010      	movs	r0, #16
 8005014:	f000 fddc 	bl	8005bd0 <malloc>
 8005018:	4602      	mov	r2, r0
 800501a:	6260      	str	r0, [r4, #36]	; 0x24
 800501c:	b920      	cbnz	r0, 8005028 <_dtoa_r+0x38>
 800501e:	4bb2      	ldr	r3, [pc, #712]	; (80052e8 <_dtoa_r+0x2f8>)
 8005020:	21ea      	movs	r1, #234	; 0xea
 8005022:	48b2      	ldr	r0, [pc, #712]	; (80052ec <_dtoa_r+0x2fc>)
 8005024:	f001 fb8e 	bl	8006744 <__assert_func>
 8005028:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800502c:	6005      	str	r5, [r0, #0]
 800502e:	60c5      	str	r5, [r0, #12]
 8005030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005032:	6819      	ldr	r1, [r3, #0]
 8005034:	b151      	cbz	r1, 800504c <_dtoa_r+0x5c>
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	604a      	str	r2, [r1, #4]
 800503a:	2301      	movs	r3, #1
 800503c:	4093      	lsls	r3, r2
 800503e:	608b      	str	r3, [r1, #8]
 8005040:	4620      	mov	r0, r4
 8005042:	f000 fe1b 	bl	8005c7c <_Bfree>
 8005046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	1e3b      	subs	r3, r7, #0
 800504e:	bfb9      	ittee	lt
 8005050:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005054:	9303      	strlt	r3, [sp, #12]
 8005056:	2300      	movge	r3, #0
 8005058:	f8c8 3000 	strge.w	r3, [r8]
 800505c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005060:	4ba3      	ldr	r3, [pc, #652]	; (80052f0 <_dtoa_r+0x300>)
 8005062:	bfbc      	itt	lt
 8005064:	2201      	movlt	r2, #1
 8005066:	f8c8 2000 	strlt.w	r2, [r8]
 800506a:	ea33 0309 	bics.w	r3, r3, r9
 800506e:	d11b      	bne.n	80050a8 <_dtoa_r+0xb8>
 8005070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005072:	f242 730f 	movw	r3, #9999	; 0x270f
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800507c:	4333      	orrs	r3, r6
 800507e:	f000 857a 	beq.w	8005b76 <_dtoa_r+0xb86>
 8005082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005084:	b963      	cbnz	r3, 80050a0 <_dtoa_r+0xb0>
 8005086:	4b9b      	ldr	r3, [pc, #620]	; (80052f4 <_dtoa_r+0x304>)
 8005088:	e024      	b.n	80050d4 <_dtoa_r+0xe4>
 800508a:	4b9b      	ldr	r3, [pc, #620]	; (80052f8 <_dtoa_r+0x308>)
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	3308      	adds	r3, #8
 8005090:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	9800      	ldr	r0, [sp, #0]
 8005096:	b015      	add	sp, #84	; 0x54
 8005098:	ecbd 8b02 	vpop	{d8}
 800509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a0:	4b94      	ldr	r3, [pc, #592]	; (80052f4 <_dtoa_r+0x304>)
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	3303      	adds	r3, #3
 80050a6:	e7f3      	b.n	8005090 <_dtoa_r+0xa0>
 80050a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	ec51 0b17 	vmov	r0, r1, d7
 80050b2:	2300      	movs	r3, #0
 80050b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80050b8:	f7fb fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 80050bc:	4680      	mov	r8, r0
 80050be:	b158      	cbz	r0, 80050d8 <_dtoa_r+0xe8>
 80050c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050c2:	2301      	movs	r3, #1
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8551 	beq.w	8005b70 <_dtoa_r+0xb80>
 80050ce:	488b      	ldr	r0, [pc, #556]	; (80052fc <_dtoa_r+0x30c>)
 80050d0:	6018      	str	r0, [r3, #0]
 80050d2:	1e43      	subs	r3, r0, #1
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	e7dd      	b.n	8005094 <_dtoa_r+0xa4>
 80050d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80050dc:	aa12      	add	r2, sp, #72	; 0x48
 80050de:	a913      	add	r1, sp, #76	; 0x4c
 80050e0:	4620      	mov	r0, r4
 80050e2:	f001 f8ad 	bl	8006240 <__d2b>
 80050e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80050ea:	4683      	mov	fp, r0
 80050ec:	2d00      	cmp	r5, #0
 80050ee:	d07c      	beq.n	80051ea <_dtoa_r+0x1fa>
 80050f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80050f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80050fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005102:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005106:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800510a:	4b7d      	ldr	r3, [pc, #500]	; (8005300 <_dtoa_r+0x310>)
 800510c:	2200      	movs	r2, #0
 800510e:	4630      	mov	r0, r6
 8005110:	4639      	mov	r1, r7
 8005112:	f7fb f8b9 	bl	8000288 <__aeabi_dsub>
 8005116:	a36e      	add	r3, pc, #440	; (adr r3, 80052d0 <_dtoa_r+0x2e0>)
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f7fb fa6c 	bl	80005f8 <__aeabi_dmul>
 8005120:	a36d      	add	r3, pc, #436	; (adr r3, 80052d8 <_dtoa_r+0x2e8>)
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	f7fb f8b1 	bl	800028c <__adddf3>
 800512a:	4606      	mov	r6, r0
 800512c:	4628      	mov	r0, r5
 800512e:	460f      	mov	r7, r1
 8005130:	f7fb f9f8 	bl	8000524 <__aeabi_i2d>
 8005134:	a36a      	add	r3, pc, #424	; (adr r3, 80052e0 <_dtoa_r+0x2f0>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f7fb fa5d 	bl	80005f8 <__aeabi_dmul>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4630      	mov	r0, r6
 8005144:	4639      	mov	r1, r7
 8005146:	f7fb f8a1 	bl	800028c <__adddf3>
 800514a:	4606      	mov	r6, r0
 800514c:	460f      	mov	r7, r1
 800514e:	f7fb fd03 	bl	8000b58 <__aeabi_d2iz>
 8005152:	2200      	movs	r2, #0
 8005154:	4682      	mov	sl, r0
 8005156:	2300      	movs	r3, #0
 8005158:	4630      	mov	r0, r6
 800515a:	4639      	mov	r1, r7
 800515c:	f7fb fcbe 	bl	8000adc <__aeabi_dcmplt>
 8005160:	b148      	cbz	r0, 8005176 <_dtoa_r+0x186>
 8005162:	4650      	mov	r0, sl
 8005164:	f7fb f9de 	bl	8000524 <__aeabi_i2d>
 8005168:	4632      	mov	r2, r6
 800516a:	463b      	mov	r3, r7
 800516c:	f7fb fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005170:	b908      	cbnz	r0, 8005176 <_dtoa_r+0x186>
 8005172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005176:	f1ba 0f16 	cmp.w	sl, #22
 800517a:	d854      	bhi.n	8005226 <_dtoa_r+0x236>
 800517c:	4b61      	ldr	r3, [pc, #388]	; (8005304 <_dtoa_r+0x314>)
 800517e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800518a:	f7fb fca7 	bl	8000adc <__aeabi_dcmplt>
 800518e:	2800      	cmp	r0, #0
 8005190:	d04b      	beq.n	800522a <_dtoa_r+0x23a>
 8005192:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005196:	2300      	movs	r3, #0
 8005198:	930e      	str	r3, [sp, #56]	; 0x38
 800519a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800519c:	1b5d      	subs	r5, r3, r5
 800519e:	1e6b      	subs	r3, r5, #1
 80051a0:	9304      	str	r3, [sp, #16]
 80051a2:	bf43      	ittte	mi
 80051a4:	2300      	movmi	r3, #0
 80051a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80051aa:	9304      	strmi	r3, [sp, #16]
 80051ac:	f04f 0800 	movpl.w	r8, #0
 80051b0:	f1ba 0f00 	cmp.w	sl, #0
 80051b4:	db3b      	blt.n	800522e <_dtoa_r+0x23e>
 80051b6:	9b04      	ldr	r3, [sp, #16]
 80051b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80051bc:	4453      	add	r3, sl
 80051be:	9304      	str	r3, [sp, #16]
 80051c0:	2300      	movs	r3, #0
 80051c2:	9306      	str	r3, [sp, #24]
 80051c4:	9b05      	ldr	r3, [sp, #20]
 80051c6:	2b09      	cmp	r3, #9
 80051c8:	d869      	bhi.n	800529e <_dtoa_r+0x2ae>
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	bfc4      	itt	gt
 80051ce:	3b04      	subgt	r3, #4
 80051d0:	9305      	strgt	r3, [sp, #20]
 80051d2:	9b05      	ldr	r3, [sp, #20]
 80051d4:	f1a3 0302 	sub.w	r3, r3, #2
 80051d8:	bfcc      	ite	gt
 80051da:	2500      	movgt	r5, #0
 80051dc:	2501      	movle	r5, #1
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d869      	bhi.n	80052b6 <_dtoa_r+0x2c6>
 80051e2:	e8df f003 	tbb	[pc, r3]
 80051e6:	4e2c      	.short	0x4e2c
 80051e8:	5a4c      	.short	0x5a4c
 80051ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80051ee:	441d      	add	r5, r3
 80051f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	bfc1      	itttt	gt
 80051f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005200:	fa09 f303 	lslgt.w	r3, r9, r3
 8005204:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005208:	bfda      	itte	le
 800520a:	f1c3 0320 	rsble	r3, r3, #32
 800520e:	fa06 f003 	lslle.w	r0, r6, r3
 8005212:	4318      	orrgt	r0, r3
 8005214:	f7fb f976 	bl	8000504 <__aeabi_ui2d>
 8005218:	2301      	movs	r3, #1
 800521a:	4606      	mov	r6, r0
 800521c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005220:	3d01      	subs	r5, #1
 8005222:	9310      	str	r3, [sp, #64]	; 0x40
 8005224:	e771      	b.n	800510a <_dtoa_r+0x11a>
 8005226:	2301      	movs	r3, #1
 8005228:	e7b6      	b.n	8005198 <_dtoa_r+0x1a8>
 800522a:	900e      	str	r0, [sp, #56]	; 0x38
 800522c:	e7b5      	b.n	800519a <_dtoa_r+0x1aa>
 800522e:	f1ca 0300 	rsb	r3, sl, #0
 8005232:	9306      	str	r3, [sp, #24]
 8005234:	2300      	movs	r3, #0
 8005236:	eba8 080a 	sub.w	r8, r8, sl
 800523a:	930d      	str	r3, [sp, #52]	; 0x34
 800523c:	e7c2      	b.n	80051c4 <_dtoa_r+0x1d4>
 800523e:	2300      	movs	r3, #0
 8005240:	9308      	str	r3, [sp, #32]
 8005242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	dc39      	bgt.n	80052bc <_dtoa_r+0x2cc>
 8005248:	f04f 0901 	mov.w	r9, #1
 800524c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005250:	464b      	mov	r3, r9
 8005252:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005256:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005258:	2200      	movs	r2, #0
 800525a:	6042      	str	r2, [r0, #4]
 800525c:	2204      	movs	r2, #4
 800525e:	f102 0614 	add.w	r6, r2, #20
 8005262:	429e      	cmp	r6, r3
 8005264:	6841      	ldr	r1, [r0, #4]
 8005266:	d92f      	bls.n	80052c8 <_dtoa_r+0x2d8>
 8005268:	4620      	mov	r0, r4
 800526a:	f000 fcc7 	bl	8005bfc <_Balloc>
 800526e:	9000      	str	r0, [sp, #0]
 8005270:	2800      	cmp	r0, #0
 8005272:	d14b      	bne.n	800530c <_dtoa_r+0x31c>
 8005274:	4b24      	ldr	r3, [pc, #144]	; (8005308 <_dtoa_r+0x318>)
 8005276:	4602      	mov	r2, r0
 8005278:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800527c:	e6d1      	b.n	8005022 <_dtoa_r+0x32>
 800527e:	2301      	movs	r3, #1
 8005280:	e7de      	b.n	8005240 <_dtoa_r+0x250>
 8005282:	2300      	movs	r3, #0
 8005284:	9308      	str	r3, [sp, #32]
 8005286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005288:	eb0a 0903 	add.w	r9, sl, r3
 800528c:	f109 0301 	add.w	r3, r9, #1
 8005290:	2b01      	cmp	r3, #1
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	bfb8      	it	lt
 8005296:	2301      	movlt	r3, #1
 8005298:	e7dd      	b.n	8005256 <_dtoa_r+0x266>
 800529a:	2301      	movs	r3, #1
 800529c:	e7f2      	b.n	8005284 <_dtoa_r+0x294>
 800529e:	2501      	movs	r5, #1
 80052a0:	2300      	movs	r3, #0
 80052a2:	9305      	str	r3, [sp, #20]
 80052a4:	9508      	str	r5, [sp, #32]
 80052a6:	f04f 39ff 	mov.w	r9, #4294967295
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80052b0:	2312      	movs	r3, #18
 80052b2:	9209      	str	r2, [sp, #36]	; 0x24
 80052b4:	e7cf      	b.n	8005256 <_dtoa_r+0x266>
 80052b6:	2301      	movs	r3, #1
 80052b8:	9308      	str	r3, [sp, #32]
 80052ba:	e7f4      	b.n	80052a6 <_dtoa_r+0x2b6>
 80052bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80052c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80052c4:	464b      	mov	r3, r9
 80052c6:	e7c6      	b.n	8005256 <_dtoa_r+0x266>
 80052c8:	3101      	adds	r1, #1
 80052ca:	6041      	str	r1, [r0, #4]
 80052cc:	0052      	lsls	r2, r2, #1
 80052ce:	e7c6      	b.n	800525e <_dtoa_r+0x26e>
 80052d0:	636f4361 	.word	0x636f4361
 80052d4:	3fd287a7 	.word	0x3fd287a7
 80052d8:	8b60c8b3 	.word	0x8b60c8b3
 80052dc:	3fc68a28 	.word	0x3fc68a28
 80052e0:	509f79fb 	.word	0x509f79fb
 80052e4:	3fd34413 	.word	0x3fd34413
 80052e8:	08008639 	.word	0x08008639
 80052ec:	08008650 	.word	0x08008650
 80052f0:	7ff00000 	.word	0x7ff00000
 80052f4:	08008635 	.word	0x08008635
 80052f8:	0800862c 	.word	0x0800862c
 80052fc:	08008609 	.word	0x08008609
 8005300:	3ff80000 	.word	0x3ff80000
 8005304:	08008748 	.word	0x08008748
 8005308:	080086af 	.word	0x080086af
 800530c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800530e:	9a00      	ldr	r2, [sp, #0]
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	9b01      	ldr	r3, [sp, #4]
 8005314:	2b0e      	cmp	r3, #14
 8005316:	f200 80ad 	bhi.w	8005474 <_dtoa_r+0x484>
 800531a:	2d00      	cmp	r5, #0
 800531c:	f000 80aa 	beq.w	8005474 <_dtoa_r+0x484>
 8005320:	f1ba 0f00 	cmp.w	sl, #0
 8005324:	dd36      	ble.n	8005394 <_dtoa_r+0x3a4>
 8005326:	4ac3      	ldr	r2, [pc, #780]	; (8005634 <_dtoa_r+0x644>)
 8005328:	f00a 030f 	and.w	r3, sl, #15
 800532c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005330:	ed93 7b00 	vldr	d7, [r3]
 8005334:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005338:	ea4f 172a 	mov.w	r7, sl, asr #4
 800533c:	eeb0 8a47 	vmov.f32	s16, s14
 8005340:	eef0 8a67 	vmov.f32	s17, s15
 8005344:	d016      	beq.n	8005374 <_dtoa_r+0x384>
 8005346:	4bbc      	ldr	r3, [pc, #752]	; (8005638 <_dtoa_r+0x648>)
 8005348:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800534c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005350:	f7fb fa7c 	bl	800084c <__aeabi_ddiv>
 8005354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005358:	f007 070f 	and.w	r7, r7, #15
 800535c:	2503      	movs	r5, #3
 800535e:	4eb6      	ldr	r6, [pc, #728]	; (8005638 <_dtoa_r+0x648>)
 8005360:	b957      	cbnz	r7, 8005378 <_dtoa_r+0x388>
 8005362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005366:	ec53 2b18 	vmov	r2, r3, d8
 800536a:	f7fb fa6f 	bl	800084c <__aeabi_ddiv>
 800536e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005372:	e029      	b.n	80053c8 <_dtoa_r+0x3d8>
 8005374:	2502      	movs	r5, #2
 8005376:	e7f2      	b.n	800535e <_dtoa_r+0x36e>
 8005378:	07f9      	lsls	r1, r7, #31
 800537a:	d508      	bpl.n	800538e <_dtoa_r+0x39e>
 800537c:	ec51 0b18 	vmov	r0, r1, d8
 8005380:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005384:	f7fb f938 	bl	80005f8 <__aeabi_dmul>
 8005388:	ec41 0b18 	vmov	d8, r0, r1
 800538c:	3501      	adds	r5, #1
 800538e:	107f      	asrs	r7, r7, #1
 8005390:	3608      	adds	r6, #8
 8005392:	e7e5      	b.n	8005360 <_dtoa_r+0x370>
 8005394:	f000 80a6 	beq.w	80054e4 <_dtoa_r+0x4f4>
 8005398:	f1ca 0600 	rsb	r6, sl, #0
 800539c:	4ba5      	ldr	r3, [pc, #660]	; (8005634 <_dtoa_r+0x644>)
 800539e:	4fa6      	ldr	r7, [pc, #664]	; (8005638 <_dtoa_r+0x648>)
 80053a0:	f006 020f 	and.w	r2, r6, #15
 80053a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053b0:	f7fb f922 	bl	80005f8 <__aeabi_dmul>
 80053b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053b8:	1136      	asrs	r6, r6, #4
 80053ba:	2300      	movs	r3, #0
 80053bc:	2502      	movs	r5, #2
 80053be:	2e00      	cmp	r6, #0
 80053c0:	f040 8085 	bne.w	80054ce <_dtoa_r+0x4de>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1d2      	bne.n	800536e <_dtoa_r+0x37e>
 80053c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 808c 	beq.w	80054e8 <_dtoa_r+0x4f8>
 80053d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80053d4:	4b99      	ldr	r3, [pc, #612]	; (800563c <_dtoa_r+0x64c>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	4630      	mov	r0, r6
 80053da:	4639      	mov	r1, r7
 80053dc:	f7fb fb7e 	bl	8000adc <__aeabi_dcmplt>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	f000 8081 	beq.w	80054e8 <_dtoa_r+0x4f8>
 80053e6:	9b01      	ldr	r3, [sp, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d07d      	beq.n	80054e8 <_dtoa_r+0x4f8>
 80053ec:	f1b9 0f00 	cmp.w	r9, #0
 80053f0:	dd3c      	ble.n	800546c <_dtoa_r+0x47c>
 80053f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80053f6:	9307      	str	r3, [sp, #28]
 80053f8:	2200      	movs	r2, #0
 80053fa:	4b91      	ldr	r3, [pc, #580]	; (8005640 <_dtoa_r+0x650>)
 80053fc:	4630      	mov	r0, r6
 80053fe:	4639      	mov	r1, r7
 8005400:	f7fb f8fa 	bl	80005f8 <__aeabi_dmul>
 8005404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005408:	3501      	adds	r5, #1
 800540a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800540e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005412:	4628      	mov	r0, r5
 8005414:	f7fb f886 	bl	8000524 <__aeabi_i2d>
 8005418:	4632      	mov	r2, r6
 800541a:	463b      	mov	r3, r7
 800541c:	f7fb f8ec 	bl	80005f8 <__aeabi_dmul>
 8005420:	4b88      	ldr	r3, [pc, #544]	; (8005644 <_dtoa_r+0x654>)
 8005422:	2200      	movs	r2, #0
 8005424:	f7fa ff32 	bl	800028c <__adddf3>
 8005428:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800542c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005430:	9303      	str	r3, [sp, #12]
 8005432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005434:	2b00      	cmp	r3, #0
 8005436:	d15c      	bne.n	80054f2 <_dtoa_r+0x502>
 8005438:	4b83      	ldr	r3, [pc, #524]	; (8005648 <_dtoa_r+0x658>)
 800543a:	2200      	movs	r2, #0
 800543c:	4630      	mov	r0, r6
 800543e:	4639      	mov	r1, r7
 8005440:	f7fa ff22 	bl	8000288 <__aeabi_dsub>
 8005444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005448:	4606      	mov	r6, r0
 800544a:	460f      	mov	r7, r1
 800544c:	f7fb fb64 	bl	8000b18 <__aeabi_dcmpgt>
 8005450:	2800      	cmp	r0, #0
 8005452:	f040 8296 	bne.w	8005982 <_dtoa_r+0x992>
 8005456:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800545a:	4630      	mov	r0, r6
 800545c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005460:	4639      	mov	r1, r7
 8005462:	f7fb fb3b 	bl	8000adc <__aeabi_dcmplt>
 8005466:	2800      	cmp	r0, #0
 8005468:	f040 8288 	bne.w	800597c <_dtoa_r+0x98c>
 800546c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005470:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005476:	2b00      	cmp	r3, #0
 8005478:	f2c0 8158 	blt.w	800572c <_dtoa_r+0x73c>
 800547c:	f1ba 0f0e 	cmp.w	sl, #14
 8005480:	f300 8154 	bgt.w	800572c <_dtoa_r+0x73c>
 8005484:	4b6b      	ldr	r3, [pc, #428]	; (8005634 <_dtoa_r+0x644>)
 8005486:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800548a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800548e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005490:	2b00      	cmp	r3, #0
 8005492:	f280 80e3 	bge.w	800565c <_dtoa_r+0x66c>
 8005496:	9b01      	ldr	r3, [sp, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f300 80df 	bgt.w	800565c <_dtoa_r+0x66c>
 800549e:	f040 826d 	bne.w	800597c <_dtoa_r+0x98c>
 80054a2:	4b69      	ldr	r3, [pc, #420]	; (8005648 <_dtoa_r+0x658>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	4640      	mov	r0, r8
 80054a8:	4649      	mov	r1, r9
 80054aa:	f7fb f8a5 	bl	80005f8 <__aeabi_dmul>
 80054ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054b2:	f7fb fb27 	bl	8000b04 <__aeabi_dcmpge>
 80054b6:	9e01      	ldr	r6, [sp, #4]
 80054b8:	4637      	mov	r7, r6
 80054ba:	2800      	cmp	r0, #0
 80054bc:	f040 8243 	bne.w	8005946 <_dtoa_r+0x956>
 80054c0:	9d00      	ldr	r5, [sp, #0]
 80054c2:	2331      	movs	r3, #49	; 0x31
 80054c4:	f805 3b01 	strb.w	r3, [r5], #1
 80054c8:	f10a 0a01 	add.w	sl, sl, #1
 80054cc:	e23f      	b.n	800594e <_dtoa_r+0x95e>
 80054ce:	07f2      	lsls	r2, r6, #31
 80054d0:	d505      	bpl.n	80054de <_dtoa_r+0x4ee>
 80054d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054d6:	f7fb f88f 	bl	80005f8 <__aeabi_dmul>
 80054da:	3501      	adds	r5, #1
 80054dc:	2301      	movs	r3, #1
 80054de:	1076      	asrs	r6, r6, #1
 80054e0:	3708      	adds	r7, #8
 80054e2:	e76c      	b.n	80053be <_dtoa_r+0x3ce>
 80054e4:	2502      	movs	r5, #2
 80054e6:	e76f      	b.n	80053c8 <_dtoa_r+0x3d8>
 80054e8:	9b01      	ldr	r3, [sp, #4]
 80054ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80054ee:	930c      	str	r3, [sp, #48]	; 0x30
 80054f0:	e78d      	b.n	800540e <_dtoa_r+0x41e>
 80054f2:	9900      	ldr	r1, [sp, #0]
 80054f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80054f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054f8:	4b4e      	ldr	r3, [pc, #312]	; (8005634 <_dtoa_r+0x644>)
 80054fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80054fe:	4401      	add	r1, r0
 8005500:	9102      	str	r1, [sp, #8]
 8005502:	9908      	ldr	r1, [sp, #32]
 8005504:	eeb0 8a47 	vmov.f32	s16, s14
 8005508:	eef0 8a67 	vmov.f32	s17, s15
 800550c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005510:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005514:	2900      	cmp	r1, #0
 8005516:	d045      	beq.n	80055a4 <_dtoa_r+0x5b4>
 8005518:	494c      	ldr	r1, [pc, #304]	; (800564c <_dtoa_r+0x65c>)
 800551a:	2000      	movs	r0, #0
 800551c:	f7fb f996 	bl	800084c <__aeabi_ddiv>
 8005520:	ec53 2b18 	vmov	r2, r3, d8
 8005524:	f7fa feb0 	bl	8000288 <__aeabi_dsub>
 8005528:	9d00      	ldr	r5, [sp, #0]
 800552a:	ec41 0b18 	vmov	d8, r0, r1
 800552e:	4639      	mov	r1, r7
 8005530:	4630      	mov	r0, r6
 8005532:	f7fb fb11 	bl	8000b58 <__aeabi_d2iz>
 8005536:	900c      	str	r0, [sp, #48]	; 0x30
 8005538:	f7fa fff4 	bl	8000524 <__aeabi_i2d>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4630      	mov	r0, r6
 8005542:	4639      	mov	r1, r7
 8005544:	f7fa fea0 	bl	8000288 <__aeabi_dsub>
 8005548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800554a:	3330      	adds	r3, #48	; 0x30
 800554c:	f805 3b01 	strb.w	r3, [r5], #1
 8005550:	ec53 2b18 	vmov	r2, r3, d8
 8005554:	4606      	mov	r6, r0
 8005556:	460f      	mov	r7, r1
 8005558:	f7fb fac0 	bl	8000adc <__aeabi_dcmplt>
 800555c:	2800      	cmp	r0, #0
 800555e:	d165      	bne.n	800562c <_dtoa_r+0x63c>
 8005560:	4632      	mov	r2, r6
 8005562:	463b      	mov	r3, r7
 8005564:	4935      	ldr	r1, [pc, #212]	; (800563c <_dtoa_r+0x64c>)
 8005566:	2000      	movs	r0, #0
 8005568:	f7fa fe8e 	bl	8000288 <__aeabi_dsub>
 800556c:	ec53 2b18 	vmov	r2, r3, d8
 8005570:	f7fb fab4 	bl	8000adc <__aeabi_dcmplt>
 8005574:	2800      	cmp	r0, #0
 8005576:	f040 80b9 	bne.w	80056ec <_dtoa_r+0x6fc>
 800557a:	9b02      	ldr	r3, [sp, #8]
 800557c:	429d      	cmp	r5, r3
 800557e:	f43f af75 	beq.w	800546c <_dtoa_r+0x47c>
 8005582:	4b2f      	ldr	r3, [pc, #188]	; (8005640 <_dtoa_r+0x650>)
 8005584:	ec51 0b18 	vmov	r0, r1, d8
 8005588:	2200      	movs	r2, #0
 800558a:	f7fb f835 	bl	80005f8 <__aeabi_dmul>
 800558e:	4b2c      	ldr	r3, [pc, #176]	; (8005640 <_dtoa_r+0x650>)
 8005590:	ec41 0b18 	vmov	d8, r0, r1
 8005594:	2200      	movs	r2, #0
 8005596:	4630      	mov	r0, r6
 8005598:	4639      	mov	r1, r7
 800559a:	f7fb f82d 	bl	80005f8 <__aeabi_dmul>
 800559e:	4606      	mov	r6, r0
 80055a0:	460f      	mov	r7, r1
 80055a2:	e7c4      	b.n	800552e <_dtoa_r+0x53e>
 80055a4:	ec51 0b17 	vmov	r0, r1, d7
 80055a8:	f7fb f826 	bl	80005f8 <__aeabi_dmul>
 80055ac:	9b02      	ldr	r3, [sp, #8]
 80055ae:	9d00      	ldr	r5, [sp, #0]
 80055b0:	930c      	str	r3, [sp, #48]	; 0x30
 80055b2:	ec41 0b18 	vmov	d8, r0, r1
 80055b6:	4639      	mov	r1, r7
 80055b8:	4630      	mov	r0, r6
 80055ba:	f7fb facd 	bl	8000b58 <__aeabi_d2iz>
 80055be:	9011      	str	r0, [sp, #68]	; 0x44
 80055c0:	f7fa ffb0 	bl	8000524 <__aeabi_i2d>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4630      	mov	r0, r6
 80055ca:	4639      	mov	r1, r7
 80055cc:	f7fa fe5c 	bl	8000288 <__aeabi_dsub>
 80055d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055d2:	3330      	adds	r3, #48	; 0x30
 80055d4:	f805 3b01 	strb.w	r3, [r5], #1
 80055d8:	9b02      	ldr	r3, [sp, #8]
 80055da:	429d      	cmp	r5, r3
 80055dc:	4606      	mov	r6, r0
 80055de:	460f      	mov	r7, r1
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	d134      	bne.n	8005650 <_dtoa_r+0x660>
 80055e6:	4b19      	ldr	r3, [pc, #100]	; (800564c <_dtoa_r+0x65c>)
 80055e8:	ec51 0b18 	vmov	r0, r1, d8
 80055ec:	f7fa fe4e 	bl	800028c <__adddf3>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4630      	mov	r0, r6
 80055f6:	4639      	mov	r1, r7
 80055f8:	f7fb fa8e 	bl	8000b18 <__aeabi_dcmpgt>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d175      	bne.n	80056ec <_dtoa_r+0x6fc>
 8005600:	ec53 2b18 	vmov	r2, r3, d8
 8005604:	4911      	ldr	r1, [pc, #68]	; (800564c <_dtoa_r+0x65c>)
 8005606:	2000      	movs	r0, #0
 8005608:	f7fa fe3e 	bl	8000288 <__aeabi_dsub>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4630      	mov	r0, r6
 8005612:	4639      	mov	r1, r7
 8005614:	f7fb fa62 	bl	8000adc <__aeabi_dcmplt>
 8005618:	2800      	cmp	r0, #0
 800561a:	f43f af27 	beq.w	800546c <_dtoa_r+0x47c>
 800561e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005620:	1e6b      	subs	r3, r5, #1
 8005622:	930c      	str	r3, [sp, #48]	; 0x30
 8005624:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005628:	2b30      	cmp	r3, #48	; 0x30
 800562a:	d0f8      	beq.n	800561e <_dtoa_r+0x62e>
 800562c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005630:	e04a      	b.n	80056c8 <_dtoa_r+0x6d8>
 8005632:	bf00      	nop
 8005634:	08008748 	.word	0x08008748
 8005638:	08008720 	.word	0x08008720
 800563c:	3ff00000 	.word	0x3ff00000
 8005640:	40240000 	.word	0x40240000
 8005644:	401c0000 	.word	0x401c0000
 8005648:	40140000 	.word	0x40140000
 800564c:	3fe00000 	.word	0x3fe00000
 8005650:	4baf      	ldr	r3, [pc, #700]	; (8005910 <_dtoa_r+0x920>)
 8005652:	f7fa ffd1 	bl	80005f8 <__aeabi_dmul>
 8005656:	4606      	mov	r6, r0
 8005658:	460f      	mov	r7, r1
 800565a:	e7ac      	b.n	80055b6 <_dtoa_r+0x5c6>
 800565c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005660:	9d00      	ldr	r5, [sp, #0]
 8005662:	4642      	mov	r2, r8
 8005664:	464b      	mov	r3, r9
 8005666:	4630      	mov	r0, r6
 8005668:	4639      	mov	r1, r7
 800566a:	f7fb f8ef 	bl	800084c <__aeabi_ddiv>
 800566e:	f7fb fa73 	bl	8000b58 <__aeabi_d2iz>
 8005672:	9002      	str	r0, [sp, #8]
 8005674:	f7fa ff56 	bl	8000524 <__aeabi_i2d>
 8005678:	4642      	mov	r2, r8
 800567a:	464b      	mov	r3, r9
 800567c:	f7fa ffbc 	bl	80005f8 <__aeabi_dmul>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4630      	mov	r0, r6
 8005686:	4639      	mov	r1, r7
 8005688:	f7fa fdfe 	bl	8000288 <__aeabi_dsub>
 800568c:	9e02      	ldr	r6, [sp, #8]
 800568e:	9f01      	ldr	r7, [sp, #4]
 8005690:	3630      	adds	r6, #48	; 0x30
 8005692:	f805 6b01 	strb.w	r6, [r5], #1
 8005696:	9e00      	ldr	r6, [sp, #0]
 8005698:	1bae      	subs	r6, r5, r6
 800569a:	42b7      	cmp	r7, r6
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	d137      	bne.n	8005712 <_dtoa_r+0x722>
 80056a2:	f7fa fdf3 	bl	800028c <__adddf3>
 80056a6:	4642      	mov	r2, r8
 80056a8:	464b      	mov	r3, r9
 80056aa:	4606      	mov	r6, r0
 80056ac:	460f      	mov	r7, r1
 80056ae:	f7fb fa33 	bl	8000b18 <__aeabi_dcmpgt>
 80056b2:	b9c8      	cbnz	r0, 80056e8 <_dtoa_r+0x6f8>
 80056b4:	4642      	mov	r2, r8
 80056b6:	464b      	mov	r3, r9
 80056b8:	4630      	mov	r0, r6
 80056ba:	4639      	mov	r1, r7
 80056bc:	f7fb fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 80056c0:	b110      	cbz	r0, 80056c8 <_dtoa_r+0x6d8>
 80056c2:	9b02      	ldr	r3, [sp, #8]
 80056c4:	07d9      	lsls	r1, r3, #31
 80056c6:	d40f      	bmi.n	80056e8 <_dtoa_r+0x6f8>
 80056c8:	4620      	mov	r0, r4
 80056ca:	4659      	mov	r1, fp
 80056cc:	f000 fad6 	bl	8005c7c <_Bfree>
 80056d0:	2300      	movs	r3, #0
 80056d2:	702b      	strb	r3, [r5, #0]
 80056d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056d6:	f10a 0001 	add.w	r0, sl, #1
 80056da:	6018      	str	r0, [r3, #0]
 80056dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f43f acd8 	beq.w	8005094 <_dtoa_r+0xa4>
 80056e4:	601d      	str	r5, [r3, #0]
 80056e6:	e4d5      	b.n	8005094 <_dtoa_r+0xa4>
 80056e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80056ec:	462b      	mov	r3, r5
 80056ee:	461d      	mov	r5, r3
 80056f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056f4:	2a39      	cmp	r2, #57	; 0x39
 80056f6:	d108      	bne.n	800570a <_dtoa_r+0x71a>
 80056f8:	9a00      	ldr	r2, [sp, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d1f7      	bne.n	80056ee <_dtoa_r+0x6fe>
 80056fe:	9a07      	ldr	r2, [sp, #28]
 8005700:	9900      	ldr	r1, [sp, #0]
 8005702:	3201      	adds	r2, #1
 8005704:	9207      	str	r2, [sp, #28]
 8005706:	2230      	movs	r2, #48	; 0x30
 8005708:	700a      	strb	r2, [r1, #0]
 800570a:	781a      	ldrb	r2, [r3, #0]
 800570c:	3201      	adds	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	e78c      	b.n	800562c <_dtoa_r+0x63c>
 8005712:	4b7f      	ldr	r3, [pc, #508]	; (8005910 <_dtoa_r+0x920>)
 8005714:	2200      	movs	r2, #0
 8005716:	f7fa ff6f 	bl	80005f8 <__aeabi_dmul>
 800571a:	2200      	movs	r2, #0
 800571c:	2300      	movs	r3, #0
 800571e:	4606      	mov	r6, r0
 8005720:	460f      	mov	r7, r1
 8005722:	f7fb f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005726:	2800      	cmp	r0, #0
 8005728:	d09b      	beq.n	8005662 <_dtoa_r+0x672>
 800572a:	e7cd      	b.n	80056c8 <_dtoa_r+0x6d8>
 800572c:	9a08      	ldr	r2, [sp, #32]
 800572e:	2a00      	cmp	r2, #0
 8005730:	f000 80c4 	beq.w	80058bc <_dtoa_r+0x8cc>
 8005734:	9a05      	ldr	r2, [sp, #20]
 8005736:	2a01      	cmp	r2, #1
 8005738:	f300 80a8 	bgt.w	800588c <_dtoa_r+0x89c>
 800573c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800573e:	2a00      	cmp	r2, #0
 8005740:	f000 80a0 	beq.w	8005884 <_dtoa_r+0x894>
 8005744:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005748:	9e06      	ldr	r6, [sp, #24]
 800574a:	4645      	mov	r5, r8
 800574c:	9a04      	ldr	r2, [sp, #16]
 800574e:	2101      	movs	r1, #1
 8005750:	441a      	add	r2, r3
 8005752:	4620      	mov	r0, r4
 8005754:	4498      	add	r8, r3
 8005756:	9204      	str	r2, [sp, #16]
 8005758:	f000 fb4c 	bl	8005df4 <__i2b>
 800575c:	4607      	mov	r7, r0
 800575e:	2d00      	cmp	r5, #0
 8005760:	dd0b      	ble.n	800577a <_dtoa_r+0x78a>
 8005762:	9b04      	ldr	r3, [sp, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	dd08      	ble.n	800577a <_dtoa_r+0x78a>
 8005768:	42ab      	cmp	r3, r5
 800576a:	9a04      	ldr	r2, [sp, #16]
 800576c:	bfa8      	it	ge
 800576e:	462b      	movge	r3, r5
 8005770:	eba8 0803 	sub.w	r8, r8, r3
 8005774:	1aed      	subs	r5, r5, r3
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	9304      	str	r3, [sp, #16]
 800577a:	9b06      	ldr	r3, [sp, #24]
 800577c:	b1fb      	cbz	r3, 80057be <_dtoa_r+0x7ce>
 800577e:	9b08      	ldr	r3, [sp, #32]
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 809f 	beq.w	80058c4 <_dtoa_r+0x8d4>
 8005786:	2e00      	cmp	r6, #0
 8005788:	dd11      	ble.n	80057ae <_dtoa_r+0x7be>
 800578a:	4639      	mov	r1, r7
 800578c:	4632      	mov	r2, r6
 800578e:	4620      	mov	r0, r4
 8005790:	f000 fbec 	bl	8005f6c <__pow5mult>
 8005794:	465a      	mov	r2, fp
 8005796:	4601      	mov	r1, r0
 8005798:	4607      	mov	r7, r0
 800579a:	4620      	mov	r0, r4
 800579c:	f000 fb40 	bl	8005e20 <__multiply>
 80057a0:	4659      	mov	r1, fp
 80057a2:	9007      	str	r0, [sp, #28]
 80057a4:	4620      	mov	r0, r4
 80057a6:	f000 fa69 	bl	8005c7c <_Bfree>
 80057aa:	9b07      	ldr	r3, [sp, #28]
 80057ac:	469b      	mov	fp, r3
 80057ae:	9b06      	ldr	r3, [sp, #24]
 80057b0:	1b9a      	subs	r2, r3, r6
 80057b2:	d004      	beq.n	80057be <_dtoa_r+0x7ce>
 80057b4:	4659      	mov	r1, fp
 80057b6:	4620      	mov	r0, r4
 80057b8:	f000 fbd8 	bl	8005f6c <__pow5mult>
 80057bc:	4683      	mov	fp, r0
 80057be:	2101      	movs	r1, #1
 80057c0:	4620      	mov	r0, r4
 80057c2:	f000 fb17 	bl	8005df4 <__i2b>
 80057c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	4606      	mov	r6, r0
 80057cc:	dd7c      	ble.n	80058c8 <_dtoa_r+0x8d8>
 80057ce:	461a      	mov	r2, r3
 80057d0:	4601      	mov	r1, r0
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 fbca 	bl	8005f6c <__pow5mult>
 80057d8:	9b05      	ldr	r3, [sp, #20]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	4606      	mov	r6, r0
 80057de:	dd76      	ble.n	80058ce <_dtoa_r+0x8de>
 80057e0:	2300      	movs	r3, #0
 80057e2:	9306      	str	r3, [sp, #24]
 80057e4:	6933      	ldr	r3, [r6, #16]
 80057e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80057ea:	6918      	ldr	r0, [r3, #16]
 80057ec:	f000 fab2 	bl	8005d54 <__hi0bits>
 80057f0:	f1c0 0020 	rsb	r0, r0, #32
 80057f4:	9b04      	ldr	r3, [sp, #16]
 80057f6:	4418      	add	r0, r3
 80057f8:	f010 001f 	ands.w	r0, r0, #31
 80057fc:	f000 8086 	beq.w	800590c <_dtoa_r+0x91c>
 8005800:	f1c0 0320 	rsb	r3, r0, #32
 8005804:	2b04      	cmp	r3, #4
 8005806:	dd7f      	ble.n	8005908 <_dtoa_r+0x918>
 8005808:	f1c0 001c 	rsb	r0, r0, #28
 800580c:	9b04      	ldr	r3, [sp, #16]
 800580e:	4403      	add	r3, r0
 8005810:	4480      	add	r8, r0
 8005812:	4405      	add	r5, r0
 8005814:	9304      	str	r3, [sp, #16]
 8005816:	f1b8 0f00 	cmp.w	r8, #0
 800581a:	dd05      	ble.n	8005828 <_dtoa_r+0x838>
 800581c:	4659      	mov	r1, fp
 800581e:	4642      	mov	r2, r8
 8005820:	4620      	mov	r0, r4
 8005822:	f000 fbfd 	bl	8006020 <__lshift>
 8005826:	4683      	mov	fp, r0
 8005828:	9b04      	ldr	r3, [sp, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	dd05      	ble.n	800583a <_dtoa_r+0x84a>
 800582e:	4631      	mov	r1, r6
 8005830:	461a      	mov	r2, r3
 8005832:	4620      	mov	r0, r4
 8005834:	f000 fbf4 	bl	8006020 <__lshift>
 8005838:	4606      	mov	r6, r0
 800583a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800583c:	2b00      	cmp	r3, #0
 800583e:	d069      	beq.n	8005914 <_dtoa_r+0x924>
 8005840:	4631      	mov	r1, r6
 8005842:	4658      	mov	r0, fp
 8005844:	f000 fc58 	bl	80060f8 <__mcmp>
 8005848:	2800      	cmp	r0, #0
 800584a:	da63      	bge.n	8005914 <_dtoa_r+0x924>
 800584c:	2300      	movs	r3, #0
 800584e:	4659      	mov	r1, fp
 8005850:	220a      	movs	r2, #10
 8005852:	4620      	mov	r0, r4
 8005854:	f000 fa34 	bl	8005cc0 <__multadd>
 8005858:	9b08      	ldr	r3, [sp, #32]
 800585a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800585e:	4683      	mov	fp, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 818f 	beq.w	8005b84 <_dtoa_r+0xb94>
 8005866:	4639      	mov	r1, r7
 8005868:	2300      	movs	r3, #0
 800586a:	220a      	movs	r2, #10
 800586c:	4620      	mov	r0, r4
 800586e:	f000 fa27 	bl	8005cc0 <__multadd>
 8005872:	f1b9 0f00 	cmp.w	r9, #0
 8005876:	4607      	mov	r7, r0
 8005878:	f300 808e 	bgt.w	8005998 <_dtoa_r+0x9a8>
 800587c:	9b05      	ldr	r3, [sp, #20]
 800587e:	2b02      	cmp	r3, #2
 8005880:	dc50      	bgt.n	8005924 <_dtoa_r+0x934>
 8005882:	e089      	b.n	8005998 <_dtoa_r+0x9a8>
 8005884:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005886:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800588a:	e75d      	b.n	8005748 <_dtoa_r+0x758>
 800588c:	9b01      	ldr	r3, [sp, #4]
 800588e:	1e5e      	subs	r6, r3, #1
 8005890:	9b06      	ldr	r3, [sp, #24]
 8005892:	42b3      	cmp	r3, r6
 8005894:	bfbf      	itttt	lt
 8005896:	9b06      	ldrlt	r3, [sp, #24]
 8005898:	9606      	strlt	r6, [sp, #24]
 800589a:	1af2      	sublt	r2, r6, r3
 800589c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800589e:	bfb6      	itet	lt
 80058a0:	189b      	addlt	r3, r3, r2
 80058a2:	1b9e      	subge	r6, r3, r6
 80058a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80058a6:	9b01      	ldr	r3, [sp, #4]
 80058a8:	bfb8      	it	lt
 80058aa:	2600      	movlt	r6, #0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bfb5      	itete	lt
 80058b0:	eba8 0503 	sublt.w	r5, r8, r3
 80058b4:	9b01      	ldrge	r3, [sp, #4]
 80058b6:	2300      	movlt	r3, #0
 80058b8:	4645      	movge	r5, r8
 80058ba:	e747      	b.n	800574c <_dtoa_r+0x75c>
 80058bc:	9e06      	ldr	r6, [sp, #24]
 80058be:	9f08      	ldr	r7, [sp, #32]
 80058c0:	4645      	mov	r5, r8
 80058c2:	e74c      	b.n	800575e <_dtoa_r+0x76e>
 80058c4:	9a06      	ldr	r2, [sp, #24]
 80058c6:	e775      	b.n	80057b4 <_dtoa_r+0x7c4>
 80058c8:	9b05      	ldr	r3, [sp, #20]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	dc18      	bgt.n	8005900 <_dtoa_r+0x910>
 80058ce:	9b02      	ldr	r3, [sp, #8]
 80058d0:	b9b3      	cbnz	r3, 8005900 <_dtoa_r+0x910>
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058d8:	b9a3      	cbnz	r3, 8005904 <_dtoa_r+0x914>
 80058da:	9b03      	ldr	r3, [sp, #12]
 80058dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058e0:	0d1b      	lsrs	r3, r3, #20
 80058e2:	051b      	lsls	r3, r3, #20
 80058e4:	b12b      	cbz	r3, 80058f2 <_dtoa_r+0x902>
 80058e6:	9b04      	ldr	r3, [sp, #16]
 80058e8:	3301      	adds	r3, #1
 80058ea:	9304      	str	r3, [sp, #16]
 80058ec:	f108 0801 	add.w	r8, r8, #1
 80058f0:	2301      	movs	r3, #1
 80058f2:	9306      	str	r3, [sp, #24]
 80058f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f47f af74 	bne.w	80057e4 <_dtoa_r+0x7f4>
 80058fc:	2001      	movs	r0, #1
 80058fe:	e779      	b.n	80057f4 <_dtoa_r+0x804>
 8005900:	2300      	movs	r3, #0
 8005902:	e7f6      	b.n	80058f2 <_dtoa_r+0x902>
 8005904:	9b02      	ldr	r3, [sp, #8]
 8005906:	e7f4      	b.n	80058f2 <_dtoa_r+0x902>
 8005908:	d085      	beq.n	8005816 <_dtoa_r+0x826>
 800590a:	4618      	mov	r0, r3
 800590c:	301c      	adds	r0, #28
 800590e:	e77d      	b.n	800580c <_dtoa_r+0x81c>
 8005910:	40240000 	.word	0x40240000
 8005914:	9b01      	ldr	r3, [sp, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	dc38      	bgt.n	800598c <_dtoa_r+0x99c>
 800591a:	9b05      	ldr	r3, [sp, #20]
 800591c:	2b02      	cmp	r3, #2
 800591e:	dd35      	ble.n	800598c <_dtoa_r+0x99c>
 8005920:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005924:	f1b9 0f00 	cmp.w	r9, #0
 8005928:	d10d      	bne.n	8005946 <_dtoa_r+0x956>
 800592a:	4631      	mov	r1, r6
 800592c:	464b      	mov	r3, r9
 800592e:	2205      	movs	r2, #5
 8005930:	4620      	mov	r0, r4
 8005932:	f000 f9c5 	bl	8005cc0 <__multadd>
 8005936:	4601      	mov	r1, r0
 8005938:	4606      	mov	r6, r0
 800593a:	4658      	mov	r0, fp
 800593c:	f000 fbdc 	bl	80060f8 <__mcmp>
 8005940:	2800      	cmp	r0, #0
 8005942:	f73f adbd 	bgt.w	80054c0 <_dtoa_r+0x4d0>
 8005946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005948:	9d00      	ldr	r5, [sp, #0]
 800594a:	ea6f 0a03 	mvn.w	sl, r3
 800594e:	f04f 0800 	mov.w	r8, #0
 8005952:	4631      	mov	r1, r6
 8005954:	4620      	mov	r0, r4
 8005956:	f000 f991 	bl	8005c7c <_Bfree>
 800595a:	2f00      	cmp	r7, #0
 800595c:	f43f aeb4 	beq.w	80056c8 <_dtoa_r+0x6d8>
 8005960:	f1b8 0f00 	cmp.w	r8, #0
 8005964:	d005      	beq.n	8005972 <_dtoa_r+0x982>
 8005966:	45b8      	cmp	r8, r7
 8005968:	d003      	beq.n	8005972 <_dtoa_r+0x982>
 800596a:	4641      	mov	r1, r8
 800596c:	4620      	mov	r0, r4
 800596e:	f000 f985 	bl	8005c7c <_Bfree>
 8005972:	4639      	mov	r1, r7
 8005974:	4620      	mov	r0, r4
 8005976:	f000 f981 	bl	8005c7c <_Bfree>
 800597a:	e6a5      	b.n	80056c8 <_dtoa_r+0x6d8>
 800597c:	2600      	movs	r6, #0
 800597e:	4637      	mov	r7, r6
 8005980:	e7e1      	b.n	8005946 <_dtoa_r+0x956>
 8005982:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005984:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005988:	4637      	mov	r7, r6
 800598a:	e599      	b.n	80054c0 <_dtoa_r+0x4d0>
 800598c:	9b08      	ldr	r3, [sp, #32]
 800598e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 80fd 	beq.w	8005b92 <_dtoa_r+0xba2>
 8005998:	2d00      	cmp	r5, #0
 800599a:	dd05      	ble.n	80059a8 <_dtoa_r+0x9b8>
 800599c:	4639      	mov	r1, r7
 800599e:	462a      	mov	r2, r5
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 fb3d 	bl	8006020 <__lshift>
 80059a6:	4607      	mov	r7, r0
 80059a8:	9b06      	ldr	r3, [sp, #24]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d05c      	beq.n	8005a68 <_dtoa_r+0xa78>
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4620      	mov	r0, r4
 80059b2:	f000 f923 	bl	8005bfc <_Balloc>
 80059b6:	4605      	mov	r5, r0
 80059b8:	b928      	cbnz	r0, 80059c6 <_dtoa_r+0x9d6>
 80059ba:	4b80      	ldr	r3, [pc, #512]	; (8005bbc <_dtoa_r+0xbcc>)
 80059bc:	4602      	mov	r2, r0
 80059be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80059c2:	f7ff bb2e 	b.w	8005022 <_dtoa_r+0x32>
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	3202      	adds	r2, #2
 80059ca:	0092      	lsls	r2, r2, #2
 80059cc:	f107 010c 	add.w	r1, r7, #12
 80059d0:	300c      	adds	r0, #12
 80059d2:	f000 f905 	bl	8005be0 <memcpy>
 80059d6:	2201      	movs	r2, #1
 80059d8:	4629      	mov	r1, r5
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 fb20 	bl	8006020 <__lshift>
 80059e0:	9b00      	ldr	r3, [sp, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	9b00      	ldr	r3, [sp, #0]
 80059e8:	444b      	add	r3, r9
 80059ea:	9307      	str	r3, [sp, #28]
 80059ec:	9b02      	ldr	r3, [sp, #8]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	46b8      	mov	r8, r7
 80059f4:	9306      	str	r3, [sp, #24]
 80059f6:	4607      	mov	r7, r0
 80059f8:	9b01      	ldr	r3, [sp, #4]
 80059fa:	4631      	mov	r1, r6
 80059fc:	3b01      	subs	r3, #1
 80059fe:	4658      	mov	r0, fp
 8005a00:	9302      	str	r3, [sp, #8]
 8005a02:	f7ff fa67 	bl	8004ed4 <quorem>
 8005a06:	4603      	mov	r3, r0
 8005a08:	3330      	adds	r3, #48	; 0x30
 8005a0a:	9004      	str	r0, [sp, #16]
 8005a0c:	4641      	mov	r1, r8
 8005a0e:	4658      	mov	r0, fp
 8005a10:	9308      	str	r3, [sp, #32]
 8005a12:	f000 fb71 	bl	80060f8 <__mcmp>
 8005a16:	463a      	mov	r2, r7
 8005a18:	4681      	mov	r9, r0
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f000 fb87 	bl	8006130 <__mdiff>
 8005a22:	68c2      	ldr	r2, [r0, #12]
 8005a24:	9b08      	ldr	r3, [sp, #32]
 8005a26:	4605      	mov	r5, r0
 8005a28:	bb02      	cbnz	r2, 8005a6c <_dtoa_r+0xa7c>
 8005a2a:	4601      	mov	r1, r0
 8005a2c:	4658      	mov	r0, fp
 8005a2e:	f000 fb63 	bl	80060f8 <__mcmp>
 8005a32:	9b08      	ldr	r3, [sp, #32]
 8005a34:	4602      	mov	r2, r0
 8005a36:	4629      	mov	r1, r5
 8005a38:	4620      	mov	r0, r4
 8005a3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005a3e:	f000 f91d 	bl	8005c7c <_Bfree>
 8005a42:	9b05      	ldr	r3, [sp, #20]
 8005a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a46:	9d01      	ldr	r5, [sp, #4]
 8005a48:	ea43 0102 	orr.w	r1, r3, r2
 8005a4c:	9b06      	ldr	r3, [sp, #24]
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	9b08      	ldr	r3, [sp, #32]
 8005a52:	d10d      	bne.n	8005a70 <_dtoa_r+0xa80>
 8005a54:	2b39      	cmp	r3, #57	; 0x39
 8005a56:	d029      	beq.n	8005aac <_dtoa_r+0xabc>
 8005a58:	f1b9 0f00 	cmp.w	r9, #0
 8005a5c:	dd01      	ble.n	8005a62 <_dtoa_r+0xa72>
 8005a5e:	9b04      	ldr	r3, [sp, #16]
 8005a60:	3331      	adds	r3, #49	; 0x31
 8005a62:	9a02      	ldr	r2, [sp, #8]
 8005a64:	7013      	strb	r3, [r2, #0]
 8005a66:	e774      	b.n	8005952 <_dtoa_r+0x962>
 8005a68:	4638      	mov	r0, r7
 8005a6a:	e7b9      	b.n	80059e0 <_dtoa_r+0x9f0>
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	e7e2      	b.n	8005a36 <_dtoa_r+0xa46>
 8005a70:	f1b9 0f00 	cmp.w	r9, #0
 8005a74:	db06      	blt.n	8005a84 <_dtoa_r+0xa94>
 8005a76:	9905      	ldr	r1, [sp, #20]
 8005a78:	ea41 0909 	orr.w	r9, r1, r9
 8005a7c:	9906      	ldr	r1, [sp, #24]
 8005a7e:	ea59 0101 	orrs.w	r1, r9, r1
 8005a82:	d120      	bne.n	8005ac6 <_dtoa_r+0xad6>
 8005a84:	2a00      	cmp	r2, #0
 8005a86:	ddec      	ble.n	8005a62 <_dtoa_r+0xa72>
 8005a88:	4659      	mov	r1, fp
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	f000 fac6 	bl	8006020 <__lshift>
 8005a94:	4631      	mov	r1, r6
 8005a96:	4683      	mov	fp, r0
 8005a98:	f000 fb2e 	bl	80060f8 <__mcmp>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	9b01      	ldr	r3, [sp, #4]
 8005aa0:	dc02      	bgt.n	8005aa8 <_dtoa_r+0xab8>
 8005aa2:	d1de      	bne.n	8005a62 <_dtoa_r+0xa72>
 8005aa4:	07da      	lsls	r2, r3, #31
 8005aa6:	d5dc      	bpl.n	8005a62 <_dtoa_r+0xa72>
 8005aa8:	2b39      	cmp	r3, #57	; 0x39
 8005aaa:	d1d8      	bne.n	8005a5e <_dtoa_r+0xa6e>
 8005aac:	9a02      	ldr	r2, [sp, #8]
 8005aae:	2339      	movs	r3, #57	; 0x39
 8005ab0:	7013      	strb	r3, [r2, #0]
 8005ab2:	462b      	mov	r3, r5
 8005ab4:	461d      	mov	r5, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005abc:	2a39      	cmp	r2, #57	; 0x39
 8005abe:	d050      	beq.n	8005b62 <_dtoa_r+0xb72>
 8005ac0:	3201      	adds	r2, #1
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	e745      	b.n	8005952 <_dtoa_r+0x962>
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	dd03      	ble.n	8005ad2 <_dtoa_r+0xae2>
 8005aca:	2b39      	cmp	r3, #57	; 0x39
 8005acc:	d0ee      	beq.n	8005aac <_dtoa_r+0xabc>
 8005ace:	3301      	adds	r3, #1
 8005ad0:	e7c7      	b.n	8005a62 <_dtoa_r+0xa72>
 8005ad2:	9a01      	ldr	r2, [sp, #4]
 8005ad4:	9907      	ldr	r1, [sp, #28]
 8005ad6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ada:	428a      	cmp	r2, r1
 8005adc:	d02a      	beq.n	8005b34 <_dtoa_r+0xb44>
 8005ade:	4659      	mov	r1, fp
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	220a      	movs	r2, #10
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 f8eb 	bl	8005cc0 <__multadd>
 8005aea:	45b8      	cmp	r8, r7
 8005aec:	4683      	mov	fp, r0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	f04f 020a 	mov.w	r2, #10
 8005af6:	4641      	mov	r1, r8
 8005af8:	4620      	mov	r0, r4
 8005afa:	d107      	bne.n	8005b0c <_dtoa_r+0xb1c>
 8005afc:	f000 f8e0 	bl	8005cc0 <__multadd>
 8005b00:	4680      	mov	r8, r0
 8005b02:	4607      	mov	r7, r0
 8005b04:	9b01      	ldr	r3, [sp, #4]
 8005b06:	3301      	adds	r3, #1
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	e775      	b.n	80059f8 <_dtoa_r+0xa08>
 8005b0c:	f000 f8d8 	bl	8005cc0 <__multadd>
 8005b10:	4639      	mov	r1, r7
 8005b12:	4680      	mov	r8, r0
 8005b14:	2300      	movs	r3, #0
 8005b16:	220a      	movs	r2, #10
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 f8d1 	bl	8005cc0 <__multadd>
 8005b1e:	4607      	mov	r7, r0
 8005b20:	e7f0      	b.n	8005b04 <_dtoa_r+0xb14>
 8005b22:	f1b9 0f00 	cmp.w	r9, #0
 8005b26:	9a00      	ldr	r2, [sp, #0]
 8005b28:	bfcc      	ite	gt
 8005b2a:	464d      	movgt	r5, r9
 8005b2c:	2501      	movle	r5, #1
 8005b2e:	4415      	add	r5, r2
 8005b30:	f04f 0800 	mov.w	r8, #0
 8005b34:	4659      	mov	r1, fp
 8005b36:	2201      	movs	r2, #1
 8005b38:	4620      	mov	r0, r4
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	f000 fa70 	bl	8006020 <__lshift>
 8005b40:	4631      	mov	r1, r6
 8005b42:	4683      	mov	fp, r0
 8005b44:	f000 fad8 	bl	80060f8 <__mcmp>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	dcb2      	bgt.n	8005ab2 <_dtoa_r+0xac2>
 8005b4c:	d102      	bne.n	8005b54 <_dtoa_r+0xb64>
 8005b4e:	9b01      	ldr	r3, [sp, #4]
 8005b50:	07db      	lsls	r3, r3, #31
 8005b52:	d4ae      	bmi.n	8005ab2 <_dtoa_r+0xac2>
 8005b54:	462b      	mov	r3, r5
 8005b56:	461d      	mov	r5, r3
 8005b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b5c:	2a30      	cmp	r2, #48	; 0x30
 8005b5e:	d0fa      	beq.n	8005b56 <_dtoa_r+0xb66>
 8005b60:	e6f7      	b.n	8005952 <_dtoa_r+0x962>
 8005b62:	9a00      	ldr	r2, [sp, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d1a5      	bne.n	8005ab4 <_dtoa_r+0xac4>
 8005b68:	f10a 0a01 	add.w	sl, sl, #1
 8005b6c:	2331      	movs	r3, #49	; 0x31
 8005b6e:	e779      	b.n	8005a64 <_dtoa_r+0xa74>
 8005b70:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <_dtoa_r+0xbd0>)
 8005b72:	f7ff baaf 	b.w	80050d4 <_dtoa_r+0xe4>
 8005b76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f47f aa86 	bne.w	800508a <_dtoa_r+0x9a>
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <_dtoa_r+0xbd4>)
 8005b80:	f7ff baa8 	b.w	80050d4 <_dtoa_r+0xe4>
 8005b84:	f1b9 0f00 	cmp.w	r9, #0
 8005b88:	dc03      	bgt.n	8005b92 <_dtoa_r+0xba2>
 8005b8a:	9b05      	ldr	r3, [sp, #20]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	f73f aec9 	bgt.w	8005924 <_dtoa_r+0x934>
 8005b92:	9d00      	ldr	r5, [sp, #0]
 8005b94:	4631      	mov	r1, r6
 8005b96:	4658      	mov	r0, fp
 8005b98:	f7ff f99c 	bl	8004ed4 <quorem>
 8005b9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ba0:	f805 3b01 	strb.w	r3, [r5], #1
 8005ba4:	9a00      	ldr	r2, [sp, #0]
 8005ba6:	1aaa      	subs	r2, r5, r2
 8005ba8:	4591      	cmp	r9, r2
 8005baa:	ddba      	ble.n	8005b22 <_dtoa_r+0xb32>
 8005bac:	4659      	mov	r1, fp
 8005bae:	2300      	movs	r3, #0
 8005bb0:	220a      	movs	r2, #10
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f000 f884 	bl	8005cc0 <__multadd>
 8005bb8:	4683      	mov	fp, r0
 8005bba:	e7eb      	b.n	8005b94 <_dtoa_r+0xba4>
 8005bbc:	080086af 	.word	0x080086af
 8005bc0:	08008608 	.word	0x08008608
 8005bc4:	0800862c 	.word	0x0800862c

08005bc8 <_localeconv_r>:
 8005bc8:	4800      	ldr	r0, [pc, #0]	; (8005bcc <_localeconv_r+0x4>)
 8005bca:	4770      	bx	lr
 8005bcc:	2000015c 	.word	0x2000015c

08005bd0 <malloc>:
 8005bd0:	4b02      	ldr	r3, [pc, #8]	; (8005bdc <malloc+0xc>)
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	f000 bbef 	b.w	80063b8 <_malloc_r>
 8005bda:	bf00      	nop
 8005bdc:	20000008 	.word	0x20000008

08005be0 <memcpy>:
 8005be0:	440a      	add	r2, r1
 8005be2:	4291      	cmp	r1, r2
 8005be4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005be8:	d100      	bne.n	8005bec <memcpy+0xc>
 8005bea:	4770      	bx	lr
 8005bec:	b510      	push	{r4, lr}
 8005bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bf6:	4291      	cmp	r1, r2
 8005bf8:	d1f9      	bne.n	8005bee <memcpy+0xe>
 8005bfa:	bd10      	pop	{r4, pc}

08005bfc <_Balloc>:
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c00:	4604      	mov	r4, r0
 8005c02:	460d      	mov	r5, r1
 8005c04:	b976      	cbnz	r6, 8005c24 <_Balloc+0x28>
 8005c06:	2010      	movs	r0, #16
 8005c08:	f7ff ffe2 	bl	8005bd0 <malloc>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	6260      	str	r0, [r4, #36]	; 0x24
 8005c10:	b920      	cbnz	r0, 8005c1c <_Balloc+0x20>
 8005c12:	4b18      	ldr	r3, [pc, #96]	; (8005c74 <_Balloc+0x78>)
 8005c14:	4818      	ldr	r0, [pc, #96]	; (8005c78 <_Balloc+0x7c>)
 8005c16:	2166      	movs	r1, #102	; 0x66
 8005c18:	f000 fd94 	bl	8006744 <__assert_func>
 8005c1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c20:	6006      	str	r6, [r0, #0]
 8005c22:	60c6      	str	r6, [r0, #12]
 8005c24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c26:	68f3      	ldr	r3, [r6, #12]
 8005c28:	b183      	cbz	r3, 8005c4c <_Balloc+0x50>
 8005c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c32:	b9b8      	cbnz	r0, 8005c64 <_Balloc+0x68>
 8005c34:	2101      	movs	r1, #1
 8005c36:	fa01 f605 	lsl.w	r6, r1, r5
 8005c3a:	1d72      	adds	r2, r6, #5
 8005c3c:	0092      	lsls	r2, r2, #2
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f000 fb5a 	bl	80062f8 <_calloc_r>
 8005c44:	b160      	cbz	r0, 8005c60 <_Balloc+0x64>
 8005c46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c4a:	e00e      	b.n	8005c6a <_Balloc+0x6e>
 8005c4c:	2221      	movs	r2, #33	; 0x21
 8005c4e:	2104      	movs	r1, #4
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fb51 	bl	80062f8 <_calloc_r>
 8005c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c58:	60f0      	str	r0, [r6, #12]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e4      	bne.n	8005c2a <_Balloc+0x2e>
 8005c60:	2000      	movs	r0, #0
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	6802      	ldr	r2, [r0, #0]
 8005c66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c70:	e7f7      	b.n	8005c62 <_Balloc+0x66>
 8005c72:	bf00      	nop
 8005c74:	08008639 	.word	0x08008639
 8005c78:	080086c0 	.word	0x080086c0

08005c7c <_Bfree>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c80:	4605      	mov	r5, r0
 8005c82:	460c      	mov	r4, r1
 8005c84:	b976      	cbnz	r6, 8005ca4 <_Bfree+0x28>
 8005c86:	2010      	movs	r0, #16
 8005c88:	f7ff ffa2 	bl	8005bd0 <malloc>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	6268      	str	r0, [r5, #36]	; 0x24
 8005c90:	b920      	cbnz	r0, 8005c9c <_Bfree+0x20>
 8005c92:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <_Bfree+0x3c>)
 8005c94:	4809      	ldr	r0, [pc, #36]	; (8005cbc <_Bfree+0x40>)
 8005c96:	218a      	movs	r1, #138	; 0x8a
 8005c98:	f000 fd54 	bl	8006744 <__assert_func>
 8005c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ca0:	6006      	str	r6, [r0, #0]
 8005ca2:	60c6      	str	r6, [r0, #12]
 8005ca4:	b13c      	cbz	r4, 8005cb6 <_Bfree+0x3a>
 8005ca6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ca8:	6862      	ldr	r2, [r4, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cb0:	6021      	str	r1, [r4, #0]
 8005cb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	08008639 	.word	0x08008639
 8005cbc:	080086c0 	.word	0x080086c0

08005cc0 <__multadd>:
 8005cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc4:	690e      	ldr	r6, [r1, #16]
 8005cc6:	4607      	mov	r7, r0
 8005cc8:	4698      	mov	r8, r3
 8005cca:	460c      	mov	r4, r1
 8005ccc:	f101 0014 	add.w	r0, r1, #20
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	6805      	ldr	r5, [r0, #0]
 8005cd4:	b2a9      	uxth	r1, r5
 8005cd6:	fb02 8101 	mla	r1, r2, r1, r8
 8005cda:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005cde:	0c2d      	lsrs	r5, r5, #16
 8005ce0:	fb02 c505 	mla	r5, r2, r5, ip
 8005ce4:	b289      	uxth	r1, r1
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005cec:	429e      	cmp	r6, r3
 8005cee:	f840 1b04 	str.w	r1, [r0], #4
 8005cf2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005cf6:	dcec      	bgt.n	8005cd2 <__multadd+0x12>
 8005cf8:	f1b8 0f00 	cmp.w	r8, #0
 8005cfc:	d022      	beq.n	8005d44 <__multadd+0x84>
 8005cfe:	68a3      	ldr	r3, [r4, #8]
 8005d00:	42b3      	cmp	r3, r6
 8005d02:	dc19      	bgt.n	8005d38 <__multadd+0x78>
 8005d04:	6861      	ldr	r1, [r4, #4]
 8005d06:	4638      	mov	r0, r7
 8005d08:	3101      	adds	r1, #1
 8005d0a:	f7ff ff77 	bl	8005bfc <_Balloc>
 8005d0e:	4605      	mov	r5, r0
 8005d10:	b928      	cbnz	r0, 8005d1e <__multadd+0x5e>
 8005d12:	4602      	mov	r2, r0
 8005d14:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <__multadd+0x8c>)
 8005d16:	480e      	ldr	r0, [pc, #56]	; (8005d50 <__multadd+0x90>)
 8005d18:	21b5      	movs	r1, #181	; 0xb5
 8005d1a:	f000 fd13 	bl	8006744 <__assert_func>
 8005d1e:	6922      	ldr	r2, [r4, #16]
 8005d20:	3202      	adds	r2, #2
 8005d22:	f104 010c 	add.w	r1, r4, #12
 8005d26:	0092      	lsls	r2, r2, #2
 8005d28:	300c      	adds	r0, #12
 8005d2a:	f7ff ff59 	bl	8005be0 <memcpy>
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4638      	mov	r0, r7
 8005d32:	f7ff ffa3 	bl	8005c7c <_Bfree>
 8005d36:	462c      	mov	r4, r5
 8005d38:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005d3c:	3601      	adds	r6, #1
 8005d3e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005d42:	6126      	str	r6, [r4, #16]
 8005d44:	4620      	mov	r0, r4
 8005d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d4a:	bf00      	nop
 8005d4c:	080086af 	.word	0x080086af
 8005d50:	080086c0 	.word	0x080086c0

08005d54 <__hi0bits>:
 8005d54:	0c03      	lsrs	r3, r0, #16
 8005d56:	041b      	lsls	r3, r3, #16
 8005d58:	b9d3      	cbnz	r3, 8005d90 <__hi0bits+0x3c>
 8005d5a:	0400      	lsls	r0, r0, #16
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d62:	bf04      	itt	eq
 8005d64:	0200      	lsleq	r0, r0, #8
 8005d66:	3308      	addeq	r3, #8
 8005d68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d6c:	bf04      	itt	eq
 8005d6e:	0100      	lsleq	r0, r0, #4
 8005d70:	3304      	addeq	r3, #4
 8005d72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005d76:	bf04      	itt	eq
 8005d78:	0080      	lsleq	r0, r0, #2
 8005d7a:	3302      	addeq	r3, #2
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	db05      	blt.n	8005d8c <__hi0bits+0x38>
 8005d80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d84:	f103 0301 	add.w	r3, r3, #1
 8005d88:	bf08      	it	eq
 8005d8a:	2320      	moveq	r3, #32
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	4770      	bx	lr
 8005d90:	2300      	movs	r3, #0
 8005d92:	e7e4      	b.n	8005d5e <__hi0bits+0xa>

08005d94 <__lo0bits>:
 8005d94:	6803      	ldr	r3, [r0, #0]
 8005d96:	f013 0207 	ands.w	r2, r3, #7
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	d00b      	beq.n	8005db6 <__lo0bits+0x22>
 8005d9e:	07da      	lsls	r2, r3, #31
 8005da0:	d424      	bmi.n	8005dec <__lo0bits+0x58>
 8005da2:	0798      	lsls	r0, r3, #30
 8005da4:	bf49      	itett	mi
 8005da6:	085b      	lsrmi	r3, r3, #1
 8005da8:	089b      	lsrpl	r3, r3, #2
 8005daa:	2001      	movmi	r0, #1
 8005dac:	600b      	strmi	r3, [r1, #0]
 8005dae:	bf5c      	itt	pl
 8005db0:	600b      	strpl	r3, [r1, #0]
 8005db2:	2002      	movpl	r0, #2
 8005db4:	4770      	bx	lr
 8005db6:	b298      	uxth	r0, r3
 8005db8:	b9b0      	cbnz	r0, 8005de8 <__lo0bits+0x54>
 8005dba:	0c1b      	lsrs	r3, r3, #16
 8005dbc:	2010      	movs	r0, #16
 8005dbe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005dc2:	bf04      	itt	eq
 8005dc4:	0a1b      	lsreq	r3, r3, #8
 8005dc6:	3008      	addeq	r0, #8
 8005dc8:	071a      	lsls	r2, r3, #28
 8005dca:	bf04      	itt	eq
 8005dcc:	091b      	lsreq	r3, r3, #4
 8005dce:	3004      	addeq	r0, #4
 8005dd0:	079a      	lsls	r2, r3, #30
 8005dd2:	bf04      	itt	eq
 8005dd4:	089b      	lsreq	r3, r3, #2
 8005dd6:	3002      	addeq	r0, #2
 8005dd8:	07da      	lsls	r2, r3, #31
 8005dda:	d403      	bmi.n	8005de4 <__lo0bits+0x50>
 8005ddc:	085b      	lsrs	r3, r3, #1
 8005dde:	f100 0001 	add.w	r0, r0, #1
 8005de2:	d005      	beq.n	8005df0 <__lo0bits+0x5c>
 8005de4:	600b      	str	r3, [r1, #0]
 8005de6:	4770      	bx	lr
 8005de8:	4610      	mov	r0, r2
 8005dea:	e7e8      	b.n	8005dbe <__lo0bits+0x2a>
 8005dec:	2000      	movs	r0, #0
 8005dee:	4770      	bx	lr
 8005df0:	2020      	movs	r0, #32
 8005df2:	4770      	bx	lr

08005df4 <__i2b>:
 8005df4:	b510      	push	{r4, lr}
 8005df6:	460c      	mov	r4, r1
 8005df8:	2101      	movs	r1, #1
 8005dfa:	f7ff feff 	bl	8005bfc <_Balloc>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	b928      	cbnz	r0, 8005e0e <__i2b+0x1a>
 8005e02:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <__i2b+0x24>)
 8005e04:	4805      	ldr	r0, [pc, #20]	; (8005e1c <__i2b+0x28>)
 8005e06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e0a:	f000 fc9b 	bl	8006744 <__assert_func>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	6144      	str	r4, [r0, #20]
 8005e12:	6103      	str	r3, [r0, #16]
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	bf00      	nop
 8005e18:	080086af 	.word	0x080086af
 8005e1c:	080086c0 	.word	0x080086c0

08005e20 <__multiply>:
 8005e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e24:	4614      	mov	r4, r2
 8005e26:	690a      	ldr	r2, [r1, #16]
 8005e28:	6923      	ldr	r3, [r4, #16]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	bfb8      	it	lt
 8005e2e:	460b      	movlt	r3, r1
 8005e30:	460d      	mov	r5, r1
 8005e32:	bfbc      	itt	lt
 8005e34:	4625      	movlt	r5, r4
 8005e36:	461c      	movlt	r4, r3
 8005e38:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005e3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005e40:	68ab      	ldr	r3, [r5, #8]
 8005e42:	6869      	ldr	r1, [r5, #4]
 8005e44:	eb0a 0709 	add.w	r7, sl, r9
 8005e48:	42bb      	cmp	r3, r7
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	bfb8      	it	lt
 8005e4e:	3101      	addlt	r1, #1
 8005e50:	f7ff fed4 	bl	8005bfc <_Balloc>
 8005e54:	b930      	cbnz	r0, 8005e64 <__multiply+0x44>
 8005e56:	4602      	mov	r2, r0
 8005e58:	4b42      	ldr	r3, [pc, #264]	; (8005f64 <__multiply+0x144>)
 8005e5a:	4843      	ldr	r0, [pc, #268]	; (8005f68 <__multiply+0x148>)
 8005e5c:	f240 115d 	movw	r1, #349	; 0x15d
 8005e60:	f000 fc70 	bl	8006744 <__assert_func>
 8005e64:	f100 0614 	add.w	r6, r0, #20
 8005e68:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005e6c:	4633      	mov	r3, r6
 8005e6e:	2200      	movs	r2, #0
 8005e70:	4543      	cmp	r3, r8
 8005e72:	d31e      	bcc.n	8005eb2 <__multiply+0x92>
 8005e74:	f105 0c14 	add.w	ip, r5, #20
 8005e78:	f104 0314 	add.w	r3, r4, #20
 8005e7c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005e80:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005e84:	9202      	str	r2, [sp, #8]
 8005e86:	ebac 0205 	sub.w	r2, ip, r5
 8005e8a:	3a15      	subs	r2, #21
 8005e8c:	f022 0203 	bic.w	r2, r2, #3
 8005e90:	3204      	adds	r2, #4
 8005e92:	f105 0115 	add.w	r1, r5, #21
 8005e96:	458c      	cmp	ip, r1
 8005e98:	bf38      	it	cc
 8005e9a:	2204      	movcc	r2, #4
 8005e9c:	9201      	str	r2, [sp, #4]
 8005e9e:	9a02      	ldr	r2, [sp, #8]
 8005ea0:	9303      	str	r3, [sp, #12]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d808      	bhi.n	8005eb8 <__multiply+0x98>
 8005ea6:	2f00      	cmp	r7, #0
 8005ea8:	dc55      	bgt.n	8005f56 <__multiply+0x136>
 8005eaa:	6107      	str	r7, [r0, #16]
 8005eac:	b005      	add	sp, #20
 8005eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb2:	f843 2b04 	str.w	r2, [r3], #4
 8005eb6:	e7db      	b.n	8005e70 <__multiply+0x50>
 8005eb8:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ebc:	f1ba 0f00 	cmp.w	sl, #0
 8005ec0:	d020      	beq.n	8005f04 <__multiply+0xe4>
 8005ec2:	f105 0e14 	add.w	lr, r5, #20
 8005ec6:	46b1      	mov	r9, r6
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005ece:	f8d9 b000 	ldr.w	fp, [r9]
 8005ed2:	b2a1      	uxth	r1, r4
 8005ed4:	fa1f fb8b 	uxth.w	fp, fp
 8005ed8:	fb0a b101 	mla	r1, sl, r1, fp
 8005edc:	4411      	add	r1, r2
 8005ede:	f8d9 2000 	ldr.w	r2, [r9]
 8005ee2:	0c24      	lsrs	r4, r4, #16
 8005ee4:	0c12      	lsrs	r2, r2, #16
 8005ee6:	fb0a 2404 	mla	r4, sl, r4, r2
 8005eea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005eee:	b289      	uxth	r1, r1
 8005ef0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ef4:	45f4      	cmp	ip, lr
 8005ef6:	f849 1b04 	str.w	r1, [r9], #4
 8005efa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005efe:	d8e4      	bhi.n	8005eca <__multiply+0xaa>
 8005f00:	9901      	ldr	r1, [sp, #4]
 8005f02:	5072      	str	r2, [r6, r1]
 8005f04:	9a03      	ldr	r2, [sp, #12]
 8005f06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	f1b9 0f00 	cmp.w	r9, #0
 8005f10:	d01f      	beq.n	8005f52 <__multiply+0x132>
 8005f12:	6834      	ldr	r4, [r6, #0]
 8005f14:	f105 0114 	add.w	r1, r5, #20
 8005f18:	46b6      	mov	lr, r6
 8005f1a:	f04f 0a00 	mov.w	sl, #0
 8005f1e:	880a      	ldrh	r2, [r1, #0]
 8005f20:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005f24:	fb09 b202 	mla	r2, r9, r2, fp
 8005f28:	4492      	add	sl, r2
 8005f2a:	b2a4      	uxth	r4, r4
 8005f2c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005f30:	f84e 4b04 	str.w	r4, [lr], #4
 8005f34:	f851 4b04 	ldr.w	r4, [r1], #4
 8005f38:	f8be 2000 	ldrh.w	r2, [lr]
 8005f3c:	0c24      	lsrs	r4, r4, #16
 8005f3e:	fb09 2404 	mla	r4, r9, r4, r2
 8005f42:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005f46:	458c      	cmp	ip, r1
 8005f48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f4c:	d8e7      	bhi.n	8005f1e <__multiply+0xfe>
 8005f4e:	9a01      	ldr	r2, [sp, #4]
 8005f50:	50b4      	str	r4, [r6, r2]
 8005f52:	3604      	adds	r6, #4
 8005f54:	e7a3      	b.n	8005e9e <__multiply+0x7e>
 8005f56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1a5      	bne.n	8005eaa <__multiply+0x8a>
 8005f5e:	3f01      	subs	r7, #1
 8005f60:	e7a1      	b.n	8005ea6 <__multiply+0x86>
 8005f62:	bf00      	nop
 8005f64:	080086af 	.word	0x080086af
 8005f68:	080086c0 	.word	0x080086c0

08005f6c <__pow5mult>:
 8005f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f70:	4615      	mov	r5, r2
 8005f72:	f012 0203 	ands.w	r2, r2, #3
 8005f76:	4606      	mov	r6, r0
 8005f78:	460f      	mov	r7, r1
 8005f7a:	d007      	beq.n	8005f8c <__pow5mult+0x20>
 8005f7c:	4c25      	ldr	r4, [pc, #148]	; (8006014 <__pow5mult+0xa8>)
 8005f7e:	3a01      	subs	r2, #1
 8005f80:	2300      	movs	r3, #0
 8005f82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f86:	f7ff fe9b 	bl	8005cc0 <__multadd>
 8005f8a:	4607      	mov	r7, r0
 8005f8c:	10ad      	asrs	r5, r5, #2
 8005f8e:	d03d      	beq.n	800600c <__pow5mult+0xa0>
 8005f90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f92:	b97c      	cbnz	r4, 8005fb4 <__pow5mult+0x48>
 8005f94:	2010      	movs	r0, #16
 8005f96:	f7ff fe1b 	bl	8005bd0 <malloc>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6270      	str	r0, [r6, #36]	; 0x24
 8005f9e:	b928      	cbnz	r0, 8005fac <__pow5mult+0x40>
 8005fa0:	4b1d      	ldr	r3, [pc, #116]	; (8006018 <__pow5mult+0xac>)
 8005fa2:	481e      	ldr	r0, [pc, #120]	; (800601c <__pow5mult+0xb0>)
 8005fa4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005fa8:	f000 fbcc 	bl	8006744 <__assert_func>
 8005fac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fb0:	6004      	str	r4, [r0, #0]
 8005fb2:	60c4      	str	r4, [r0, #12]
 8005fb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fbc:	b94c      	cbnz	r4, 8005fd2 <__pow5mult+0x66>
 8005fbe:	f240 2171 	movw	r1, #625	; 0x271
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f7ff ff16 	bl	8005df4 <__i2b>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fce:	4604      	mov	r4, r0
 8005fd0:	6003      	str	r3, [r0, #0]
 8005fd2:	f04f 0900 	mov.w	r9, #0
 8005fd6:	07eb      	lsls	r3, r5, #31
 8005fd8:	d50a      	bpl.n	8005ff0 <__pow5mult+0x84>
 8005fda:	4639      	mov	r1, r7
 8005fdc:	4622      	mov	r2, r4
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f7ff ff1e 	bl	8005e20 <__multiply>
 8005fe4:	4639      	mov	r1, r7
 8005fe6:	4680      	mov	r8, r0
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff fe47 	bl	8005c7c <_Bfree>
 8005fee:	4647      	mov	r7, r8
 8005ff0:	106d      	asrs	r5, r5, #1
 8005ff2:	d00b      	beq.n	800600c <__pow5mult+0xa0>
 8005ff4:	6820      	ldr	r0, [r4, #0]
 8005ff6:	b938      	cbnz	r0, 8006008 <__pow5mult+0x9c>
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f7ff ff0f 	bl	8005e20 <__multiply>
 8006002:	6020      	str	r0, [r4, #0]
 8006004:	f8c0 9000 	str.w	r9, [r0]
 8006008:	4604      	mov	r4, r0
 800600a:	e7e4      	b.n	8005fd6 <__pow5mult+0x6a>
 800600c:	4638      	mov	r0, r7
 800600e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006012:	bf00      	nop
 8006014:	08008810 	.word	0x08008810
 8006018:	08008639 	.word	0x08008639
 800601c:	080086c0 	.word	0x080086c0

08006020 <__lshift>:
 8006020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006024:	460c      	mov	r4, r1
 8006026:	6849      	ldr	r1, [r1, #4]
 8006028:	6923      	ldr	r3, [r4, #16]
 800602a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800602e:	68a3      	ldr	r3, [r4, #8]
 8006030:	4607      	mov	r7, r0
 8006032:	4691      	mov	r9, r2
 8006034:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006038:	f108 0601 	add.w	r6, r8, #1
 800603c:	42b3      	cmp	r3, r6
 800603e:	db0b      	blt.n	8006058 <__lshift+0x38>
 8006040:	4638      	mov	r0, r7
 8006042:	f7ff fddb 	bl	8005bfc <_Balloc>
 8006046:	4605      	mov	r5, r0
 8006048:	b948      	cbnz	r0, 800605e <__lshift+0x3e>
 800604a:	4602      	mov	r2, r0
 800604c:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <__lshift+0xd0>)
 800604e:	4829      	ldr	r0, [pc, #164]	; (80060f4 <__lshift+0xd4>)
 8006050:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006054:	f000 fb76 	bl	8006744 <__assert_func>
 8006058:	3101      	adds	r1, #1
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	e7ee      	b.n	800603c <__lshift+0x1c>
 800605e:	2300      	movs	r3, #0
 8006060:	f100 0114 	add.w	r1, r0, #20
 8006064:	f100 0210 	add.w	r2, r0, #16
 8006068:	4618      	mov	r0, r3
 800606a:	4553      	cmp	r3, sl
 800606c:	db33      	blt.n	80060d6 <__lshift+0xb6>
 800606e:	6920      	ldr	r0, [r4, #16]
 8006070:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006074:	f104 0314 	add.w	r3, r4, #20
 8006078:	f019 091f 	ands.w	r9, r9, #31
 800607c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006080:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006084:	d02b      	beq.n	80060de <__lshift+0xbe>
 8006086:	f1c9 0e20 	rsb	lr, r9, #32
 800608a:	468a      	mov	sl, r1
 800608c:	2200      	movs	r2, #0
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	fa00 f009 	lsl.w	r0, r0, r9
 8006094:	4302      	orrs	r2, r0
 8006096:	f84a 2b04 	str.w	r2, [sl], #4
 800609a:	f853 2b04 	ldr.w	r2, [r3], #4
 800609e:	459c      	cmp	ip, r3
 80060a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80060a4:	d8f3      	bhi.n	800608e <__lshift+0x6e>
 80060a6:	ebac 0304 	sub.w	r3, ip, r4
 80060aa:	3b15      	subs	r3, #21
 80060ac:	f023 0303 	bic.w	r3, r3, #3
 80060b0:	3304      	adds	r3, #4
 80060b2:	f104 0015 	add.w	r0, r4, #21
 80060b6:	4584      	cmp	ip, r0
 80060b8:	bf38      	it	cc
 80060ba:	2304      	movcc	r3, #4
 80060bc:	50ca      	str	r2, [r1, r3]
 80060be:	b10a      	cbz	r2, 80060c4 <__lshift+0xa4>
 80060c0:	f108 0602 	add.w	r6, r8, #2
 80060c4:	3e01      	subs	r6, #1
 80060c6:	4638      	mov	r0, r7
 80060c8:	612e      	str	r6, [r5, #16]
 80060ca:	4621      	mov	r1, r4
 80060cc:	f7ff fdd6 	bl	8005c7c <_Bfree>
 80060d0:	4628      	mov	r0, r5
 80060d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80060da:	3301      	adds	r3, #1
 80060dc:	e7c5      	b.n	800606a <__lshift+0x4a>
 80060de:	3904      	subs	r1, #4
 80060e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80060e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80060e8:	459c      	cmp	ip, r3
 80060ea:	d8f9      	bhi.n	80060e0 <__lshift+0xc0>
 80060ec:	e7ea      	b.n	80060c4 <__lshift+0xa4>
 80060ee:	bf00      	nop
 80060f0:	080086af 	.word	0x080086af
 80060f4:	080086c0 	.word	0x080086c0

080060f8 <__mcmp>:
 80060f8:	b530      	push	{r4, r5, lr}
 80060fa:	6902      	ldr	r2, [r0, #16]
 80060fc:	690c      	ldr	r4, [r1, #16]
 80060fe:	1b12      	subs	r2, r2, r4
 8006100:	d10e      	bne.n	8006120 <__mcmp+0x28>
 8006102:	f100 0314 	add.w	r3, r0, #20
 8006106:	3114      	adds	r1, #20
 8006108:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800610c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006110:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006114:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006118:	42a5      	cmp	r5, r4
 800611a:	d003      	beq.n	8006124 <__mcmp+0x2c>
 800611c:	d305      	bcc.n	800612a <__mcmp+0x32>
 800611e:	2201      	movs	r2, #1
 8006120:	4610      	mov	r0, r2
 8006122:	bd30      	pop	{r4, r5, pc}
 8006124:	4283      	cmp	r3, r0
 8006126:	d3f3      	bcc.n	8006110 <__mcmp+0x18>
 8006128:	e7fa      	b.n	8006120 <__mcmp+0x28>
 800612a:	f04f 32ff 	mov.w	r2, #4294967295
 800612e:	e7f7      	b.n	8006120 <__mcmp+0x28>

08006130 <__mdiff>:
 8006130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006134:	460c      	mov	r4, r1
 8006136:	4606      	mov	r6, r0
 8006138:	4611      	mov	r1, r2
 800613a:	4620      	mov	r0, r4
 800613c:	4617      	mov	r7, r2
 800613e:	f7ff ffdb 	bl	80060f8 <__mcmp>
 8006142:	1e05      	subs	r5, r0, #0
 8006144:	d110      	bne.n	8006168 <__mdiff+0x38>
 8006146:	4629      	mov	r1, r5
 8006148:	4630      	mov	r0, r6
 800614a:	f7ff fd57 	bl	8005bfc <_Balloc>
 800614e:	b930      	cbnz	r0, 800615e <__mdiff+0x2e>
 8006150:	4b39      	ldr	r3, [pc, #228]	; (8006238 <__mdiff+0x108>)
 8006152:	4602      	mov	r2, r0
 8006154:	f240 2132 	movw	r1, #562	; 0x232
 8006158:	4838      	ldr	r0, [pc, #224]	; (800623c <__mdiff+0x10c>)
 800615a:	f000 faf3 	bl	8006744 <__assert_func>
 800615e:	2301      	movs	r3, #1
 8006160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006164:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006168:	bfa4      	itt	ge
 800616a:	463b      	movge	r3, r7
 800616c:	4627      	movge	r7, r4
 800616e:	4630      	mov	r0, r6
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	bfa6      	itte	ge
 8006174:	461c      	movge	r4, r3
 8006176:	2500      	movge	r5, #0
 8006178:	2501      	movlt	r5, #1
 800617a:	f7ff fd3f 	bl	8005bfc <_Balloc>
 800617e:	b920      	cbnz	r0, 800618a <__mdiff+0x5a>
 8006180:	4b2d      	ldr	r3, [pc, #180]	; (8006238 <__mdiff+0x108>)
 8006182:	4602      	mov	r2, r0
 8006184:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006188:	e7e6      	b.n	8006158 <__mdiff+0x28>
 800618a:	693e      	ldr	r6, [r7, #16]
 800618c:	60c5      	str	r5, [r0, #12]
 800618e:	6925      	ldr	r5, [r4, #16]
 8006190:	f107 0114 	add.w	r1, r7, #20
 8006194:	f104 0914 	add.w	r9, r4, #20
 8006198:	f100 0e14 	add.w	lr, r0, #20
 800619c:	f107 0210 	add.w	r2, r7, #16
 80061a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80061a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80061a8:	46f2      	mov	sl, lr
 80061aa:	2700      	movs	r7, #0
 80061ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80061b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80061b4:	fa1f f883 	uxth.w	r8, r3
 80061b8:	fa17 f78b 	uxtah	r7, r7, fp
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	eba7 0808 	sub.w	r8, r7, r8
 80061c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80061c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80061ca:	fa1f f888 	uxth.w	r8, r8
 80061ce:	141f      	asrs	r7, r3, #16
 80061d0:	454d      	cmp	r5, r9
 80061d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80061d6:	f84a 3b04 	str.w	r3, [sl], #4
 80061da:	d8e7      	bhi.n	80061ac <__mdiff+0x7c>
 80061dc:	1b2b      	subs	r3, r5, r4
 80061de:	3b15      	subs	r3, #21
 80061e0:	f023 0303 	bic.w	r3, r3, #3
 80061e4:	3304      	adds	r3, #4
 80061e6:	3415      	adds	r4, #21
 80061e8:	42a5      	cmp	r5, r4
 80061ea:	bf38      	it	cc
 80061ec:	2304      	movcc	r3, #4
 80061ee:	4419      	add	r1, r3
 80061f0:	4473      	add	r3, lr
 80061f2:	469e      	mov	lr, r3
 80061f4:	460d      	mov	r5, r1
 80061f6:	4565      	cmp	r5, ip
 80061f8:	d30e      	bcc.n	8006218 <__mdiff+0xe8>
 80061fa:	f10c 0203 	add.w	r2, ip, #3
 80061fe:	1a52      	subs	r2, r2, r1
 8006200:	f022 0203 	bic.w	r2, r2, #3
 8006204:	3903      	subs	r1, #3
 8006206:	458c      	cmp	ip, r1
 8006208:	bf38      	it	cc
 800620a:	2200      	movcc	r2, #0
 800620c:	441a      	add	r2, r3
 800620e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006212:	b17b      	cbz	r3, 8006234 <__mdiff+0x104>
 8006214:	6106      	str	r6, [r0, #16]
 8006216:	e7a5      	b.n	8006164 <__mdiff+0x34>
 8006218:	f855 8b04 	ldr.w	r8, [r5], #4
 800621c:	fa17 f488 	uxtah	r4, r7, r8
 8006220:	1422      	asrs	r2, r4, #16
 8006222:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006226:	b2a4      	uxth	r4, r4
 8006228:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800622c:	f84e 4b04 	str.w	r4, [lr], #4
 8006230:	1417      	asrs	r7, r2, #16
 8006232:	e7e0      	b.n	80061f6 <__mdiff+0xc6>
 8006234:	3e01      	subs	r6, #1
 8006236:	e7ea      	b.n	800620e <__mdiff+0xde>
 8006238:	080086af 	.word	0x080086af
 800623c:	080086c0 	.word	0x080086c0

08006240 <__d2b>:
 8006240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006244:	4689      	mov	r9, r1
 8006246:	2101      	movs	r1, #1
 8006248:	ec57 6b10 	vmov	r6, r7, d0
 800624c:	4690      	mov	r8, r2
 800624e:	f7ff fcd5 	bl	8005bfc <_Balloc>
 8006252:	4604      	mov	r4, r0
 8006254:	b930      	cbnz	r0, 8006264 <__d2b+0x24>
 8006256:	4602      	mov	r2, r0
 8006258:	4b25      	ldr	r3, [pc, #148]	; (80062f0 <__d2b+0xb0>)
 800625a:	4826      	ldr	r0, [pc, #152]	; (80062f4 <__d2b+0xb4>)
 800625c:	f240 310a 	movw	r1, #778	; 0x30a
 8006260:	f000 fa70 	bl	8006744 <__assert_func>
 8006264:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800626c:	bb35      	cbnz	r5, 80062bc <__d2b+0x7c>
 800626e:	2e00      	cmp	r6, #0
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	d028      	beq.n	80062c6 <__d2b+0x86>
 8006274:	4668      	mov	r0, sp
 8006276:	9600      	str	r6, [sp, #0]
 8006278:	f7ff fd8c 	bl	8005d94 <__lo0bits>
 800627c:	9900      	ldr	r1, [sp, #0]
 800627e:	b300      	cbz	r0, 80062c2 <__d2b+0x82>
 8006280:	9a01      	ldr	r2, [sp, #4]
 8006282:	f1c0 0320 	rsb	r3, r0, #32
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	430b      	orrs	r3, r1
 800628c:	40c2      	lsrs	r2, r0
 800628e:	6163      	str	r3, [r4, #20]
 8006290:	9201      	str	r2, [sp, #4]
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	61a3      	str	r3, [r4, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	bf14      	ite	ne
 800629a:	2202      	movne	r2, #2
 800629c:	2201      	moveq	r2, #1
 800629e:	6122      	str	r2, [r4, #16]
 80062a0:	b1d5      	cbz	r5, 80062d8 <__d2b+0x98>
 80062a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062a6:	4405      	add	r5, r0
 80062a8:	f8c9 5000 	str.w	r5, [r9]
 80062ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062b0:	f8c8 0000 	str.w	r0, [r8]
 80062b4:	4620      	mov	r0, r4
 80062b6:	b003      	add	sp, #12
 80062b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062c0:	e7d5      	b.n	800626e <__d2b+0x2e>
 80062c2:	6161      	str	r1, [r4, #20]
 80062c4:	e7e5      	b.n	8006292 <__d2b+0x52>
 80062c6:	a801      	add	r0, sp, #4
 80062c8:	f7ff fd64 	bl	8005d94 <__lo0bits>
 80062cc:	9b01      	ldr	r3, [sp, #4]
 80062ce:	6163      	str	r3, [r4, #20]
 80062d0:	2201      	movs	r2, #1
 80062d2:	6122      	str	r2, [r4, #16]
 80062d4:	3020      	adds	r0, #32
 80062d6:	e7e3      	b.n	80062a0 <__d2b+0x60>
 80062d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062e0:	f8c9 0000 	str.w	r0, [r9]
 80062e4:	6918      	ldr	r0, [r3, #16]
 80062e6:	f7ff fd35 	bl	8005d54 <__hi0bits>
 80062ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062ee:	e7df      	b.n	80062b0 <__d2b+0x70>
 80062f0:	080086af 	.word	0x080086af
 80062f4:	080086c0 	.word	0x080086c0

080062f8 <_calloc_r>:
 80062f8:	b513      	push	{r0, r1, r4, lr}
 80062fa:	434a      	muls	r2, r1
 80062fc:	4611      	mov	r1, r2
 80062fe:	9201      	str	r2, [sp, #4]
 8006300:	f000 f85a 	bl	80063b8 <_malloc_r>
 8006304:	4604      	mov	r4, r0
 8006306:	b118      	cbz	r0, 8006310 <_calloc_r+0x18>
 8006308:	9a01      	ldr	r2, [sp, #4]
 800630a:	2100      	movs	r1, #0
 800630c:	f7fe f950 	bl	80045b0 <memset>
 8006310:	4620      	mov	r0, r4
 8006312:	b002      	add	sp, #8
 8006314:	bd10      	pop	{r4, pc}
	...

08006318 <_free_r>:
 8006318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800631a:	2900      	cmp	r1, #0
 800631c:	d048      	beq.n	80063b0 <_free_r+0x98>
 800631e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006322:	9001      	str	r0, [sp, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f1a1 0404 	sub.w	r4, r1, #4
 800632a:	bfb8      	it	lt
 800632c:	18e4      	addlt	r4, r4, r3
 800632e:	f000 fa65 	bl	80067fc <__malloc_lock>
 8006332:	4a20      	ldr	r2, [pc, #128]	; (80063b4 <_free_r+0x9c>)
 8006334:	9801      	ldr	r0, [sp, #4]
 8006336:	6813      	ldr	r3, [r2, #0]
 8006338:	4615      	mov	r5, r2
 800633a:	b933      	cbnz	r3, 800634a <_free_r+0x32>
 800633c:	6063      	str	r3, [r4, #4]
 800633e:	6014      	str	r4, [r2, #0]
 8006340:	b003      	add	sp, #12
 8006342:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006346:	f000 ba5f 	b.w	8006808 <__malloc_unlock>
 800634a:	42a3      	cmp	r3, r4
 800634c:	d90b      	bls.n	8006366 <_free_r+0x4e>
 800634e:	6821      	ldr	r1, [r4, #0]
 8006350:	1862      	adds	r2, r4, r1
 8006352:	4293      	cmp	r3, r2
 8006354:	bf04      	itt	eq
 8006356:	681a      	ldreq	r2, [r3, #0]
 8006358:	685b      	ldreq	r3, [r3, #4]
 800635a:	6063      	str	r3, [r4, #4]
 800635c:	bf04      	itt	eq
 800635e:	1852      	addeq	r2, r2, r1
 8006360:	6022      	streq	r2, [r4, #0]
 8006362:	602c      	str	r4, [r5, #0]
 8006364:	e7ec      	b.n	8006340 <_free_r+0x28>
 8006366:	461a      	mov	r2, r3
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	b10b      	cbz	r3, 8006370 <_free_r+0x58>
 800636c:	42a3      	cmp	r3, r4
 800636e:	d9fa      	bls.n	8006366 <_free_r+0x4e>
 8006370:	6811      	ldr	r1, [r2, #0]
 8006372:	1855      	adds	r5, r2, r1
 8006374:	42a5      	cmp	r5, r4
 8006376:	d10b      	bne.n	8006390 <_free_r+0x78>
 8006378:	6824      	ldr	r4, [r4, #0]
 800637a:	4421      	add	r1, r4
 800637c:	1854      	adds	r4, r2, r1
 800637e:	42a3      	cmp	r3, r4
 8006380:	6011      	str	r1, [r2, #0]
 8006382:	d1dd      	bne.n	8006340 <_free_r+0x28>
 8006384:	681c      	ldr	r4, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	6053      	str	r3, [r2, #4]
 800638a:	4421      	add	r1, r4
 800638c:	6011      	str	r1, [r2, #0]
 800638e:	e7d7      	b.n	8006340 <_free_r+0x28>
 8006390:	d902      	bls.n	8006398 <_free_r+0x80>
 8006392:	230c      	movs	r3, #12
 8006394:	6003      	str	r3, [r0, #0]
 8006396:	e7d3      	b.n	8006340 <_free_r+0x28>
 8006398:	6825      	ldr	r5, [r4, #0]
 800639a:	1961      	adds	r1, r4, r5
 800639c:	428b      	cmp	r3, r1
 800639e:	bf04      	itt	eq
 80063a0:	6819      	ldreq	r1, [r3, #0]
 80063a2:	685b      	ldreq	r3, [r3, #4]
 80063a4:	6063      	str	r3, [r4, #4]
 80063a6:	bf04      	itt	eq
 80063a8:	1949      	addeq	r1, r1, r5
 80063aa:	6021      	streq	r1, [r4, #0]
 80063ac:	6054      	str	r4, [r2, #4]
 80063ae:	e7c7      	b.n	8006340 <_free_r+0x28>
 80063b0:	b003      	add	sp, #12
 80063b2:	bd30      	pop	{r4, r5, pc}
 80063b4:	2000023c 	.word	0x2000023c

080063b8 <_malloc_r>:
 80063b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ba:	1ccd      	adds	r5, r1, #3
 80063bc:	f025 0503 	bic.w	r5, r5, #3
 80063c0:	3508      	adds	r5, #8
 80063c2:	2d0c      	cmp	r5, #12
 80063c4:	bf38      	it	cc
 80063c6:	250c      	movcc	r5, #12
 80063c8:	2d00      	cmp	r5, #0
 80063ca:	4606      	mov	r6, r0
 80063cc:	db01      	blt.n	80063d2 <_malloc_r+0x1a>
 80063ce:	42a9      	cmp	r1, r5
 80063d0:	d903      	bls.n	80063da <_malloc_r+0x22>
 80063d2:	230c      	movs	r3, #12
 80063d4:	6033      	str	r3, [r6, #0]
 80063d6:	2000      	movs	r0, #0
 80063d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063da:	f000 fa0f 	bl	80067fc <__malloc_lock>
 80063de:	4921      	ldr	r1, [pc, #132]	; (8006464 <_malloc_r+0xac>)
 80063e0:	680a      	ldr	r2, [r1, #0]
 80063e2:	4614      	mov	r4, r2
 80063e4:	b99c      	cbnz	r4, 800640e <_malloc_r+0x56>
 80063e6:	4f20      	ldr	r7, [pc, #128]	; (8006468 <_malloc_r+0xb0>)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	b923      	cbnz	r3, 80063f6 <_malloc_r+0x3e>
 80063ec:	4621      	mov	r1, r4
 80063ee:	4630      	mov	r0, r6
 80063f0:	f000 f998 	bl	8006724 <_sbrk_r>
 80063f4:	6038      	str	r0, [r7, #0]
 80063f6:	4629      	mov	r1, r5
 80063f8:	4630      	mov	r0, r6
 80063fa:	f000 f993 	bl	8006724 <_sbrk_r>
 80063fe:	1c43      	adds	r3, r0, #1
 8006400:	d123      	bne.n	800644a <_malloc_r+0x92>
 8006402:	230c      	movs	r3, #12
 8006404:	6033      	str	r3, [r6, #0]
 8006406:	4630      	mov	r0, r6
 8006408:	f000 f9fe 	bl	8006808 <__malloc_unlock>
 800640c:	e7e3      	b.n	80063d6 <_malloc_r+0x1e>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	1b5b      	subs	r3, r3, r5
 8006412:	d417      	bmi.n	8006444 <_malloc_r+0x8c>
 8006414:	2b0b      	cmp	r3, #11
 8006416:	d903      	bls.n	8006420 <_malloc_r+0x68>
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	441c      	add	r4, r3
 800641c:	6025      	str	r5, [r4, #0]
 800641e:	e004      	b.n	800642a <_malloc_r+0x72>
 8006420:	6863      	ldr	r3, [r4, #4]
 8006422:	42a2      	cmp	r2, r4
 8006424:	bf0c      	ite	eq
 8006426:	600b      	streq	r3, [r1, #0]
 8006428:	6053      	strne	r3, [r2, #4]
 800642a:	4630      	mov	r0, r6
 800642c:	f000 f9ec 	bl	8006808 <__malloc_unlock>
 8006430:	f104 000b 	add.w	r0, r4, #11
 8006434:	1d23      	adds	r3, r4, #4
 8006436:	f020 0007 	bic.w	r0, r0, #7
 800643a:	1ac2      	subs	r2, r0, r3
 800643c:	d0cc      	beq.n	80063d8 <_malloc_r+0x20>
 800643e:	1a1b      	subs	r3, r3, r0
 8006440:	50a3      	str	r3, [r4, r2]
 8006442:	e7c9      	b.n	80063d8 <_malloc_r+0x20>
 8006444:	4622      	mov	r2, r4
 8006446:	6864      	ldr	r4, [r4, #4]
 8006448:	e7cc      	b.n	80063e4 <_malloc_r+0x2c>
 800644a:	1cc4      	adds	r4, r0, #3
 800644c:	f024 0403 	bic.w	r4, r4, #3
 8006450:	42a0      	cmp	r0, r4
 8006452:	d0e3      	beq.n	800641c <_malloc_r+0x64>
 8006454:	1a21      	subs	r1, r4, r0
 8006456:	4630      	mov	r0, r6
 8006458:	f000 f964 	bl	8006724 <_sbrk_r>
 800645c:	3001      	adds	r0, #1
 800645e:	d1dd      	bne.n	800641c <_malloc_r+0x64>
 8006460:	e7cf      	b.n	8006402 <_malloc_r+0x4a>
 8006462:	bf00      	nop
 8006464:	2000023c 	.word	0x2000023c
 8006468:	20000240 	.word	0x20000240

0800646c <__ssputs_r>:
 800646c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	688e      	ldr	r6, [r1, #8]
 8006472:	429e      	cmp	r6, r3
 8006474:	4682      	mov	sl, r0
 8006476:	460c      	mov	r4, r1
 8006478:	4690      	mov	r8, r2
 800647a:	461f      	mov	r7, r3
 800647c:	d838      	bhi.n	80064f0 <__ssputs_r+0x84>
 800647e:	898a      	ldrh	r2, [r1, #12]
 8006480:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006484:	d032      	beq.n	80064ec <__ssputs_r+0x80>
 8006486:	6825      	ldr	r5, [r4, #0]
 8006488:	6909      	ldr	r1, [r1, #16]
 800648a:	eba5 0901 	sub.w	r9, r5, r1
 800648e:	6965      	ldr	r5, [r4, #20]
 8006490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006498:	3301      	adds	r3, #1
 800649a:	444b      	add	r3, r9
 800649c:	106d      	asrs	r5, r5, #1
 800649e:	429d      	cmp	r5, r3
 80064a0:	bf38      	it	cc
 80064a2:	461d      	movcc	r5, r3
 80064a4:	0553      	lsls	r3, r2, #21
 80064a6:	d531      	bpl.n	800650c <__ssputs_r+0xa0>
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7ff ff85 	bl	80063b8 <_malloc_r>
 80064ae:	4606      	mov	r6, r0
 80064b0:	b950      	cbnz	r0, 80064c8 <__ssputs_r+0x5c>
 80064b2:	230c      	movs	r3, #12
 80064b4:	f8ca 3000 	str.w	r3, [sl]
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064be:	81a3      	strh	r3, [r4, #12]
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295
 80064c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c8:	6921      	ldr	r1, [r4, #16]
 80064ca:	464a      	mov	r2, r9
 80064cc:	f7ff fb88 	bl	8005be0 <memcpy>
 80064d0:	89a3      	ldrh	r3, [r4, #12]
 80064d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064da:	81a3      	strh	r3, [r4, #12]
 80064dc:	6126      	str	r6, [r4, #16]
 80064de:	6165      	str	r5, [r4, #20]
 80064e0:	444e      	add	r6, r9
 80064e2:	eba5 0509 	sub.w	r5, r5, r9
 80064e6:	6026      	str	r6, [r4, #0]
 80064e8:	60a5      	str	r5, [r4, #8]
 80064ea:	463e      	mov	r6, r7
 80064ec:	42be      	cmp	r6, r7
 80064ee:	d900      	bls.n	80064f2 <__ssputs_r+0x86>
 80064f0:	463e      	mov	r6, r7
 80064f2:	4632      	mov	r2, r6
 80064f4:	6820      	ldr	r0, [r4, #0]
 80064f6:	4641      	mov	r1, r8
 80064f8:	f000 f966 	bl	80067c8 <memmove>
 80064fc:	68a3      	ldr	r3, [r4, #8]
 80064fe:	6822      	ldr	r2, [r4, #0]
 8006500:	1b9b      	subs	r3, r3, r6
 8006502:	4432      	add	r2, r6
 8006504:	60a3      	str	r3, [r4, #8]
 8006506:	6022      	str	r2, [r4, #0]
 8006508:	2000      	movs	r0, #0
 800650a:	e7db      	b.n	80064c4 <__ssputs_r+0x58>
 800650c:	462a      	mov	r2, r5
 800650e:	f000 f981 	bl	8006814 <_realloc_r>
 8006512:	4606      	mov	r6, r0
 8006514:	2800      	cmp	r0, #0
 8006516:	d1e1      	bne.n	80064dc <__ssputs_r+0x70>
 8006518:	6921      	ldr	r1, [r4, #16]
 800651a:	4650      	mov	r0, sl
 800651c:	f7ff fefc 	bl	8006318 <_free_r>
 8006520:	e7c7      	b.n	80064b2 <__ssputs_r+0x46>
	...

08006524 <_svfiprintf_r>:
 8006524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006528:	4698      	mov	r8, r3
 800652a:	898b      	ldrh	r3, [r1, #12]
 800652c:	061b      	lsls	r3, r3, #24
 800652e:	b09d      	sub	sp, #116	; 0x74
 8006530:	4607      	mov	r7, r0
 8006532:	460d      	mov	r5, r1
 8006534:	4614      	mov	r4, r2
 8006536:	d50e      	bpl.n	8006556 <_svfiprintf_r+0x32>
 8006538:	690b      	ldr	r3, [r1, #16]
 800653a:	b963      	cbnz	r3, 8006556 <_svfiprintf_r+0x32>
 800653c:	2140      	movs	r1, #64	; 0x40
 800653e:	f7ff ff3b 	bl	80063b8 <_malloc_r>
 8006542:	6028      	str	r0, [r5, #0]
 8006544:	6128      	str	r0, [r5, #16]
 8006546:	b920      	cbnz	r0, 8006552 <_svfiprintf_r+0x2e>
 8006548:	230c      	movs	r3, #12
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	e0d1      	b.n	80066f6 <_svfiprintf_r+0x1d2>
 8006552:	2340      	movs	r3, #64	; 0x40
 8006554:	616b      	str	r3, [r5, #20]
 8006556:	2300      	movs	r3, #0
 8006558:	9309      	str	r3, [sp, #36]	; 0x24
 800655a:	2320      	movs	r3, #32
 800655c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006560:	f8cd 800c 	str.w	r8, [sp, #12]
 8006564:	2330      	movs	r3, #48	; 0x30
 8006566:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006710 <_svfiprintf_r+0x1ec>
 800656a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800656e:	f04f 0901 	mov.w	r9, #1
 8006572:	4623      	mov	r3, r4
 8006574:	469a      	mov	sl, r3
 8006576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800657a:	b10a      	cbz	r2, 8006580 <_svfiprintf_r+0x5c>
 800657c:	2a25      	cmp	r2, #37	; 0x25
 800657e:	d1f9      	bne.n	8006574 <_svfiprintf_r+0x50>
 8006580:	ebba 0b04 	subs.w	fp, sl, r4
 8006584:	d00b      	beq.n	800659e <_svfiprintf_r+0x7a>
 8006586:	465b      	mov	r3, fp
 8006588:	4622      	mov	r2, r4
 800658a:	4629      	mov	r1, r5
 800658c:	4638      	mov	r0, r7
 800658e:	f7ff ff6d 	bl	800646c <__ssputs_r>
 8006592:	3001      	adds	r0, #1
 8006594:	f000 80aa 	beq.w	80066ec <_svfiprintf_r+0x1c8>
 8006598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800659a:	445a      	add	r2, fp
 800659c:	9209      	str	r2, [sp, #36]	; 0x24
 800659e:	f89a 3000 	ldrb.w	r3, [sl]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 80a2 	beq.w	80066ec <_svfiprintf_r+0x1c8>
 80065a8:	2300      	movs	r3, #0
 80065aa:	f04f 32ff 	mov.w	r2, #4294967295
 80065ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065b2:	f10a 0a01 	add.w	sl, sl, #1
 80065b6:	9304      	str	r3, [sp, #16]
 80065b8:	9307      	str	r3, [sp, #28]
 80065ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065be:	931a      	str	r3, [sp, #104]	; 0x68
 80065c0:	4654      	mov	r4, sl
 80065c2:	2205      	movs	r2, #5
 80065c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c8:	4851      	ldr	r0, [pc, #324]	; (8006710 <_svfiprintf_r+0x1ec>)
 80065ca:	f7f9 fe09 	bl	80001e0 <memchr>
 80065ce:	9a04      	ldr	r2, [sp, #16]
 80065d0:	b9d8      	cbnz	r0, 800660a <_svfiprintf_r+0xe6>
 80065d2:	06d0      	lsls	r0, r2, #27
 80065d4:	bf44      	itt	mi
 80065d6:	2320      	movmi	r3, #32
 80065d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065dc:	0711      	lsls	r1, r2, #28
 80065de:	bf44      	itt	mi
 80065e0:	232b      	movmi	r3, #43	; 0x2b
 80065e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065e6:	f89a 3000 	ldrb.w	r3, [sl]
 80065ea:	2b2a      	cmp	r3, #42	; 0x2a
 80065ec:	d015      	beq.n	800661a <_svfiprintf_r+0xf6>
 80065ee:	9a07      	ldr	r2, [sp, #28]
 80065f0:	4654      	mov	r4, sl
 80065f2:	2000      	movs	r0, #0
 80065f4:	f04f 0c0a 	mov.w	ip, #10
 80065f8:	4621      	mov	r1, r4
 80065fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065fe:	3b30      	subs	r3, #48	; 0x30
 8006600:	2b09      	cmp	r3, #9
 8006602:	d94e      	bls.n	80066a2 <_svfiprintf_r+0x17e>
 8006604:	b1b0      	cbz	r0, 8006634 <_svfiprintf_r+0x110>
 8006606:	9207      	str	r2, [sp, #28]
 8006608:	e014      	b.n	8006634 <_svfiprintf_r+0x110>
 800660a:	eba0 0308 	sub.w	r3, r0, r8
 800660e:	fa09 f303 	lsl.w	r3, r9, r3
 8006612:	4313      	orrs	r3, r2
 8006614:	9304      	str	r3, [sp, #16]
 8006616:	46a2      	mov	sl, r4
 8006618:	e7d2      	b.n	80065c0 <_svfiprintf_r+0x9c>
 800661a:	9b03      	ldr	r3, [sp, #12]
 800661c:	1d19      	adds	r1, r3, #4
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	9103      	str	r1, [sp, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	bfbb      	ittet	lt
 8006626:	425b      	neglt	r3, r3
 8006628:	f042 0202 	orrlt.w	r2, r2, #2
 800662c:	9307      	strge	r3, [sp, #28]
 800662e:	9307      	strlt	r3, [sp, #28]
 8006630:	bfb8      	it	lt
 8006632:	9204      	strlt	r2, [sp, #16]
 8006634:	7823      	ldrb	r3, [r4, #0]
 8006636:	2b2e      	cmp	r3, #46	; 0x2e
 8006638:	d10c      	bne.n	8006654 <_svfiprintf_r+0x130>
 800663a:	7863      	ldrb	r3, [r4, #1]
 800663c:	2b2a      	cmp	r3, #42	; 0x2a
 800663e:	d135      	bne.n	80066ac <_svfiprintf_r+0x188>
 8006640:	9b03      	ldr	r3, [sp, #12]
 8006642:	1d1a      	adds	r2, r3, #4
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	9203      	str	r2, [sp, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	bfb8      	it	lt
 800664c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006650:	3402      	adds	r4, #2
 8006652:	9305      	str	r3, [sp, #20]
 8006654:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006720 <_svfiprintf_r+0x1fc>
 8006658:	7821      	ldrb	r1, [r4, #0]
 800665a:	2203      	movs	r2, #3
 800665c:	4650      	mov	r0, sl
 800665e:	f7f9 fdbf 	bl	80001e0 <memchr>
 8006662:	b140      	cbz	r0, 8006676 <_svfiprintf_r+0x152>
 8006664:	2340      	movs	r3, #64	; 0x40
 8006666:	eba0 000a 	sub.w	r0, r0, sl
 800666a:	fa03 f000 	lsl.w	r0, r3, r0
 800666e:	9b04      	ldr	r3, [sp, #16]
 8006670:	4303      	orrs	r3, r0
 8006672:	3401      	adds	r4, #1
 8006674:	9304      	str	r3, [sp, #16]
 8006676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800667a:	4826      	ldr	r0, [pc, #152]	; (8006714 <_svfiprintf_r+0x1f0>)
 800667c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006680:	2206      	movs	r2, #6
 8006682:	f7f9 fdad 	bl	80001e0 <memchr>
 8006686:	2800      	cmp	r0, #0
 8006688:	d038      	beq.n	80066fc <_svfiprintf_r+0x1d8>
 800668a:	4b23      	ldr	r3, [pc, #140]	; (8006718 <_svfiprintf_r+0x1f4>)
 800668c:	bb1b      	cbnz	r3, 80066d6 <_svfiprintf_r+0x1b2>
 800668e:	9b03      	ldr	r3, [sp, #12]
 8006690:	3307      	adds	r3, #7
 8006692:	f023 0307 	bic.w	r3, r3, #7
 8006696:	3308      	adds	r3, #8
 8006698:	9303      	str	r3, [sp, #12]
 800669a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800669c:	4433      	add	r3, r6
 800669e:	9309      	str	r3, [sp, #36]	; 0x24
 80066a0:	e767      	b.n	8006572 <_svfiprintf_r+0x4e>
 80066a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80066a6:	460c      	mov	r4, r1
 80066a8:	2001      	movs	r0, #1
 80066aa:	e7a5      	b.n	80065f8 <_svfiprintf_r+0xd4>
 80066ac:	2300      	movs	r3, #0
 80066ae:	3401      	adds	r4, #1
 80066b0:	9305      	str	r3, [sp, #20]
 80066b2:	4619      	mov	r1, r3
 80066b4:	f04f 0c0a 	mov.w	ip, #10
 80066b8:	4620      	mov	r0, r4
 80066ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066be:	3a30      	subs	r2, #48	; 0x30
 80066c0:	2a09      	cmp	r2, #9
 80066c2:	d903      	bls.n	80066cc <_svfiprintf_r+0x1a8>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0c5      	beq.n	8006654 <_svfiprintf_r+0x130>
 80066c8:	9105      	str	r1, [sp, #20]
 80066ca:	e7c3      	b.n	8006654 <_svfiprintf_r+0x130>
 80066cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80066d0:	4604      	mov	r4, r0
 80066d2:	2301      	movs	r3, #1
 80066d4:	e7f0      	b.n	80066b8 <_svfiprintf_r+0x194>
 80066d6:	ab03      	add	r3, sp, #12
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	462a      	mov	r2, r5
 80066dc:	4b0f      	ldr	r3, [pc, #60]	; (800671c <_svfiprintf_r+0x1f8>)
 80066de:	a904      	add	r1, sp, #16
 80066e0:	4638      	mov	r0, r7
 80066e2:	f7fe f80d 	bl	8004700 <_printf_float>
 80066e6:	1c42      	adds	r2, r0, #1
 80066e8:	4606      	mov	r6, r0
 80066ea:	d1d6      	bne.n	800669a <_svfiprintf_r+0x176>
 80066ec:	89ab      	ldrh	r3, [r5, #12]
 80066ee:	065b      	lsls	r3, r3, #25
 80066f0:	f53f af2c 	bmi.w	800654c <_svfiprintf_r+0x28>
 80066f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066f6:	b01d      	add	sp, #116	; 0x74
 80066f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066fc:	ab03      	add	r3, sp, #12
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	462a      	mov	r2, r5
 8006702:	4b06      	ldr	r3, [pc, #24]	; (800671c <_svfiprintf_r+0x1f8>)
 8006704:	a904      	add	r1, sp, #16
 8006706:	4638      	mov	r0, r7
 8006708:	f7fe fa9e 	bl	8004c48 <_printf_i>
 800670c:	e7eb      	b.n	80066e6 <_svfiprintf_r+0x1c2>
 800670e:	bf00      	nop
 8006710:	0800881c 	.word	0x0800881c
 8006714:	08008826 	.word	0x08008826
 8006718:	08004701 	.word	0x08004701
 800671c:	0800646d 	.word	0x0800646d
 8006720:	08008822 	.word	0x08008822

08006724 <_sbrk_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4d06      	ldr	r5, [pc, #24]	; (8006740 <_sbrk_r+0x1c>)
 8006728:	2300      	movs	r3, #0
 800672a:	4604      	mov	r4, r0
 800672c:	4608      	mov	r0, r1
 800672e:	602b      	str	r3, [r5, #0]
 8006730:	f7fd fa6c 	bl	8003c0c <_sbrk>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	d102      	bne.n	800673e <_sbrk_r+0x1a>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	b103      	cbz	r3, 800673e <_sbrk_r+0x1a>
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	200002e4 	.word	0x200002e4

08006744 <__assert_func>:
 8006744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006746:	4614      	mov	r4, r2
 8006748:	461a      	mov	r2, r3
 800674a:	4b09      	ldr	r3, [pc, #36]	; (8006770 <__assert_func+0x2c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4605      	mov	r5, r0
 8006750:	68d8      	ldr	r0, [r3, #12]
 8006752:	b14c      	cbz	r4, 8006768 <__assert_func+0x24>
 8006754:	4b07      	ldr	r3, [pc, #28]	; (8006774 <__assert_func+0x30>)
 8006756:	9100      	str	r1, [sp, #0]
 8006758:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800675c:	4906      	ldr	r1, [pc, #24]	; (8006778 <__assert_func+0x34>)
 800675e:	462b      	mov	r3, r5
 8006760:	f000 f80e 	bl	8006780 <fiprintf>
 8006764:	f000 faa4 	bl	8006cb0 <abort>
 8006768:	4b04      	ldr	r3, [pc, #16]	; (800677c <__assert_func+0x38>)
 800676a:	461c      	mov	r4, r3
 800676c:	e7f3      	b.n	8006756 <__assert_func+0x12>
 800676e:	bf00      	nop
 8006770:	20000008 	.word	0x20000008
 8006774:	0800882d 	.word	0x0800882d
 8006778:	0800883a 	.word	0x0800883a
 800677c:	08008868 	.word	0x08008868

08006780 <fiprintf>:
 8006780:	b40e      	push	{r1, r2, r3}
 8006782:	b503      	push	{r0, r1, lr}
 8006784:	4601      	mov	r1, r0
 8006786:	ab03      	add	r3, sp, #12
 8006788:	4805      	ldr	r0, [pc, #20]	; (80067a0 <fiprintf+0x20>)
 800678a:	f853 2b04 	ldr.w	r2, [r3], #4
 800678e:	6800      	ldr	r0, [r0, #0]
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	f000 f88f 	bl	80068b4 <_vfiprintf_r>
 8006796:	b002      	add	sp, #8
 8006798:	f85d eb04 	ldr.w	lr, [sp], #4
 800679c:	b003      	add	sp, #12
 800679e:	4770      	bx	lr
 80067a0:	20000008 	.word	0x20000008

080067a4 <__ascii_mbtowc>:
 80067a4:	b082      	sub	sp, #8
 80067a6:	b901      	cbnz	r1, 80067aa <__ascii_mbtowc+0x6>
 80067a8:	a901      	add	r1, sp, #4
 80067aa:	b142      	cbz	r2, 80067be <__ascii_mbtowc+0x1a>
 80067ac:	b14b      	cbz	r3, 80067c2 <__ascii_mbtowc+0x1e>
 80067ae:	7813      	ldrb	r3, [r2, #0]
 80067b0:	600b      	str	r3, [r1, #0]
 80067b2:	7812      	ldrb	r2, [r2, #0]
 80067b4:	1e10      	subs	r0, r2, #0
 80067b6:	bf18      	it	ne
 80067b8:	2001      	movne	r0, #1
 80067ba:	b002      	add	sp, #8
 80067bc:	4770      	bx	lr
 80067be:	4610      	mov	r0, r2
 80067c0:	e7fb      	b.n	80067ba <__ascii_mbtowc+0x16>
 80067c2:	f06f 0001 	mvn.w	r0, #1
 80067c6:	e7f8      	b.n	80067ba <__ascii_mbtowc+0x16>

080067c8 <memmove>:
 80067c8:	4288      	cmp	r0, r1
 80067ca:	b510      	push	{r4, lr}
 80067cc:	eb01 0402 	add.w	r4, r1, r2
 80067d0:	d902      	bls.n	80067d8 <memmove+0x10>
 80067d2:	4284      	cmp	r4, r0
 80067d4:	4623      	mov	r3, r4
 80067d6:	d807      	bhi.n	80067e8 <memmove+0x20>
 80067d8:	1e43      	subs	r3, r0, #1
 80067da:	42a1      	cmp	r1, r4
 80067dc:	d008      	beq.n	80067f0 <memmove+0x28>
 80067de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067e6:	e7f8      	b.n	80067da <memmove+0x12>
 80067e8:	4402      	add	r2, r0
 80067ea:	4601      	mov	r1, r0
 80067ec:	428a      	cmp	r2, r1
 80067ee:	d100      	bne.n	80067f2 <memmove+0x2a>
 80067f0:	bd10      	pop	{r4, pc}
 80067f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067fa:	e7f7      	b.n	80067ec <memmove+0x24>

080067fc <__malloc_lock>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__malloc_lock+0x8>)
 80067fe:	f000 bc17 	b.w	8007030 <__retarget_lock_acquire_recursive>
 8006802:	bf00      	nop
 8006804:	200002ec 	.word	0x200002ec

08006808 <__malloc_unlock>:
 8006808:	4801      	ldr	r0, [pc, #4]	; (8006810 <__malloc_unlock+0x8>)
 800680a:	f000 bc12 	b.w	8007032 <__retarget_lock_release_recursive>
 800680e:	bf00      	nop
 8006810:	200002ec 	.word	0x200002ec

08006814 <_realloc_r>:
 8006814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006816:	4607      	mov	r7, r0
 8006818:	4614      	mov	r4, r2
 800681a:	460e      	mov	r6, r1
 800681c:	b921      	cbnz	r1, 8006828 <_realloc_r+0x14>
 800681e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006822:	4611      	mov	r1, r2
 8006824:	f7ff bdc8 	b.w	80063b8 <_malloc_r>
 8006828:	b922      	cbnz	r2, 8006834 <_realloc_r+0x20>
 800682a:	f7ff fd75 	bl	8006318 <_free_r>
 800682e:	4625      	mov	r5, r4
 8006830:	4628      	mov	r0, r5
 8006832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006834:	f000 fc62 	bl	80070fc <_malloc_usable_size_r>
 8006838:	42a0      	cmp	r0, r4
 800683a:	d20f      	bcs.n	800685c <_realloc_r+0x48>
 800683c:	4621      	mov	r1, r4
 800683e:	4638      	mov	r0, r7
 8006840:	f7ff fdba 	bl	80063b8 <_malloc_r>
 8006844:	4605      	mov	r5, r0
 8006846:	2800      	cmp	r0, #0
 8006848:	d0f2      	beq.n	8006830 <_realloc_r+0x1c>
 800684a:	4631      	mov	r1, r6
 800684c:	4622      	mov	r2, r4
 800684e:	f7ff f9c7 	bl	8005be0 <memcpy>
 8006852:	4631      	mov	r1, r6
 8006854:	4638      	mov	r0, r7
 8006856:	f7ff fd5f 	bl	8006318 <_free_r>
 800685a:	e7e9      	b.n	8006830 <_realloc_r+0x1c>
 800685c:	4635      	mov	r5, r6
 800685e:	e7e7      	b.n	8006830 <_realloc_r+0x1c>

08006860 <__sfputc_r>:
 8006860:	6893      	ldr	r3, [r2, #8]
 8006862:	3b01      	subs	r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	b410      	push	{r4}
 8006868:	6093      	str	r3, [r2, #8]
 800686a:	da08      	bge.n	800687e <__sfputc_r+0x1e>
 800686c:	6994      	ldr	r4, [r2, #24]
 800686e:	42a3      	cmp	r3, r4
 8006870:	db01      	blt.n	8006876 <__sfputc_r+0x16>
 8006872:	290a      	cmp	r1, #10
 8006874:	d103      	bne.n	800687e <__sfputc_r+0x1e>
 8006876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800687a:	f000 b94b 	b.w	8006b14 <__swbuf_r>
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	1c58      	adds	r0, r3, #1
 8006882:	6010      	str	r0, [r2, #0]
 8006884:	7019      	strb	r1, [r3, #0]
 8006886:	4608      	mov	r0, r1
 8006888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800688c:	4770      	bx	lr

0800688e <__sfputs_r>:
 800688e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006890:	4606      	mov	r6, r0
 8006892:	460f      	mov	r7, r1
 8006894:	4614      	mov	r4, r2
 8006896:	18d5      	adds	r5, r2, r3
 8006898:	42ac      	cmp	r4, r5
 800689a:	d101      	bne.n	80068a0 <__sfputs_r+0x12>
 800689c:	2000      	movs	r0, #0
 800689e:	e007      	b.n	80068b0 <__sfputs_r+0x22>
 80068a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a4:	463a      	mov	r2, r7
 80068a6:	4630      	mov	r0, r6
 80068a8:	f7ff ffda 	bl	8006860 <__sfputc_r>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d1f3      	bne.n	8006898 <__sfputs_r+0xa>
 80068b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068b4 <_vfiprintf_r>:
 80068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	460d      	mov	r5, r1
 80068ba:	b09d      	sub	sp, #116	; 0x74
 80068bc:	4614      	mov	r4, r2
 80068be:	4698      	mov	r8, r3
 80068c0:	4606      	mov	r6, r0
 80068c2:	b118      	cbz	r0, 80068cc <_vfiprintf_r+0x18>
 80068c4:	6983      	ldr	r3, [r0, #24]
 80068c6:	b90b      	cbnz	r3, 80068cc <_vfiprintf_r+0x18>
 80068c8:	f000 fb14 	bl	8006ef4 <__sinit>
 80068cc:	4b89      	ldr	r3, [pc, #548]	; (8006af4 <_vfiprintf_r+0x240>)
 80068ce:	429d      	cmp	r5, r3
 80068d0:	d11b      	bne.n	800690a <_vfiprintf_r+0x56>
 80068d2:	6875      	ldr	r5, [r6, #4]
 80068d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068d6:	07d9      	lsls	r1, r3, #31
 80068d8:	d405      	bmi.n	80068e6 <_vfiprintf_r+0x32>
 80068da:	89ab      	ldrh	r3, [r5, #12]
 80068dc:	059a      	lsls	r2, r3, #22
 80068de:	d402      	bmi.n	80068e6 <_vfiprintf_r+0x32>
 80068e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068e2:	f000 fba5 	bl	8007030 <__retarget_lock_acquire_recursive>
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	071b      	lsls	r3, r3, #28
 80068ea:	d501      	bpl.n	80068f0 <_vfiprintf_r+0x3c>
 80068ec:	692b      	ldr	r3, [r5, #16]
 80068ee:	b9eb      	cbnz	r3, 800692c <_vfiprintf_r+0x78>
 80068f0:	4629      	mov	r1, r5
 80068f2:	4630      	mov	r0, r6
 80068f4:	f000 f96e 	bl	8006bd4 <__swsetup_r>
 80068f8:	b1c0      	cbz	r0, 800692c <_vfiprintf_r+0x78>
 80068fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068fc:	07dc      	lsls	r4, r3, #31
 80068fe:	d50e      	bpl.n	800691e <_vfiprintf_r+0x6a>
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	b01d      	add	sp, #116	; 0x74
 8006906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690a:	4b7b      	ldr	r3, [pc, #492]	; (8006af8 <_vfiprintf_r+0x244>)
 800690c:	429d      	cmp	r5, r3
 800690e:	d101      	bne.n	8006914 <_vfiprintf_r+0x60>
 8006910:	68b5      	ldr	r5, [r6, #8]
 8006912:	e7df      	b.n	80068d4 <_vfiprintf_r+0x20>
 8006914:	4b79      	ldr	r3, [pc, #484]	; (8006afc <_vfiprintf_r+0x248>)
 8006916:	429d      	cmp	r5, r3
 8006918:	bf08      	it	eq
 800691a:	68f5      	ldreq	r5, [r6, #12]
 800691c:	e7da      	b.n	80068d4 <_vfiprintf_r+0x20>
 800691e:	89ab      	ldrh	r3, [r5, #12]
 8006920:	0598      	lsls	r0, r3, #22
 8006922:	d4ed      	bmi.n	8006900 <_vfiprintf_r+0x4c>
 8006924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006926:	f000 fb84 	bl	8007032 <__retarget_lock_release_recursive>
 800692a:	e7e9      	b.n	8006900 <_vfiprintf_r+0x4c>
 800692c:	2300      	movs	r3, #0
 800692e:	9309      	str	r3, [sp, #36]	; 0x24
 8006930:	2320      	movs	r3, #32
 8006932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006936:	f8cd 800c 	str.w	r8, [sp, #12]
 800693a:	2330      	movs	r3, #48	; 0x30
 800693c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b00 <_vfiprintf_r+0x24c>
 8006940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006944:	f04f 0901 	mov.w	r9, #1
 8006948:	4623      	mov	r3, r4
 800694a:	469a      	mov	sl, r3
 800694c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006950:	b10a      	cbz	r2, 8006956 <_vfiprintf_r+0xa2>
 8006952:	2a25      	cmp	r2, #37	; 0x25
 8006954:	d1f9      	bne.n	800694a <_vfiprintf_r+0x96>
 8006956:	ebba 0b04 	subs.w	fp, sl, r4
 800695a:	d00b      	beq.n	8006974 <_vfiprintf_r+0xc0>
 800695c:	465b      	mov	r3, fp
 800695e:	4622      	mov	r2, r4
 8006960:	4629      	mov	r1, r5
 8006962:	4630      	mov	r0, r6
 8006964:	f7ff ff93 	bl	800688e <__sfputs_r>
 8006968:	3001      	adds	r0, #1
 800696a:	f000 80aa 	beq.w	8006ac2 <_vfiprintf_r+0x20e>
 800696e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006970:	445a      	add	r2, fp
 8006972:	9209      	str	r2, [sp, #36]	; 0x24
 8006974:	f89a 3000 	ldrb.w	r3, [sl]
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 80a2 	beq.w	8006ac2 <_vfiprintf_r+0x20e>
 800697e:	2300      	movs	r3, #0
 8006980:	f04f 32ff 	mov.w	r2, #4294967295
 8006984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006988:	f10a 0a01 	add.w	sl, sl, #1
 800698c:	9304      	str	r3, [sp, #16]
 800698e:	9307      	str	r3, [sp, #28]
 8006990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006994:	931a      	str	r3, [sp, #104]	; 0x68
 8006996:	4654      	mov	r4, sl
 8006998:	2205      	movs	r2, #5
 800699a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699e:	4858      	ldr	r0, [pc, #352]	; (8006b00 <_vfiprintf_r+0x24c>)
 80069a0:	f7f9 fc1e 	bl	80001e0 <memchr>
 80069a4:	9a04      	ldr	r2, [sp, #16]
 80069a6:	b9d8      	cbnz	r0, 80069e0 <_vfiprintf_r+0x12c>
 80069a8:	06d1      	lsls	r1, r2, #27
 80069aa:	bf44      	itt	mi
 80069ac:	2320      	movmi	r3, #32
 80069ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b2:	0713      	lsls	r3, r2, #28
 80069b4:	bf44      	itt	mi
 80069b6:	232b      	movmi	r3, #43	; 0x2b
 80069b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069bc:	f89a 3000 	ldrb.w	r3, [sl]
 80069c0:	2b2a      	cmp	r3, #42	; 0x2a
 80069c2:	d015      	beq.n	80069f0 <_vfiprintf_r+0x13c>
 80069c4:	9a07      	ldr	r2, [sp, #28]
 80069c6:	4654      	mov	r4, sl
 80069c8:	2000      	movs	r0, #0
 80069ca:	f04f 0c0a 	mov.w	ip, #10
 80069ce:	4621      	mov	r1, r4
 80069d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069d4:	3b30      	subs	r3, #48	; 0x30
 80069d6:	2b09      	cmp	r3, #9
 80069d8:	d94e      	bls.n	8006a78 <_vfiprintf_r+0x1c4>
 80069da:	b1b0      	cbz	r0, 8006a0a <_vfiprintf_r+0x156>
 80069dc:	9207      	str	r2, [sp, #28]
 80069de:	e014      	b.n	8006a0a <_vfiprintf_r+0x156>
 80069e0:	eba0 0308 	sub.w	r3, r0, r8
 80069e4:	fa09 f303 	lsl.w	r3, r9, r3
 80069e8:	4313      	orrs	r3, r2
 80069ea:	9304      	str	r3, [sp, #16]
 80069ec:	46a2      	mov	sl, r4
 80069ee:	e7d2      	b.n	8006996 <_vfiprintf_r+0xe2>
 80069f0:	9b03      	ldr	r3, [sp, #12]
 80069f2:	1d19      	adds	r1, r3, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	9103      	str	r1, [sp, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	bfbb      	ittet	lt
 80069fc:	425b      	neglt	r3, r3
 80069fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006a02:	9307      	strge	r3, [sp, #28]
 8006a04:	9307      	strlt	r3, [sp, #28]
 8006a06:	bfb8      	it	lt
 8006a08:	9204      	strlt	r2, [sp, #16]
 8006a0a:	7823      	ldrb	r3, [r4, #0]
 8006a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a0e:	d10c      	bne.n	8006a2a <_vfiprintf_r+0x176>
 8006a10:	7863      	ldrb	r3, [r4, #1]
 8006a12:	2b2a      	cmp	r3, #42	; 0x2a
 8006a14:	d135      	bne.n	8006a82 <_vfiprintf_r+0x1ce>
 8006a16:	9b03      	ldr	r3, [sp, #12]
 8006a18:	1d1a      	adds	r2, r3, #4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	9203      	str	r2, [sp, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bfb8      	it	lt
 8006a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a26:	3402      	adds	r4, #2
 8006a28:	9305      	str	r3, [sp, #20]
 8006a2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b10 <_vfiprintf_r+0x25c>
 8006a2e:	7821      	ldrb	r1, [r4, #0]
 8006a30:	2203      	movs	r2, #3
 8006a32:	4650      	mov	r0, sl
 8006a34:	f7f9 fbd4 	bl	80001e0 <memchr>
 8006a38:	b140      	cbz	r0, 8006a4c <_vfiprintf_r+0x198>
 8006a3a:	2340      	movs	r3, #64	; 0x40
 8006a3c:	eba0 000a 	sub.w	r0, r0, sl
 8006a40:	fa03 f000 	lsl.w	r0, r3, r0
 8006a44:	9b04      	ldr	r3, [sp, #16]
 8006a46:	4303      	orrs	r3, r0
 8006a48:	3401      	adds	r4, #1
 8006a4a:	9304      	str	r3, [sp, #16]
 8006a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a50:	482c      	ldr	r0, [pc, #176]	; (8006b04 <_vfiprintf_r+0x250>)
 8006a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a56:	2206      	movs	r2, #6
 8006a58:	f7f9 fbc2 	bl	80001e0 <memchr>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d03f      	beq.n	8006ae0 <_vfiprintf_r+0x22c>
 8006a60:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <_vfiprintf_r+0x254>)
 8006a62:	bb1b      	cbnz	r3, 8006aac <_vfiprintf_r+0x1f8>
 8006a64:	9b03      	ldr	r3, [sp, #12]
 8006a66:	3307      	adds	r3, #7
 8006a68:	f023 0307 	bic.w	r3, r3, #7
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	9303      	str	r3, [sp, #12]
 8006a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a72:	443b      	add	r3, r7
 8006a74:	9309      	str	r3, [sp, #36]	; 0x24
 8006a76:	e767      	b.n	8006948 <_vfiprintf_r+0x94>
 8006a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	2001      	movs	r0, #1
 8006a80:	e7a5      	b.n	80069ce <_vfiprintf_r+0x11a>
 8006a82:	2300      	movs	r3, #0
 8006a84:	3401      	adds	r4, #1
 8006a86:	9305      	str	r3, [sp, #20]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	f04f 0c0a 	mov.w	ip, #10
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a94:	3a30      	subs	r2, #48	; 0x30
 8006a96:	2a09      	cmp	r2, #9
 8006a98:	d903      	bls.n	8006aa2 <_vfiprintf_r+0x1ee>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0c5      	beq.n	8006a2a <_vfiprintf_r+0x176>
 8006a9e:	9105      	str	r1, [sp, #20]
 8006aa0:	e7c3      	b.n	8006a2a <_vfiprintf_r+0x176>
 8006aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e7f0      	b.n	8006a8e <_vfiprintf_r+0x1da>
 8006aac:	ab03      	add	r3, sp, #12
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	462a      	mov	r2, r5
 8006ab2:	4b16      	ldr	r3, [pc, #88]	; (8006b0c <_vfiprintf_r+0x258>)
 8006ab4:	a904      	add	r1, sp, #16
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f7fd fe22 	bl	8004700 <_printf_float>
 8006abc:	4607      	mov	r7, r0
 8006abe:	1c78      	adds	r0, r7, #1
 8006ac0:	d1d6      	bne.n	8006a70 <_vfiprintf_r+0x1bc>
 8006ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ac4:	07d9      	lsls	r1, r3, #31
 8006ac6:	d405      	bmi.n	8006ad4 <_vfiprintf_r+0x220>
 8006ac8:	89ab      	ldrh	r3, [r5, #12]
 8006aca:	059a      	lsls	r2, r3, #22
 8006acc:	d402      	bmi.n	8006ad4 <_vfiprintf_r+0x220>
 8006ace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ad0:	f000 faaf 	bl	8007032 <__retarget_lock_release_recursive>
 8006ad4:	89ab      	ldrh	r3, [r5, #12]
 8006ad6:	065b      	lsls	r3, r3, #25
 8006ad8:	f53f af12 	bmi.w	8006900 <_vfiprintf_r+0x4c>
 8006adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ade:	e711      	b.n	8006904 <_vfiprintf_r+0x50>
 8006ae0:	ab03      	add	r3, sp, #12
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	462a      	mov	r2, r5
 8006ae6:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <_vfiprintf_r+0x258>)
 8006ae8:	a904      	add	r1, sp, #16
 8006aea:	4630      	mov	r0, r6
 8006aec:	f7fe f8ac 	bl	8004c48 <_printf_i>
 8006af0:	e7e4      	b.n	8006abc <_vfiprintf_r+0x208>
 8006af2:	bf00      	nop
 8006af4:	08008994 	.word	0x08008994
 8006af8:	080089b4 	.word	0x080089b4
 8006afc:	08008974 	.word	0x08008974
 8006b00:	0800881c 	.word	0x0800881c
 8006b04:	08008826 	.word	0x08008826
 8006b08:	08004701 	.word	0x08004701
 8006b0c:	0800688f 	.word	0x0800688f
 8006b10:	08008822 	.word	0x08008822

08006b14 <__swbuf_r>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	460e      	mov	r6, r1
 8006b18:	4614      	mov	r4, r2
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	b118      	cbz	r0, 8006b26 <__swbuf_r+0x12>
 8006b1e:	6983      	ldr	r3, [r0, #24]
 8006b20:	b90b      	cbnz	r3, 8006b26 <__swbuf_r+0x12>
 8006b22:	f000 f9e7 	bl	8006ef4 <__sinit>
 8006b26:	4b21      	ldr	r3, [pc, #132]	; (8006bac <__swbuf_r+0x98>)
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	d12b      	bne.n	8006b84 <__swbuf_r+0x70>
 8006b2c:	686c      	ldr	r4, [r5, #4]
 8006b2e:	69a3      	ldr	r3, [r4, #24]
 8006b30:	60a3      	str	r3, [r4, #8]
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	071a      	lsls	r2, r3, #28
 8006b36:	d52f      	bpl.n	8006b98 <__swbuf_r+0x84>
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	b36b      	cbz	r3, 8006b98 <__swbuf_r+0x84>
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	6820      	ldr	r0, [r4, #0]
 8006b40:	1ac0      	subs	r0, r0, r3
 8006b42:	6963      	ldr	r3, [r4, #20]
 8006b44:	b2f6      	uxtb	r6, r6
 8006b46:	4283      	cmp	r3, r0
 8006b48:	4637      	mov	r7, r6
 8006b4a:	dc04      	bgt.n	8006b56 <__swbuf_r+0x42>
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f000 f93c 	bl	8006dcc <_fflush_r>
 8006b54:	bb30      	cbnz	r0, 8006ba4 <__swbuf_r+0x90>
 8006b56:	68a3      	ldr	r3, [r4, #8]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	60a3      	str	r3, [r4, #8]
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	6022      	str	r2, [r4, #0]
 8006b62:	701e      	strb	r6, [r3, #0]
 8006b64:	6963      	ldr	r3, [r4, #20]
 8006b66:	3001      	adds	r0, #1
 8006b68:	4283      	cmp	r3, r0
 8006b6a:	d004      	beq.n	8006b76 <__swbuf_r+0x62>
 8006b6c:	89a3      	ldrh	r3, [r4, #12]
 8006b6e:	07db      	lsls	r3, r3, #31
 8006b70:	d506      	bpl.n	8006b80 <__swbuf_r+0x6c>
 8006b72:	2e0a      	cmp	r6, #10
 8006b74:	d104      	bne.n	8006b80 <__swbuf_r+0x6c>
 8006b76:	4621      	mov	r1, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f000 f927 	bl	8006dcc <_fflush_r>
 8006b7e:	b988      	cbnz	r0, 8006ba4 <__swbuf_r+0x90>
 8006b80:	4638      	mov	r0, r7
 8006b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b84:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <__swbuf_r+0x9c>)
 8006b86:	429c      	cmp	r4, r3
 8006b88:	d101      	bne.n	8006b8e <__swbuf_r+0x7a>
 8006b8a:	68ac      	ldr	r4, [r5, #8]
 8006b8c:	e7cf      	b.n	8006b2e <__swbuf_r+0x1a>
 8006b8e:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <__swbuf_r+0xa0>)
 8006b90:	429c      	cmp	r4, r3
 8006b92:	bf08      	it	eq
 8006b94:	68ec      	ldreq	r4, [r5, #12]
 8006b96:	e7ca      	b.n	8006b2e <__swbuf_r+0x1a>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f000 f81a 	bl	8006bd4 <__swsetup_r>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d0cb      	beq.n	8006b3c <__swbuf_r+0x28>
 8006ba4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ba8:	e7ea      	b.n	8006b80 <__swbuf_r+0x6c>
 8006baa:	bf00      	nop
 8006bac:	08008994 	.word	0x08008994
 8006bb0:	080089b4 	.word	0x080089b4
 8006bb4:	08008974 	.word	0x08008974

08006bb8 <__ascii_wctomb>:
 8006bb8:	b149      	cbz	r1, 8006bce <__ascii_wctomb+0x16>
 8006bba:	2aff      	cmp	r2, #255	; 0xff
 8006bbc:	bf85      	ittet	hi
 8006bbe:	238a      	movhi	r3, #138	; 0x8a
 8006bc0:	6003      	strhi	r3, [r0, #0]
 8006bc2:	700a      	strbls	r2, [r1, #0]
 8006bc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8006bc8:	bf98      	it	ls
 8006bca:	2001      	movls	r0, #1
 8006bcc:	4770      	bx	lr
 8006bce:	4608      	mov	r0, r1
 8006bd0:	4770      	bx	lr
	...

08006bd4 <__swsetup_r>:
 8006bd4:	4b32      	ldr	r3, [pc, #200]	; (8006ca0 <__swsetup_r+0xcc>)
 8006bd6:	b570      	push	{r4, r5, r6, lr}
 8006bd8:	681d      	ldr	r5, [r3, #0]
 8006bda:	4606      	mov	r6, r0
 8006bdc:	460c      	mov	r4, r1
 8006bde:	b125      	cbz	r5, 8006bea <__swsetup_r+0x16>
 8006be0:	69ab      	ldr	r3, [r5, #24]
 8006be2:	b913      	cbnz	r3, 8006bea <__swsetup_r+0x16>
 8006be4:	4628      	mov	r0, r5
 8006be6:	f000 f985 	bl	8006ef4 <__sinit>
 8006bea:	4b2e      	ldr	r3, [pc, #184]	; (8006ca4 <__swsetup_r+0xd0>)
 8006bec:	429c      	cmp	r4, r3
 8006bee:	d10f      	bne.n	8006c10 <__swsetup_r+0x3c>
 8006bf0:	686c      	ldr	r4, [r5, #4]
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bf8:	0719      	lsls	r1, r3, #28
 8006bfa:	d42c      	bmi.n	8006c56 <__swsetup_r+0x82>
 8006bfc:	06dd      	lsls	r5, r3, #27
 8006bfe:	d411      	bmi.n	8006c24 <__swsetup_r+0x50>
 8006c00:	2309      	movs	r3, #9
 8006c02:	6033      	str	r3, [r6, #0]
 8006c04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0e:	e03e      	b.n	8006c8e <__swsetup_r+0xba>
 8006c10:	4b25      	ldr	r3, [pc, #148]	; (8006ca8 <__swsetup_r+0xd4>)
 8006c12:	429c      	cmp	r4, r3
 8006c14:	d101      	bne.n	8006c1a <__swsetup_r+0x46>
 8006c16:	68ac      	ldr	r4, [r5, #8]
 8006c18:	e7eb      	b.n	8006bf2 <__swsetup_r+0x1e>
 8006c1a:	4b24      	ldr	r3, [pc, #144]	; (8006cac <__swsetup_r+0xd8>)
 8006c1c:	429c      	cmp	r4, r3
 8006c1e:	bf08      	it	eq
 8006c20:	68ec      	ldreq	r4, [r5, #12]
 8006c22:	e7e6      	b.n	8006bf2 <__swsetup_r+0x1e>
 8006c24:	0758      	lsls	r0, r3, #29
 8006c26:	d512      	bpl.n	8006c4e <__swsetup_r+0x7a>
 8006c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c2a:	b141      	cbz	r1, 8006c3e <__swsetup_r+0x6a>
 8006c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c30:	4299      	cmp	r1, r3
 8006c32:	d002      	beq.n	8006c3a <__swsetup_r+0x66>
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff fb6f 	bl	8006318 <_free_r>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c44:	81a3      	strh	r3, [r4, #12]
 8006c46:	2300      	movs	r3, #0
 8006c48:	6063      	str	r3, [r4, #4]
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	f043 0308 	orr.w	r3, r3, #8
 8006c54:	81a3      	strh	r3, [r4, #12]
 8006c56:	6923      	ldr	r3, [r4, #16]
 8006c58:	b94b      	cbnz	r3, 8006c6e <__swsetup_r+0x9a>
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c64:	d003      	beq.n	8006c6e <__swsetup_r+0x9a>
 8006c66:	4621      	mov	r1, r4
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f000 fa07 	bl	800707c <__smakebuf_r>
 8006c6e:	89a0      	ldrh	r0, [r4, #12]
 8006c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c74:	f010 0301 	ands.w	r3, r0, #1
 8006c78:	d00a      	beq.n	8006c90 <__swsetup_r+0xbc>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60a3      	str	r3, [r4, #8]
 8006c7e:	6963      	ldr	r3, [r4, #20]
 8006c80:	425b      	negs	r3, r3
 8006c82:	61a3      	str	r3, [r4, #24]
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	b943      	cbnz	r3, 8006c9a <__swsetup_r+0xc6>
 8006c88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c8c:	d1ba      	bne.n	8006c04 <__swsetup_r+0x30>
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
 8006c90:	0781      	lsls	r1, r0, #30
 8006c92:	bf58      	it	pl
 8006c94:	6963      	ldrpl	r3, [r4, #20]
 8006c96:	60a3      	str	r3, [r4, #8]
 8006c98:	e7f4      	b.n	8006c84 <__swsetup_r+0xb0>
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	e7f7      	b.n	8006c8e <__swsetup_r+0xba>
 8006c9e:	bf00      	nop
 8006ca0:	20000008 	.word	0x20000008
 8006ca4:	08008994 	.word	0x08008994
 8006ca8:	080089b4 	.word	0x080089b4
 8006cac:	08008974 	.word	0x08008974

08006cb0 <abort>:
 8006cb0:	b508      	push	{r3, lr}
 8006cb2:	2006      	movs	r0, #6
 8006cb4:	f000 fa52 	bl	800715c <raise>
 8006cb8:	2001      	movs	r0, #1
 8006cba:	f7fc ff2f 	bl	8003b1c <_exit>
	...

08006cc0 <__sflush_r>:
 8006cc0:	898a      	ldrh	r2, [r1, #12]
 8006cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc6:	4605      	mov	r5, r0
 8006cc8:	0710      	lsls	r0, r2, #28
 8006cca:	460c      	mov	r4, r1
 8006ccc:	d458      	bmi.n	8006d80 <__sflush_r+0xc0>
 8006cce:	684b      	ldr	r3, [r1, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dc05      	bgt.n	8006ce0 <__sflush_r+0x20>
 8006cd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	dc02      	bgt.n	8006ce0 <__sflush_r+0x20>
 8006cda:	2000      	movs	r0, #0
 8006cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ce2:	2e00      	cmp	r6, #0
 8006ce4:	d0f9      	beq.n	8006cda <__sflush_r+0x1a>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cec:	682f      	ldr	r7, [r5, #0]
 8006cee:	602b      	str	r3, [r5, #0]
 8006cf0:	d032      	beq.n	8006d58 <__sflush_r+0x98>
 8006cf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	075a      	lsls	r2, r3, #29
 8006cf8:	d505      	bpl.n	8006d06 <__sflush_r+0x46>
 8006cfa:	6863      	ldr	r3, [r4, #4]
 8006cfc:	1ac0      	subs	r0, r0, r3
 8006cfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d00:	b10b      	cbz	r3, 8006d06 <__sflush_r+0x46>
 8006d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d04:	1ac0      	subs	r0, r0, r3
 8006d06:	2300      	movs	r3, #0
 8006d08:	4602      	mov	r2, r0
 8006d0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d0c:	6a21      	ldr	r1, [r4, #32]
 8006d0e:	4628      	mov	r0, r5
 8006d10:	47b0      	blx	r6
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	d106      	bne.n	8006d26 <__sflush_r+0x66>
 8006d18:	6829      	ldr	r1, [r5, #0]
 8006d1a:	291d      	cmp	r1, #29
 8006d1c:	d82c      	bhi.n	8006d78 <__sflush_r+0xb8>
 8006d1e:	4a2a      	ldr	r2, [pc, #168]	; (8006dc8 <__sflush_r+0x108>)
 8006d20:	40ca      	lsrs	r2, r1
 8006d22:	07d6      	lsls	r6, r2, #31
 8006d24:	d528      	bpl.n	8006d78 <__sflush_r+0xb8>
 8006d26:	2200      	movs	r2, #0
 8006d28:	6062      	str	r2, [r4, #4]
 8006d2a:	04d9      	lsls	r1, r3, #19
 8006d2c:	6922      	ldr	r2, [r4, #16]
 8006d2e:	6022      	str	r2, [r4, #0]
 8006d30:	d504      	bpl.n	8006d3c <__sflush_r+0x7c>
 8006d32:	1c42      	adds	r2, r0, #1
 8006d34:	d101      	bne.n	8006d3a <__sflush_r+0x7a>
 8006d36:	682b      	ldr	r3, [r5, #0]
 8006d38:	b903      	cbnz	r3, 8006d3c <__sflush_r+0x7c>
 8006d3a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d3e:	602f      	str	r7, [r5, #0]
 8006d40:	2900      	cmp	r1, #0
 8006d42:	d0ca      	beq.n	8006cda <__sflush_r+0x1a>
 8006d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d48:	4299      	cmp	r1, r3
 8006d4a:	d002      	beq.n	8006d52 <__sflush_r+0x92>
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f7ff fae3 	bl	8006318 <_free_r>
 8006d52:	2000      	movs	r0, #0
 8006d54:	6360      	str	r0, [r4, #52]	; 0x34
 8006d56:	e7c1      	b.n	8006cdc <__sflush_r+0x1c>
 8006d58:	6a21      	ldr	r1, [r4, #32]
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	47b0      	blx	r6
 8006d60:	1c41      	adds	r1, r0, #1
 8006d62:	d1c7      	bne.n	8006cf4 <__sflush_r+0x34>
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0c4      	beq.n	8006cf4 <__sflush_r+0x34>
 8006d6a:	2b1d      	cmp	r3, #29
 8006d6c:	d001      	beq.n	8006d72 <__sflush_r+0xb2>
 8006d6e:	2b16      	cmp	r3, #22
 8006d70:	d101      	bne.n	8006d76 <__sflush_r+0xb6>
 8006d72:	602f      	str	r7, [r5, #0]
 8006d74:	e7b1      	b.n	8006cda <__sflush_r+0x1a>
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	e7ad      	b.n	8006cdc <__sflush_r+0x1c>
 8006d80:	690f      	ldr	r7, [r1, #16]
 8006d82:	2f00      	cmp	r7, #0
 8006d84:	d0a9      	beq.n	8006cda <__sflush_r+0x1a>
 8006d86:	0793      	lsls	r3, r2, #30
 8006d88:	680e      	ldr	r6, [r1, #0]
 8006d8a:	bf08      	it	eq
 8006d8c:	694b      	ldreq	r3, [r1, #20]
 8006d8e:	600f      	str	r7, [r1, #0]
 8006d90:	bf18      	it	ne
 8006d92:	2300      	movne	r3, #0
 8006d94:	eba6 0807 	sub.w	r8, r6, r7
 8006d98:	608b      	str	r3, [r1, #8]
 8006d9a:	f1b8 0f00 	cmp.w	r8, #0
 8006d9e:	dd9c      	ble.n	8006cda <__sflush_r+0x1a>
 8006da0:	6a21      	ldr	r1, [r4, #32]
 8006da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006da4:	4643      	mov	r3, r8
 8006da6:	463a      	mov	r2, r7
 8006da8:	4628      	mov	r0, r5
 8006daa:	47b0      	blx	r6
 8006dac:	2800      	cmp	r0, #0
 8006dae:	dc06      	bgt.n	8006dbe <__sflush_r+0xfe>
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	e78e      	b.n	8006cdc <__sflush_r+0x1c>
 8006dbe:	4407      	add	r7, r0
 8006dc0:	eba8 0800 	sub.w	r8, r8, r0
 8006dc4:	e7e9      	b.n	8006d9a <__sflush_r+0xda>
 8006dc6:	bf00      	nop
 8006dc8:	20400001 	.word	0x20400001

08006dcc <_fflush_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	690b      	ldr	r3, [r1, #16]
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	b913      	cbnz	r3, 8006ddc <_fflush_r+0x10>
 8006dd6:	2500      	movs	r5, #0
 8006dd8:	4628      	mov	r0, r5
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	b118      	cbz	r0, 8006de6 <_fflush_r+0x1a>
 8006dde:	6983      	ldr	r3, [r0, #24]
 8006de0:	b90b      	cbnz	r3, 8006de6 <_fflush_r+0x1a>
 8006de2:	f000 f887 	bl	8006ef4 <__sinit>
 8006de6:	4b14      	ldr	r3, [pc, #80]	; (8006e38 <_fflush_r+0x6c>)
 8006de8:	429c      	cmp	r4, r3
 8006dea:	d11b      	bne.n	8006e24 <_fflush_r+0x58>
 8006dec:	686c      	ldr	r4, [r5, #4]
 8006dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0ef      	beq.n	8006dd6 <_fflush_r+0xa>
 8006df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006df8:	07d0      	lsls	r0, r2, #31
 8006dfa:	d404      	bmi.n	8006e06 <_fflush_r+0x3a>
 8006dfc:	0599      	lsls	r1, r3, #22
 8006dfe:	d402      	bmi.n	8006e06 <_fflush_r+0x3a>
 8006e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e02:	f000 f915 	bl	8007030 <__retarget_lock_acquire_recursive>
 8006e06:	4628      	mov	r0, r5
 8006e08:	4621      	mov	r1, r4
 8006e0a:	f7ff ff59 	bl	8006cc0 <__sflush_r>
 8006e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e10:	07da      	lsls	r2, r3, #31
 8006e12:	4605      	mov	r5, r0
 8006e14:	d4e0      	bmi.n	8006dd8 <_fflush_r+0xc>
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	059b      	lsls	r3, r3, #22
 8006e1a:	d4dd      	bmi.n	8006dd8 <_fflush_r+0xc>
 8006e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e1e:	f000 f908 	bl	8007032 <__retarget_lock_release_recursive>
 8006e22:	e7d9      	b.n	8006dd8 <_fflush_r+0xc>
 8006e24:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <_fflush_r+0x70>)
 8006e26:	429c      	cmp	r4, r3
 8006e28:	d101      	bne.n	8006e2e <_fflush_r+0x62>
 8006e2a:	68ac      	ldr	r4, [r5, #8]
 8006e2c:	e7df      	b.n	8006dee <_fflush_r+0x22>
 8006e2e:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <_fflush_r+0x74>)
 8006e30:	429c      	cmp	r4, r3
 8006e32:	bf08      	it	eq
 8006e34:	68ec      	ldreq	r4, [r5, #12]
 8006e36:	e7da      	b.n	8006dee <_fflush_r+0x22>
 8006e38:	08008994 	.word	0x08008994
 8006e3c:	080089b4 	.word	0x080089b4
 8006e40:	08008974 	.word	0x08008974

08006e44 <std>:
 8006e44:	2300      	movs	r3, #0
 8006e46:	b510      	push	{r4, lr}
 8006e48:	4604      	mov	r4, r0
 8006e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e52:	6083      	str	r3, [r0, #8]
 8006e54:	8181      	strh	r1, [r0, #12]
 8006e56:	6643      	str	r3, [r0, #100]	; 0x64
 8006e58:	81c2      	strh	r2, [r0, #14]
 8006e5a:	6183      	str	r3, [r0, #24]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	2208      	movs	r2, #8
 8006e60:	305c      	adds	r0, #92	; 0x5c
 8006e62:	f7fd fba5 	bl	80045b0 <memset>
 8006e66:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <std+0x38>)
 8006e68:	6263      	str	r3, [r4, #36]	; 0x24
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <std+0x3c>)
 8006e6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <std+0x40>)
 8006e70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e72:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <std+0x44>)
 8006e74:	6224      	str	r4, [r4, #32]
 8006e76:	6323      	str	r3, [r4, #48]	; 0x30
 8006e78:	bd10      	pop	{r4, pc}
 8006e7a:	bf00      	nop
 8006e7c:	08007195 	.word	0x08007195
 8006e80:	080071b7 	.word	0x080071b7
 8006e84:	080071ef 	.word	0x080071ef
 8006e88:	08007213 	.word	0x08007213

08006e8c <_cleanup_r>:
 8006e8c:	4901      	ldr	r1, [pc, #4]	; (8006e94 <_cleanup_r+0x8>)
 8006e8e:	f000 b8af 	b.w	8006ff0 <_fwalk_reent>
 8006e92:	bf00      	nop
 8006e94:	08006dcd 	.word	0x08006dcd

08006e98 <__sfmoreglue>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	1e4a      	subs	r2, r1, #1
 8006e9c:	2568      	movs	r5, #104	; 0x68
 8006e9e:	4355      	muls	r5, r2
 8006ea0:	460e      	mov	r6, r1
 8006ea2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ea6:	f7ff fa87 	bl	80063b8 <_malloc_r>
 8006eaa:	4604      	mov	r4, r0
 8006eac:	b140      	cbz	r0, 8006ec0 <__sfmoreglue+0x28>
 8006eae:	2100      	movs	r1, #0
 8006eb0:	e9c0 1600 	strd	r1, r6, [r0]
 8006eb4:	300c      	adds	r0, #12
 8006eb6:	60a0      	str	r0, [r4, #8]
 8006eb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ebc:	f7fd fb78 	bl	80045b0 <memset>
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}

08006ec4 <__sfp_lock_acquire>:
 8006ec4:	4801      	ldr	r0, [pc, #4]	; (8006ecc <__sfp_lock_acquire+0x8>)
 8006ec6:	f000 b8b3 	b.w	8007030 <__retarget_lock_acquire_recursive>
 8006eca:	bf00      	nop
 8006ecc:	200002f0 	.word	0x200002f0

08006ed0 <__sfp_lock_release>:
 8006ed0:	4801      	ldr	r0, [pc, #4]	; (8006ed8 <__sfp_lock_release+0x8>)
 8006ed2:	f000 b8ae 	b.w	8007032 <__retarget_lock_release_recursive>
 8006ed6:	bf00      	nop
 8006ed8:	200002f0 	.word	0x200002f0

08006edc <__sinit_lock_acquire>:
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <__sinit_lock_acquire+0x8>)
 8006ede:	f000 b8a7 	b.w	8007030 <__retarget_lock_acquire_recursive>
 8006ee2:	bf00      	nop
 8006ee4:	200002eb 	.word	0x200002eb

08006ee8 <__sinit_lock_release>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__sinit_lock_release+0x8>)
 8006eea:	f000 b8a2 	b.w	8007032 <__retarget_lock_release_recursive>
 8006eee:	bf00      	nop
 8006ef0:	200002eb 	.word	0x200002eb

08006ef4 <__sinit>:
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	f7ff fff0 	bl	8006edc <__sinit_lock_acquire>
 8006efc:	69a3      	ldr	r3, [r4, #24]
 8006efe:	b11b      	cbz	r3, 8006f08 <__sinit+0x14>
 8006f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f04:	f7ff bff0 	b.w	8006ee8 <__sinit_lock_release>
 8006f08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f0c:	6523      	str	r3, [r4, #80]	; 0x50
 8006f0e:	4b13      	ldr	r3, [pc, #76]	; (8006f5c <__sinit+0x68>)
 8006f10:	4a13      	ldr	r2, [pc, #76]	; (8006f60 <__sinit+0x6c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f16:	42a3      	cmp	r3, r4
 8006f18:	bf04      	itt	eq
 8006f1a:	2301      	moveq	r3, #1
 8006f1c:	61a3      	streq	r3, [r4, #24]
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f000 f820 	bl	8006f64 <__sfp>
 8006f24:	6060      	str	r0, [r4, #4]
 8006f26:	4620      	mov	r0, r4
 8006f28:	f000 f81c 	bl	8006f64 <__sfp>
 8006f2c:	60a0      	str	r0, [r4, #8]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f000 f818 	bl	8006f64 <__sfp>
 8006f34:	2200      	movs	r2, #0
 8006f36:	60e0      	str	r0, [r4, #12]
 8006f38:	2104      	movs	r1, #4
 8006f3a:	6860      	ldr	r0, [r4, #4]
 8006f3c:	f7ff ff82 	bl	8006e44 <std>
 8006f40:	68a0      	ldr	r0, [r4, #8]
 8006f42:	2201      	movs	r2, #1
 8006f44:	2109      	movs	r1, #9
 8006f46:	f7ff ff7d 	bl	8006e44 <std>
 8006f4a:	68e0      	ldr	r0, [r4, #12]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	2112      	movs	r1, #18
 8006f50:	f7ff ff78 	bl	8006e44 <std>
 8006f54:	2301      	movs	r3, #1
 8006f56:	61a3      	str	r3, [r4, #24]
 8006f58:	e7d2      	b.n	8006f00 <__sinit+0xc>
 8006f5a:	bf00      	nop
 8006f5c:	080085f4 	.word	0x080085f4
 8006f60:	08006e8d 	.word	0x08006e8d

08006f64 <__sfp>:
 8006f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f66:	4607      	mov	r7, r0
 8006f68:	f7ff ffac 	bl	8006ec4 <__sfp_lock_acquire>
 8006f6c:	4b1e      	ldr	r3, [pc, #120]	; (8006fe8 <__sfp+0x84>)
 8006f6e:	681e      	ldr	r6, [r3, #0]
 8006f70:	69b3      	ldr	r3, [r6, #24]
 8006f72:	b913      	cbnz	r3, 8006f7a <__sfp+0x16>
 8006f74:	4630      	mov	r0, r6
 8006f76:	f7ff ffbd 	bl	8006ef4 <__sinit>
 8006f7a:	3648      	adds	r6, #72	; 0x48
 8006f7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	d503      	bpl.n	8006f8c <__sfp+0x28>
 8006f84:	6833      	ldr	r3, [r6, #0]
 8006f86:	b30b      	cbz	r3, 8006fcc <__sfp+0x68>
 8006f88:	6836      	ldr	r6, [r6, #0]
 8006f8a:	e7f7      	b.n	8006f7c <__sfp+0x18>
 8006f8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f90:	b9d5      	cbnz	r5, 8006fc8 <__sfp+0x64>
 8006f92:	4b16      	ldr	r3, [pc, #88]	; (8006fec <__sfp+0x88>)
 8006f94:	60e3      	str	r3, [r4, #12]
 8006f96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f9a:	6665      	str	r5, [r4, #100]	; 0x64
 8006f9c:	f000 f847 	bl	800702e <__retarget_lock_init_recursive>
 8006fa0:	f7ff ff96 	bl	8006ed0 <__sfp_lock_release>
 8006fa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fac:	6025      	str	r5, [r4, #0]
 8006fae:	61a5      	str	r5, [r4, #24]
 8006fb0:	2208      	movs	r2, #8
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fb8:	f7fd fafa 	bl	80045b0 <memset>
 8006fbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc8:	3468      	adds	r4, #104	; 0x68
 8006fca:	e7d9      	b.n	8006f80 <__sfp+0x1c>
 8006fcc:	2104      	movs	r1, #4
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f7ff ff62 	bl	8006e98 <__sfmoreglue>
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	6030      	str	r0, [r6, #0]
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d1d5      	bne.n	8006f88 <__sfp+0x24>
 8006fdc:	f7ff ff78 	bl	8006ed0 <__sfp_lock_release>
 8006fe0:	230c      	movs	r3, #12
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	e7ee      	b.n	8006fc4 <__sfp+0x60>
 8006fe6:	bf00      	nop
 8006fe8:	080085f4 	.word	0x080085f4
 8006fec:	ffff0001 	.word	0xffff0001

08006ff0 <_fwalk_reent>:
 8006ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	4688      	mov	r8, r1
 8006ff8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ffc:	2700      	movs	r7, #0
 8006ffe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007002:	f1b9 0901 	subs.w	r9, r9, #1
 8007006:	d505      	bpl.n	8007014 <_fwalk_reent+0x24>
 8007008:	6824      	ldr	r4, [r4, #0]
 800700a:	2c00      	cmp	r4, #0
 800700c:	d1f7      	bne.n	8006ffe <_fwalk_reent+0xe>
 800700e:	4638      	mov	r0, r7
 8007010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007014:	89ab      	ldrh	r3, [r5, #12]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d907      	bls.n	800702a <_fwalk_reent+0x3a>
 800701a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800701e:	3301      	adds	r3, #1
 8007020:	d003      	beq.n	800702a <_fwalk_reent+0x3a>
 8007022:	4629      	mov	r1, r5
 8007024:	4630      	mov	r0, r6
 8007026:	47c0      	blx	r8
 8007028:	4307      	orrs	r7, r0
 800702a:	3568      	adds	r5, #104	; 0x68
 800702c:	e7e9      	b.n	8007002 <_fwalk_reent+0x12>

0800702e <__retarget_lock_init_recursive>:
 800702e:	4770      	bx	lr

08007030 <__retarget_lock_acquire_recursive>:
 8007030:	4770      	bx	lr

08007032 <__retarget_lock_release_recursive>:
 8007032:	4770      	bx	lr

08007034 <__swhatbuf_r>:
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	460e      	mov	r6, r1
 8007038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703c:	2900      	cmp	r1, #0
 800703e:	b096      	sub	sp, #88	; 0x58
 8007040:	4614      	mov	r4, r2
 8007042:	461d      	mov	r5, r3
 8007044:	da07      	bge.n	8007056 <__swhatbuf_r+0x22>
 8007046:	2300      	movs	r3, #0
 8007048:	602b      	str	r3, [r5, #0]
 800704a:	89b3      	ldrh	r3, [r6, #12]
 800704c:	061a      	lsls	r2, r3, #24
 800704e:	d410      	bmi.n	8007072 <__swhatbuf_r+0x3e>
 8007050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007054:	e00e      	b.n	8007074 <__swhatbuf_r+0x40>
 8007056:	466a      	mov	r2, sp
 8007058:	f000 f902 	bl	8007260 <_fstat_r>
 800705c:	2800      	cmp	r0, #0
 800705e:	dbf2      	blt.n	8007046 <__swhatbuf_r+0x12>
 8007060:	9a01      	ldr	r2, [sp, #4]
 8007062:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007066:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800706a:	425a      	negs	r2, r3
 800706c:	415a      	adcs	r2, r3
 800706e:	602a      	str	r2, [r5, #0]
 8007070:	e7ee      	b.n	8007050 <__swhatbuf_r+0x1c>
 8007072:	2340      	movs	r3, #64	; 0x40
 8007074:	2000      	movs	r0, #0
 8007076:	6023      	str	r3, [r4, #0]
 8007078:	b016      	add	sp, #88	; 0x58
 800707a:	bd70      	pop	{r4, r5, r6, pc}

0800707c <__smakebuf_r>:
 800707c:	898b      	ldrh	r3, [r1, #12]
 800707e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007080:	079d      	lsls	r5, r3, #30
 8007082:	4606      	mov	r6, r0
 8007084:	460c      	mov	r4, r1
 8007086:	d507      	bpl.n	8007098 <__smakebuf_r+0x1c>
 8007088:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	6123      	str	r3, [r4, #16]
 8007090:	2301      	movs	r3, #1
 8007092:	6163      	str	r3, [r4, #20]
 8007094:	b002      	add	sp, #8
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	ab01      	add	r3, sp, #4
 800709a:	466a      	mov	r2, sp
 800709c:	f7ff ffca 	bl	8007034 <__swhatbuf_r>
 80070a0:	9900      	ldr	r1, [sp, #0]
 80070a2:	4605      	mov	r5, r0
 80070a4:	4630      	mov	r0, r6
 80070a6:	f7ff f987 	bl	80063b8 <_malloc_r>
 80070aa:	b948      	cbnz	r0, 80070c0 <__smakebuf_r+0x44>
 80070ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070b0:	059a      	lsls	r2, r3, #22
 80070b2:	d4ef      	bmi.n	8007094 <__smakebuf_r+0x18>
 80070b4:	f023 0303 	bic.w	r3, r3, #3
 80070b8:	f043 0302 	orr.w	r3, r3, #2
 80070bc:	81a3      	strh	r3, [r4, #12]
 80070be:	e7e3      	b.n	8007088 <__smakebuf_r+0xc>
 80070c0:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <__smakebuf_r+0x7c>)
 80070c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	6020      	str	r0, [r4, #0]
 80070c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070cc:	81a3      	strh	r3, [r4, #12]
 80070ce:	9b00      	ldr	r3, [sp, #0]
 80070d0:	6163      	str	r3, [r4, #20]
 80070d2:	9b01      	ldr	r3, [sp, #4]
 80070d4:	6120      	str	r0, [r4, #16]
 80070d6:	b15b      	cbz	r3, 80070f0 <__smakebuf_r+0x74>
 80070d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070dc:	4630      	mov	r0, r6
 80070de:	f000 f8d1 	bl	8007284 <_isatty_r>
 80070e2:	b128      	cbz	r0, 80070f0 <__smakebuf_r+0x74>
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	f023 0303 	bic.w	r3, r3, #3
 80070ea:	f043 0301 	orr.w	r3, r3, #1
 80070ee:	81a3      	strh	r3, [r4, #12]
 80070f0:	89a0      	ldrh	r0, [r4, #12]
 80070f2:	4305      	orrs	r5, r0
 80070f4:	81a5      	strh	r5, [r4, #12]
 80070f6:	e7cd      	b.n	8007094 <__smakebuf_r+0x18>
 80070f8:	08006e8d 	.word	0x08006e8d

080070fc <_malloc_usable_size_r>:
 80070fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007100:	1f18      	subs	r0, r3, #4
 8007102:	2b00      	cmp	r3, #0
 8007104:	bfbc      	itt	lt
 8007106:	580b      	ldrlt	r3, [r1, r0]
 8007108:	18c0      	addlt	r0, r0, r3
 800710a:	4770      	bx	lr

0800710c <_raise_r>:
 800710c:	291f      	cmp	r1, #31
 800710e:	b538      	push	{r3, r4, r5, lr}
 8007110:	4604      	mov	r4, r0
 8007112:	460d      	mov	r5, r1
 8007114:	d904      	bls.n	8007120 <_raise_r+0x14>
 8007116:	2316      	movs	r3, #22
 8007118:	6003      	str	r3, [r0, #0]
 800711a:	f04f 30ff 	mov.w	r0, #4294967295
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007122:	b112      	cbz	r2, 800712a <_raise_r+0x1e>
 8007124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007128:	b94b      	cbnz	r3, 800713e <_raise_r+0x32>
 800712a:	4620      	mov	r0, r4
 800712c:	f000 f830 	bl	8007190 <_getpid_r>
 8007130:	462a      	mov	r2, r5
 8007132:	4601      	mov	r1, r0
 8007134:	4620      	mov	r0, r4
 8007136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800713a:	f000 b817 	b.w	800716c <_kill_r>
 800713e:	2b01      	cmp	r3, #1
 8007140:	d00a      	beq.n	8007158 <_raise_r+0x4c>
 8007142:	1c59      	adds	r1, r3, #1
 8007144:	d103      	bne.n	800714e <_raise_r+0x42>
 8007146:	2316      	movs	r3, #22
 8007148:	6003      	str	r3, [r0, #0]
 800714a:	2001      	movs	r0, #1
 800714c:	e7e7      	b.n	800711e <_raise_r+0x12>
 800714e:	2400      	movs	r4, #0
 8007150:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007154:	4628      	mov	r0, r5
 8007156:	4798      	blx	r3
 8007158:	2000      	movs	r0, #0
 800715a:	e7e0      	b.n	800711e <_raise_r+0x12>

0800715c <raise>:
 800715c:	4b02      	ldr	r3, [pc, #8]	; (8007168 <raise+0xc>)
 800715e:	4601      	mov	r1, r0
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	f7ff bfd3 	b.w	800710c <_raise_r>
 8007166:	bf00      	nop
 8007168:	20000008 	.word	0x20000008

0800716c <_kill_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d07      	ldr	r5, [pc, #28]	; (800718c <_kill_r+0x20>)
 8007170:	2300      	movs	r3, #0
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	602b      	str	r3, [r5, #0]
 800717a:	f7fc fcbf 	bl	8003afc <_kill>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	d102      	bne.n	8007188 <_kill_r+0x1c>
 8007182:	682b      	ldr	r3, [r5, #0]
 8007184:	b103      	cbz	r3, 8007188 <_kill_r+0x1c>
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	bd38      	pop	{r3, r4, r5, pc}
 800718a:	bf00      	nop
 800718c:	200002e4 	.word	0x200002e4

08007190 <_getpid_r>:
 8007190:	f7fc bcac 	b.w	8003aec <_getpid>

08007194 <__sread>:
 8007194:	b510      	push	{r4, lr}
 8007196:	460c      	mov	r4, r1
 8007198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719c:	f000 f894 	bl	80072c8 <_read_r>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	bfab      	itete	ge
 80071a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071a6:	89a3      	ldrhlt	r3, [r4, #12]
 80071a8:	181b      	addge	r3, r3, r0
 80071aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071ae:	bfac      	ite	ge
 80071b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80071b2:	81a3      	strhlt	r3, [r4, #12]
 80071b4:	bd10      	pop	{r4, pc}

080071b6 <__swrite>:
 80071b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ba:	461f      	mov	r7, r3
 80071bc:	898b      	ldrh	r3, [r1, #12]
 80071be:	05db      	lsls	r3, r3, #23
 80071c0:	4605      	mov	r5, r0
 80071c2:	460c      	mov	r4, r1
 80071c4:	4616      	mov	r6, r2
 80071c6:	d505      	bpl.n	80071d4 <__swrite+0x1e>
 80071c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071cc:	2302      	movs	r3, #2
 80071ce:	2200      	movs	r2, #0
 80071d0:	f000 f868 	bl	80072a4 <_lseek_r>
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	4632      	mov	r2, r6
 80071e2:	463b      	mov	r3, r7
 80071e4:	4628      	mov	r0, r5
 80071e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ea:	f000 b817 	b.w	800721c <_write_r>

080071ee <__sseek>:
 80071ee:	b510      	push	{r4, lr}
 80071f0:	460c      	mov	r4, r1
 80071f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f6:	f000 f855 	bl	80072a4 <_lseek_r>
 80071fa:	1c43      	adds	r3, r0, #1
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	bf15      	itete	ne
 8007200:	6560      	strne	r0, [r4, #84]	; 0x54
 8007202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800720a:	81a3      	strheq	r3, [r4, #12]
 800720c:	bf18      	it	ne
 800720e:	81a3      	strhne	r3, [r4, #12]
 8007210:	bd10      	pop	{r4, pc}

08007212 <__sclose>:
 8007212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007216:	f000 b813 	b.w	8007240 <_close_r>
	...

0800721c <_write_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4d07      	ldr	r5, [pc, #28]	; (800723c <_write_r+0x20>)
 8007220:	4604      	mov	r4, r0
 8007222:	4608      	mov	r0, r1
 8007224:	4611      	mov	r1, r2
 8007226:	2200      	movs	r2, #0
 8007228:	602a      	str	r2, [r5, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	f7fc fc9d 	bl	8003b6a <_write>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_write_r+0x1e>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_write_r+0x1e>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	200002e4 	.word	0x200002e4

08007240 <_close_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4d06      	ldr	r5, [pc, #24]	; (800725c <_close_r+0x1c>)
 8007244:	2300      	movs	r3, #0
 8007246:	4604      	mov	r4, r0
 8007248:	4608      	mov	r0, r1
 800724a:	602b      	str	r3, [r5, #0]
 800724c:	f7fc fca9 	bl	8003ba2 <_close>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d102      	bne.n	800725a <_close_r+0x1a>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	b103      	cbz	r3, 800725a <_close_r+0x1a>
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	200002e4 	.word	0x200002e4

08007260 <_fstat_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4d07      	ldr	r5, [pc, #28]	; (8007280 <_fstat_r+0x20>)
 8007264:	2300      	movs	r3, #0
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	4611      	mov	r1, r2
 800726c:	602b      	str	r3, [r5, #0]
 800726e:	f7fc fca4 	bl	8003bba <_fstat>
 8007272:	1c43      	adds	r3, r0, #1
 8007274:	d102      	bne.n	800727c <_fstat_r+0x1c>
 8007276:	682b      	ldr	r3, [r5, #0]
 8007278:	b103      	cbz	r3, 800727c <_fstat_r+0x1c>
 800727a:	6023      	str	r3, [r4, #0]
 800727c:	bd38      	pop	{r3, r4, r5, pc}
 800727e:	bf00      	nop
 8007280:	200002e4 	.word	0x200002e4

08007284 <_isatty_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4d06      	ldr	r5, [pc, #24]	; (80072a0 <_isatty_r+0x1c>)
 8007288:	2300      	movs	r3, #0
 800728a:	4604      	mov	r4, r0
 800728c:	4608      	mov	r0, r1
 800728e:	602b      	str	r3, [r5, #0]
 8007290:	f7fc fca3 	bl	8003bda <_isatty>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_isatty_r+0x1a>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	b103      	cbz	r3, 800729e <_isatty_r+0x1a>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	200002e4 	.word	0x200002e4

080072a4 <_lseek_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4d07      	ldr	r5, [pc, #28]	; (80072c4 <_lseek_r+0x20>)
 80072a8:	4604      	mov	r4, r0
 80072aa:	4608      	mov	r0, r1
 80072ac:	4611      	mov	r1, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	602a      	str	r2, [r5, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	f7fc fc9c 	bl	8003bf0 <_lseek>
 80072b8:	1c43      	adds	r3, r0, #1
 80072ba:	d102      	bne.n	80072c2 <_lseek_r+0x1e>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	b103      	cbz	r3, 80072c2 <_lseek_r+0x1e>
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	200002e4 	.word	0x200002e4

080072c8 <_read_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4d07      	ldr	r5, [pc, #28]	; (80072e8 <_read_r+0x20>)
 80072cc:	4604      	mov	r4, r0
 80072ce:	4608      	mov	r0, r1
 80072d0:	4611      	mov	r1, r2
 80072d2:	2200      	movs	r2, #0
 80072d4:	602a      	str	r2, [r5, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f7fc fc2a 	bl	8003b30 <_read>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_read_r+0x1e>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_read_r+0x1e>
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	200002e4 	.word	0x200002e4

080072ec <pow>:
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	ec59 8b10 	vmov	r8, r9, d0
 80072f4:	ec57 6b11 	vmov	r6, r7, d1
 80072f8:	f000 f8a6 	bl	8007448 <__ieee754_pow>
 80072fc:	4b4e      	ldr	r3, [pc, #312]	; (8007438 <pow+0x14c>)
 80072fe:	f993 3000 	ldrsb.w	r3, [r3]
 8007302:	3301      	adds	r3, #1
 8007304:	ec55 4b10 	vmov	r4, r5, d0
 8007308:	d015      	beq.n	8007336 <pow+0x4a>
 800730a:	4632      	mov	r2, r6
 800730c:	463b      	mov	r3, r7
 800730e:	4630      	mov	r0, r6
 8007310:	4639      	mov	r1, r7
 8007312:	f7f9 fc0b 	bl	8000b2c <__aeabi_dcmpun>
 8007316:	b970      	cbnz	r0, 8007336 <pow+0x4a>
 8007318:	4642      	mov	r2, r8
 800731a:	464b      	mov	r3, r9
 800731c:	4640      	mov	r0, r8
 800731e:	4649      	mov	r1, r9
 8007320:	f7f9 fc04 	bl	8000b2c <__aeabi_dcmpun>
 8007324:	2200      	movs	r2, #0
 8007326:	2300      	movs	r3, #0
 8007328:	b148      	cbz	r0, 800733e <pow+0x52>
 800732a:	4630      	mov	r0, r6
 800732c:	4639      	mov	r1, r7
 800732e:	f7f9 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007332:	2800      	cmp	r0, #0
 8007334:	d17d      	bne.n	8007432 <pow+0x146>
 8007336:	ec45 4b10 	vmov	d0, r4, r5
 800733a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800733e:	4640      	mov	r0, r8
 8007340:	4649      	mov	r1, r9
 8007342:	f7f9 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007346:	b1e0      	cbz	r0, 8007382 <pow+0x96>
 8007348:	2200      	movs	r2, #0
 800734a:	2300      	movs	r3, #0
 800734c:	4630      	mov	r0, r6
 800734e:	4639      	mov	r1, r7
 8007350:	f7f9 fbba 	bl	8000ac8 <__aeabi_dcmpeq>
 8007354:	2800      	cmp	r0, #0
 8007356:	d16c      	bne.n	8007432 <pow+0x146>
 8007358:	ec47 6b10 	vmov	d0, r6, r7
 800735c:	f000 fe53 	bl	8008006 <finite>
 8007360:	2800      	cmp	r0, #0
 8007362:	d0e8      	beq.n	8007336 <pow+0x4a>
 8007364:	2200      	movs	r2, #0
 8007366:	2300      	movs	r3, #0
 8007368:	4630      	mov	r0, r6
 800736a:	4639      	mov	r1, r7
 800736c:	f7f9 fbb6 	bl	8000adc <__aeabi_dcmplt>
 8007370:	2800      	cmp	r0, #0
 8007372:	d0e0      	beq.n	8007336 <pow+0x4a>
 8007374:	f7fd f8f2 	bl	800455c <__errno>
 8007378:	2321      	movs	r3, #33	; 0x21
 800737a:	6003      	str	r3, [r0, #0]
 800737c:	2400      	movs	r4, #0
 800737e:	4d2f      	ldr	r5, [pc, #188]	; (800743c <pow+0x150>)
 8007380:	e7d9      	b.n	8007336 <pow+0x4a>
 8007382:	ec45 4b10 	vmov	d0, r4, r5
 8007386:	f000 fe3e 	bl	8008006 <finite>
 800738a:	bbb8      	cbnz	r0, 80073fc <pow+0x110>
 800738c:	ec49 8b10 	vmov	d0, r8, r9
 8007390:	f000 fe39 	bl	8008006 <finite>
 8007394:	b390      	cbz	r0, 80073fc <pow+0x110>
 8007396:	ec47 6b10 	vmov	d0, r6, r7
 800739a:	f000 fe34 	bl	8008006 <finite>
 800739e:	b368      	cbz	r0, 80073fc <pow+0x110>
 80073a0:	4622      	mov	r2, r4
 80073a2:	462b      	mov	r3, r5
 80073a4:	4620      	mov	r0, r4
 80073a6:	4629      	mov	r1, r5
 80073a8:	f7f9 fbc0 	bl	8000b2c <__aeabi_dcmpun>
 80073ac:	b160      	cbz	r0, 80073c8 <pow+0xdc>
 80073ae:	f7fd f8d5 	bl	800455c <__errno>
 80073b2:	2321      	movs	r3, #33	; 0x21
 80073b4:	6003      	str	r3, [r0, #0]
 80073b6:	2200      	movs	r2, #0
 80073b8:	2300      	movs	r3, #0
 80073ba:	4610      	mov	r0, r2
 80073bc:	4619      	mov	r1, r3
 80073be:	f7f9 fa45 	bl	800084c <__aeabi_ddiv>
 80073c2:	4604      	mov	r4, r0
 80073c4:	460d      	mov	r5, r1
 80073c6:	e7b6      	b.n	8007336 <pow+0x4a>
 80073c8:	f7fd f8c8 	bl	800455c <__errno>
 80073cc:	2322      	movs	r3, #34	; 0x22
 80073ce:	6003      	str	r3, [r0, #0]
 80073d0:	2200      	movs	r2, #0
 80073d2:	2300      	movs	r3, #0
 80073d4:	4640      	mov	r0, r8
 80073d6:	4649      	mov	r1, r9
 80073d8:	f7f9 fb80 	bl	8000adc <__aeabi_dcmplt>
 80073dc:	2400      	movs	r4, #0
 80073de:	b158      	cbz	r0, 80073f8 <pow+0x10c>
 80073e0:	ec47 6b10 	vmov	d0, r6, r7
 80073e4:	f000 fe24 	bl	8008030 <rint>
 80073e8:	4632      	mov	r2, r6
 80073ea:	ec51 0b10 	vmov	r0, r1, d0
 80073ee:	463b      	mov	r3, r7
 80073f0:	f7f9 fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d0c2      	beq.n	800737e <pow+0x92>
 80073f8:	4d11      	ldr	r5, [pc, #68]	; (8007440 <pow+0x154>)
 80073fa:	e79c      	b.n	8007336 <pow+0x4a>
 80073fc:	2200      	movs	r2, #0
 80073fe:	2300      	movs	r3, #0
 8007400:	4620      	mov	r0, r4
 8007402:	4629      	mov	r1, r5
 8007404:	f7f9 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 8007408:	2800      	cmp	r0, #0
 800740a:	d094      	beq.n	8007336 <pow+0x4a>
 800740c:	ec49 8b10 	vmov	d0, r8, r9
 8007410:	f000 fdf9 	bl	8008006 <finite>
 8007414:	2800      	cmp	r0, #0
 8007416:	d08e      	beq.n	8007336 <pow+0x4a>
 8007418:	ec47 6b10 	vmov	d0, r6, r7
 800741c:	f000 fdf3 	bl	8008006 <finite>
 8007420:	2800      	cmp	r0, #0
 8007422:	d088      	beq.n	8007336 <pow+0x4a>
 8007424:	f7fd f89a 	bl	800455c <__errno>
 8007428:	2322      	movs	r3, #34	; 0x22
 800742a:	6003      	str	r3, [r0, #0]
 800742c:	2400      	movs	r4, #0
 800742e:	2500      	movs	r5, #0
 8007430:	e781      	b.n	8007336 <pow+0x4a>
 8007432:	4d04      	ldr	r5, [pc, #16]	; (8007444 <pow+0x158>)
 8007434:	2400      	movs	r4, #0
 8007436:	e77e      	b.n	8007336 <pow+0x4a>
 8007438:	200001d8 	.word	0x200001d8
 800743c:	fff00000 	.word	0xfff00000
 8007440:	7ff00000 	.word	0x7ff00000
 8007444:	3ff00000 	.word	0x3ff00000

08007448 <__ieee754_pow>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	ed2d 8b06 	vpush	{d8-d10}
 8007450:	b08d      	sub	sp, #52	; 0x34
 8007452:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007456:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800745a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800745e:	ea56 0100 	orrs.w	r1, r6, r0
 8007462:	ec53 2b10 	vmov	r2, r3, d0
 8007466:	f000 84d1 	beq.w	8007e0c <__ieee754_pow+0x9c4>
 800746a:	497f      	ldr	r1, [pc, #508]	; (8007668 <__ieee754_pow+0x220>)
 800746c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007470:	428c      	cmp	r4, r1
 8007472:	ee10 8a10 	vmov	r8, s0
 8007476:	4699      	mov	r9, r3
 8007478:	dc09      	bgt.n	800748e <__ieee754_pow+0x46>
 800747a:	d103      	bne.n	8007484 <__ieee754_pow+0x3c>
 800747c:	b97a      	cbnz	r2, 800749e <__ieee754_pow+0x56>
 800747e:	42a6      	cmp	r6, r4
 8007480:	dd02      	ble.n	8007488 <__ieee754_pow+0x40>
 8007482:	e00c      	b.n	800749e <__ieee754_pow+0x56>
 8007484:	428e      	cmp	r6, r1
 8007486:	dc02      	bgt.n	800748e <__ieee754_pow+0x46>
 8007488:	428e      	cmp	r6, r1
 800748a:	d110      	bne.n	80074ae <__ieee754_pow+0x66>
 800748c:	b178      	cbz	r0, 80074ae <__ieee754_pow+0x66>
 800748e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007492:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007496:	ea54 0308 	orrs.w	r3, r4, r8
 800749a:	f000 84b7 	beq.w	8007e0c <__ieee754_pow+0x9c4>
 800749e:	4873      	ldr	r0, [pc, #460]	; (800766c <__ieee754_pow+0x224>)
 80074a0:	b00d      	add	sp, #52	; 0x34
 80074a2:	ecbd 8b06 	vpop	{d8-d10}
 80074a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074aa:	f000 bdb9 	b.w	8008020 <nan>
 80074ae:	f1b9 0f00 	cmp.w	r9, #0
 80074b2:	da36      	bge.n	8007522 <__ieee754_pow+0xda>
 80074b4:	496e      	ldr	r1, [pc, #440]	; (8007670 <__ieee754_pow+0x228>)
 80074b6:	428e      	cmp	r6, r1
 80074b8:	dc51      	bgt.n	800755e <__ieee754_pow+0x116>
 80074ba:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80074be:	428e      	cmp	r6, r1
 80074c0:	f340 84af 	ble.w	8007e22 <__ieee754_pow+0x9da>
 80074c4:	1531      	asrs	r1, r6, #20
 80074c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80074ca:	2914      	cmp	r1, #20
 80074cc:	dd0f      	ble.n	80074ee <__ieee754_pow+0xa6>
 80074ce:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80074d2:	fa20 fc01 	lsr.w	ip, r0, r1
 80074d6:	fa0c f101 	lsl.w	r1, ip, r1
 80074da:	4281      	cmp	r1, r0
 80074dc:	f040 84a1 	bne.w	8007e22 <__ieee754_pow+0x9da>
 80074e0:	f00c 0c01 	and.w	ip, ip, #1
 80074e4:	f1cc 0102 	rsb	r1, ip, #2
 80074e8:	9100      	str	r1, [sp, #0]
 80074ea:	b180      	cbz	r0, 800750e <__ieee754_pow+0xc6>
 80074ec:	e059      	b.n	80075a2 <__ieee754_pow+0x15a>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d155      	bne.n	800759e <__ieee754_pow+0x156>
 80074f2:	f1c1 0114 	rsb	r1, r1, #20
 80074f6:	fa46 fc01 	asr.w	ip, r6, r1
 80074fa:	fa0c f101 	lsl.w	r1, ip, r1
 80074fe:	42b1      	cmp	r1, r6
 8007500:	f040 848c 	bne.w	8007e1c <__ieee754_pow+0x9d4>
 8007504:	f00c 0c01 	and.w	ip, ip, #1
 8007508:	f1cc 0102 	rsb	r1, ip, #2
 800750c:	9100      	str	r1, [sp, #0]
 800750e:	4959      	ldr	r1, [pc, #356]	; (8007674 <__ieee754_pow+0x22c>)
 8007510:	428e      	cmp	r6, r1
 8007512:	d12d      	bne.n	8007570 <__ieee754_pow+0x128>
 8007514:	2f00      	cmp	r7, #0
 8007516:	da79      	bge.n	800760c <__ieee754_pow+0x1c4>
 8007518:	4956      	ldr	r1, [pc, #344]	; (8007674 <__ieee754_pow+0x22c>)
 800751a:	2000      	movs	r0, #0
 800751c:	f7f9 f996 	bl	800084c <__aeabi_ddiv>
 8007520:	e016      	b.n	8007550 <__ieee754_pow+0x108>
 8007522:	2100      	movs	r1, #0
 8007524:	9100      	str	r1, [sp, #0]
 8007526:	2800      	cmp	r0, #0
 8007528:	d13b      	bne.n	80075a2 <__ieee754_pow+0x15a>
 800752a:	494f      	ldr	r1, [pc, #316]	; (8007668 <__ieee754_pow+0x220>)
 800752c:	428e      	cmp	r6, r1
 800752e:	d1ee      	bne.n	800750e <__ieee754_pow+0xc6>
 8007530:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007534:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007538:	ea53 0308 	orrs.w	r3, r3, r8
 800753c:	f000 8466 	beq.w	8007e0c <__ieee754_pow+0x9c4>
 8007540:	4b4d      	ldr	r3, [pc, #308]	; (8007678 <__ieee754_pow+0x230>)
 8007542:	429c      	cmp	r4, r3
 8007544:	dd0d      	ble.n	8007562 <__ieee754_pow+0x11a>
 8007546:	2f00      	cmp	r7, #0
 8007548:	f280 8464 	bge.w	8007e14 <__ieee754_pow+0x9cc>
 800754c:	2000      	movs	r0, #0
 800754e:	2100      	movs	r1, #0
 8007550:	ec41 0b10 	vmov	d0, r0, r1
 8007554:	b00d      	add	sp, #52	; 0x34
 8007556:	ecbd 8b06 	vpop	{d8-d10}
 800755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755e:	2102      	movs	r1, #2
 8007560:	e7e0      	b.n	8007524 <__ieee754_pow+0xdc>
 8007562:	2f00      	cmp	r7, #0
 8007564:	daf2      	bge.n	800754c <__ieee754_pow+0x104>
 8007566:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800756a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800756e:	e7ef      	b.n	8007550 <__ieee754_pow+0x108>
 8007570:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007574:	d104      	bne.n	8007580 <__ieee754_pow+0x138>
 8007576:	4610      	mov	r0, r2
 8007578:	4619      	mov	r1, r3
 800757a:	f7f9 f83d 	bl	80005f8 <__aeabi_dmul>
 800757e:	e7e7      	b.n	8007550 <__ieee754_pow+0x108>
 8007580:	493e      	ldr	r1, [pc, #248]	; (800767c <__ieee754_pow+0x234>)
 8007582:	428f      	cmp	r7, r1
 8007584:	d10d      	bne.n	80075a2 <__ieee754_pow+0x15a>
 8007586:	f1b9 0f00 	cmp.w	r9, #0
 800758a:	db0a      	blt.n	80075a2 <__ieee754_pow+0x15a>
 800758c:	ec43 2b10 	vmov	d0, r2, r3
 8007590:	b00d      	add	sp, #52	; 0x34
 8007592:	ecbd 8b06 	vpop	{d8-d10}
 8007596:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759a:	f000 bc77 	b.w	8007e8c <__ieee754_sqrt>
 800759e:	2100      	movs	r1, #0
 80075a0:	9100      	str	r1, [sp, #0]
 80075a2:	ec43 2b10 	vmov	d0, r2, r3
 80075a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075aa:	f000 fd23 	bl	8007ff4 <fabs>
 80075ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075b2:	ec51 0b10 	vmov	r0, r1, d0
 80075b6:	f1b8 0f00 	cmp.w	r8, #0
 80075ba:	d12a      	bne.n	8007612 <__ieee754_pow+0x1ca>
 80075bc:	b12c      	cbz	r4, 80075ca <__ieee754_pow+0x182>
 80075be:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8007674 <__ieee754_pow+0x22c>
 80075c2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80075c6:	45e6      	cmp	lr, ip
 80075c8:	d123      	bne.n	8007612 <__ieee754_pow+0x1ca>
 80075ca:	2f00      	cmp	r7, #0
 80075cc:	da05      	bge.n	80075da <__ieee754_pow+0x192>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	2000      	movs	r0, #0
 80075d4:	4927      	ldr	r1, [pc, #156]	; (8007674 <__ieee754_pow+0x22c>)
 80075d6:	f7f9 f939 	bl	800084c <__aeabi_ddiv>
 80075da:	f1b9 0f00 	cmp.w	r9, #0
 80075de:	dab7      	bge.n	8007550 <__ieee754_pow+0x108>
 80075e0:	9b00      	ldr	r3, [sp, #0]
 80075e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80075e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80075ea:	4323      	orrs	r3, r4
 80075ec:	d108      	bne.n	8007600 <__ieee754_pow+0x1b8>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	4610      	mov	r0, r2
 80075f4:	4619      	mov	r1, r3
 80075f6:	f7f8 fe47 	bl	8000288 <__aeabi_dsub>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	e78d      	b.n	800751c <__ieee754_pow+0xd4>
 8007600:	9b00      	ldr	r3, [sp, #0]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d1a4      	bne.n	8007550 <__ieee754_pow+0x108>
 8007606:	4602      	mov	r2, r0
 8007608:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800760c:	4610      	mov	r0, r2
 800760e:	4619      	mov	r1, r3
 8007610:	e79e      	b.n	8007550 <__ieee754_pow+0x108>
 8007612:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8007616:	f10c 35ff 	add.w	r5, ip, #4294967295
 800761a:	950a      	str	r5, [sp, #40]	; 0x28
 800761c:	9d00      	ldr	r5, [sp, #0]
 800761e:	46ac      	mov	ip, r5
 8007620:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007622:	ea5c 0505 	orrs.w	r5, ip, r5
 8007626:	d0e4      	beq.n	80075f2 <__ieee754_pow+0x1aa>
 8007628:	4b15      	ldr	r3, [pc, #84]	; (8007680 <__ieee754_pow+0x238>)
 800762a:	429e      	cmp	r6, r3
 800762c:	f340 80fc 	ble.w	8007828 <__ieee754_pow+0x3e0>
 8007630:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007634:	429e      	cmp	r6, r3
 8007636:	4b10      	ldr	r3, [pc, #64]	; (8007678 <__ieee754_pow+0x230>)
 8007638:	dd07      	ble.n	800764a <__ieee754_pow+0x202>
 800763a:	429c      	cmp	r4, r3
 800763c:	dc0a      	bgt.n	8007654 <__ieee754_pow+0x20c>
 800763e:	2f00      	cmp	r7, #0
 8007640:	da84      	bge.n	800754c <__ieee754_pow+0x104>
 8007642:	a307      	add	r3, pc, #28	; (adr r3, 8007660 <__ieee754_pow+0x218>)
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	e795      	b.n	8007576 <__ieee754_pow+0x12e>
 800764a:	429c      	cmp	r4, r3
 800764c:	dbf7      	blt.n	800763e <__ieee754_pow+0x1f6>
 800764e:	4b09      	ldr	r3, [pc, #36]	; (8007674 <__ieee754_pow+0x22c>)
 8007650:	429c      	cmp	r4, r3
 8007652:	dd17      	ble.n	8007684 <__ieee754_pow+0x23c>
 8007654:	2f00      	cmp	r7, #0
 8007656:	dcf4      	bgt.n	8007642 <__ieee754_pow+0x1fa>
 8007658:	e778      	b.n	800754c <__ieee754_pow+0x104>
 800765a:	bf00      	nop
 800765c:	f3af 8000 	nop.w
 8007660:	8800759c 	.word	0x8800759c
 8007664:	7e37e43c 	.word	0x7e37e43c
 8007668:	7ff00000 	.word	0x7ff00000
 800766c:	08008868 	.word	0x08008868
 8007670:	433fffff 	.word	0x433fffff
 8007674:	3ff00000 	.word	0x3ff00000
 8007678:	3fefffff 	.word	0x3fefffff
 800767c:	3fe00000 	.word	0x3fe00000
 8007680:	41e00000 	.word	0x41e00000
 8007684:	4b64      	ldr	r3, [pc, #400]	; (8007818 <__ieee754_pow+0x3d0>)
 8007686:	2200      	movs	r2, #0
 8007688:	f7f8 fdfe 	bl	8000288 <__aeabi_dsub>
 800768c:	a356      	add	r3, pc, #344	; (adr r3, 80077e8 <__ieee754_pow+0x3a0>)
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	4604      	mov	r4, r0
 8007694:	460d      	mov	r5, r1
 8007696:	f7f8 ffaf 	bl	80005f8 <__aeabi_dmul>
 800769a:	a355      	add	r3, pc, #340	; (adr r3, 80077f0 <__ieee754_pow+0x3a8>)
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	4606      	mov	r6, r0
 80076a2:	460f      	mov	r7, r1
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f7f8 ffa6 	bl	80005f8 <__aeabi_dmul>
 80076ac:	4b5b      	ldr	r3, [pc, #364]	; (800781c <__ieee754_pow+0x3d4>)
 80076ae:	4682      	mov	sl, r0
 80076b0:	468b      	mov	fp, r1
 80076b2:	2200      	movs	r2, #0
 80076b4:	4620      	mov	r0, r4
 80076b6:	4629      	mov	r1, r5
 80076b8:	f7f8 ff9e 	bl	80005f8 <__aeabi_dmul>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	a14d      	add	r1, pc, #308	; (adr r1, 80077f8 <__ieee754_pow+0x3b0>)
 80076c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076c6:	f7f8 fddf 	bl	8000288 <__aeabi_dsub>
 80076ca:	4622      	mov	r2, r4
 80076cc:	462b      	mov	r3, r5
 80076ce:	f7f8 ff93 	bl	80005f8 <__aeabi_dmul>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	2000      	movs	r0, #0
 80076d8:	4951      	ldr	r1, [pc, #324]	; (8007820 <__ieee754_pow+0x3d8>)
 80076da:	f7f8 fdd5 	bl	8000288 <__aeabi_dsub>
 80076de:	4622      	mov	r2, r4
 80076e0:	4680      	mov	r8, r0
 80076e2:	4689      	mov	r9, r1
 80076e4:	462b      	mov	r3, r5
 80076e6:	4620      	mov	r0, r4
 80076e8:	4629      	mov	r1, r5
 80076ea:	f7f8 ff85 	bl	80005f8 <__aeabi_dmul>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4640      	mov	r0, r8
 80076f4:	4649      	mov	r1, r9
 80076f6:	f7f8 ff7f 	bl	80005f8 <__aeabi_dmul>
 80076fa:	a341      	add	r3, pc, #260	; (adr r3, 8007800 <__ieee754_pow+0x3b8>)
 80076fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007700:	f7f8 ff7a 	bl	80005f8 <__aeabi_dmul>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4650      	mov	r0, sl
 800770a:	4659      	mov	r1, fp
 800770c:	f7f8 fdbc 	bl	8000288 <__aeabi_dsub>
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	4680      	mov	r8, r0
 8007716:	4689      	mov	r9, r1
 8007718:	4630      	mov	r0, r6
 800771a:	4639      	mov	r1, r7
 800771c:	f7f8 fdb6 	bl	800028c <__adddf3>
 8007720:	2400      	movs	r4, #0
 8007722:	4632      	mov	r2, r6
 8007724:	463b      	mov	r3, r7
 8007726:	4620      	mov	r0, r4
 8007728:	460d      	mov	r5, r1
 800772a:	f7f8 fdad 	bl	8000288 <__aeabi_dsub>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4640      	mov	r0, r8
 8007734:	4649      	mov	r1, r9
 8007736:	f7f8 fda7 	bl	8000288 <__aeabi_dsub>
 800773a:	9b00      	ldr	r3, [sp, #0]
 800773c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800773e:	3b01      	subs	r3, #1
 8007740:	4313      	orrs	r3, r2
 8007742:	4682      	mov	sl, r0
 8007744:	468b      	mov	fp, r1
 8007746:	f040 81f1 	bne.w	8007b2c <__ieee754_pow+0x6e4>
 800774a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007808 <__ieee754_pow+0x3c0>
 800774e:	eeb0 8a47 	vmov.f32	s16, s14
 8007752:	eef0 8a67 	vmov.f32	s17, s15
 8007756:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800775a:	2600      	movs	r6, #0
 800775c:	4632      	mov	r2, r6
 800775e:	463b      	mov	r3, r7
 8007760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007764:	f7f8 fd90 	bl	8000288 <__aeabi_dsub>
 8007768:	4622      	mov	r2, r4
 800776a:	462b      	mov	r3, r5
 800776c:	f7f8 ff44 	bl	80005f8 <__aeabi_dmul>
 8007770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007774:	4680      	mov	r8, r0
 8007776:	4689      	mov	r9, r1
 8007778:	4650      	mov	r0, sl
 800777a:	4659      	mov	r1, fp
 800777c:	f7f8 ff3c 	bl	80005f8 <__aeabi_dmul>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4640      	mov	r0, r8
 8007786:	4649      	mov	r1, r9
 8007788:	f7f8 fd80 	bl	800028c <__adddf3>
 800778c:	4632      	mov	r2, r6
 800778e:	463b      	mov	r3, r7
 8007790:	4680      	mov	r8, r0
 8007792:	4689      	mov	r9, r1
 8007794:	4620      	mov	r0, r4
 8007796:	4629      	mov	r1, r5
 8007798:	f7f8 ff2e 	bl	80005f8 <__aeabi_dmul>
 800779c:	460b      	mov	r3, r1
 800779e:	4604      	mov	r4, r0
 80077a0:	460d      	mov	r5, r1
 80077a2:	4602      	mov	r2, r0
 80077a4:	4649      	mov	r1, r9
 80077a6:	4640      	mov	r0, r8
 80077a8:	f7f8 fd70 	bl	800028c <__adddf3>
 80077ac:	4b1d      	ldr	r3, [pc, #116]	; (8007824 <__ieee754_pow+0x3dc>)
 80077ae:	4299      	cmp	r1, r3
 80077b0:	ec45 4b19 	vmov	d9, r4, r5
 80077b4:	4606      	mov	r6, r0
 80077b6:	460f      	mov	r7, r1
 80077b8:	468b      	mov	fp, r1
 80077ba:	f340 82fe 	ble.w	8007dba <__ieee754_pow+0x972>
 80077be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80077c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80077c6:	4303      	orrs	r3, r0
 80077c8:	f000 81f0 	beq.w	8007bac <__ieee754_pow+0x764>
 80077cc:	a310      	add	r3, pc, #64	; (adr r3, 8007810 <__ieee754_pow+0x3c8>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	ec51 0b18 	vmov	r0, r1, d8
 80077d6:	f7f8 ff0f 	bl	80005f8 <__aeabi_dmul>
 80077da:	a30d      	add	r3, pc, #52	; (adr r3, 8007810 <__ieee754_pow+0x3c8>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	e6cb      	b.n	800757a <__ieee754_pow+0x132>
 80077e2:	bf00      	nop
 80077e4:	f3af 8000 	nop.w
 80077e8:	60000000 	.word	0x60000000
 80077ec:	3ff71547 	.word	0x3ff71547
 80077f0:	f85ddf44 	.word	0xf85ddf44
 80077f4:	3e54ae0b 	.word	0x3e54ae0b
 80077f8:	55555555 	.word	0x55555555
 80077fc:	3fd55555 	.word	0x3fd55555
 8007800:	652b82fe 	.word	0x652b82fe
 8007804:	3ff71547 	.word	0x3ff71547
 8007808:	00000000 	.word	0x00000000
 800780c:	bff00000 	.word	0xbff00000
 8007810:	8800759c 	.word	0x8800759c
 8007814:	7e37e43c 	.word	0x7e37e43c
 8007818:	3ff00000 	.word	0x3ff00000
 800781c:	3fd00000 	.word	0x3fd00000
 8007820:	3fe00000 	.word	0x3fe00000
 8007824:	408fffff 	.word	0x408fffff
 8007828:	4bd7      	ldr	r3, [pc, #860]	; (8007b88 <__ieee754_pow+0x740>)
 800782a:	ea03 0309 	and.w	r3, r3, r9
 800782e:	2200      	movs	r2, #0
 8007830:	b92b      	cbnz	r3, 800783e <__ieee754_pow+0x3f6>
 8007832:	4bd6      	ldr	r3, [pc, #856]	; (8007b8c <__ieee754_pow+0x744>)
 8007834:	f7f8 fee0 	bl	80005f8 <__aeabi_dmul>
 8007838:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800783c:	460c      	mov	r4, r1
 800783e:	1523      	asrs	r3, r4, #20
 8007840:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007844:	4413      	add	r3, r2
 8007846:	9309      	str	r3, [sp, #36]	; 0x24
 8007848:	4bd1      	ldr	r3, [pc, #836]	; (8007b90 <__ieee754_pow+0x748>)
 800784a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800784e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007852:	429c      	cmp	r4, r3
 8007854:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007858:	dd08      	ble.n	800786c <__ieee754_pow+0x424>
 800785a:	4bce      	ldr	r3, [pc, #824]	; (8007b94 <__ieee754_pow+0x74c>)
 800785c:	429c      	cmp	r4, r3
 800785e:	f340 8163 	ble.w	8007b28 <__ieee754_pow+0x6e0>
 8007862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007864:	3301      	adds	r3, #1
 8007866:	9309      	str	r3, [sp, #36]	; 0x24
 8007868:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800786c:	2400      	movs	r4, #0
 800786e:	00e3      	lsls	r3, r4, #3
 8007870:	930b      	str	r3, [sp, #44]	; 0x2c
 8007872:	4bc9      	ldr	r3, [pc, #804]	; (8007b98 <__ieee754_pow+0x750>)
 8007874:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007878:	ed93 7b00 	vldr	d7, [r3]
 800787c:	4629      	mov	r1, r5
 800787e:	ec53 2b17 	vmov	r2, r3, d7
 8007882:	eeb0 8a47 	vmov.f32	s16, s14
 8007886:	eef0 8a67 	vmov.f32	s17, s15
 800788a:	4682      	mov	sl, r0
 800788c:	f7f8 fcfc 	bl	8000288 <__aeabi_dsub>
 8007890:	4652      	mov	r2, sl
 8007892:	4606      	mov	r6, r0
 8007894:	460f      	mov	r7, r1
 8007896:	462b      	mov	r3, r5
 8007898:	ec51 0b18 	vmov	r0, r1, d8
 800789c:	f7f8 fcf6 	bl	800028c <__adddf3>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	2000      	movs	r0, #0
 80078a6:	49bd      	ldr	r1, [pc, #756]	; (8007b9c <__ieee754_pow+0x754>)
 80078a8:	f7f8 ffd0 	bl	800084c <__aeabi_ddiv>
 80078ac:	ec41 0b19 	vmov	d9, r0, r1
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4630      	mov	r0, r6
 80078b6:	4639      	mov	r1, r7
 80078b8:	f7f8 fe9e 	bl	80005f8 <__aeabi_dmul>
 80078bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80078c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078c8:	2300      	movs	r3, #0
 80078ca:	9304      	str	r3, [sp, #16]
 80078cc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80078d0:	46ab      	mov	fp, r5
 80078d2:	106d      	asrs	r5, r5, #1
 80078d4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80078d8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80078dc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80078e0:	2200      	movs	r2, #0
 80078e2:	4640      	mov	r0, r8
 80078e4:	4649      	mov	r1, r9
 80078e6:	4614      	mov	r4, r2
 80078e8:	461d      	mov	r5, r3
 80078ea:	f7f8 fe85 	bl	80005f8 <__aeabi_dmul>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4630      	mov	r0, r6
 80078f4:	4639      	mov	r1, r7
 80078f6:	f7f8 fcc7 	bl	8000288 <__aeabi_dsub>
 80078fa:	ec53 2b18 	vmov	r2, r3, d8
 80078fe:	4606      	mov	r6, r0
 8007900:	460f      	mov	r7, r1
 8007902:	4620      	mov	r0, r4
 8007904:	4629      	mov	r1, r5
 8007906:	f7f8 fcbf 	bl	8000288 <__aeabi_dsub>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	4650      	mov	r0, sl
 8007910:	4659      	mov	r1, fp
 8007912:	f7f8 fcb9 	bl	8000288 <__aeabi_dsub>
 8007916:	4642      	mov	r2, r8
 8007918:	464b      	mov	r3, r9
 800791a:	f7f8 fe6d 	bl	80005f8 <__aeabi_dmul>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4630      	mov	r0, r6
 8007924:	4639      	mov	r1, r7
 8007926:	f7f8 fcaf 	bl	8000288 <__aeabi_dsub>
 800792a:	ec53 2b19 	vmov	r2, r3, d9
 800792e:	f7f8 fe63 	bl	80005f8 <__aeabi_dmul>
 8007932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007936:	ec41 0b18 	vmov	d8, r0, r1
 800793a:	4610      	mov	r0, r2
 800793c:	4619      	mov	r1, r3
 800793e:	f7f8 fe5b 	bl	80005f8 <__aeabi_dmul>
 8007942:	a37d      	add	r3, pc, #500	; (adr r3, 8007b38 <__ieee754_pow+0x6f0>)
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	4604      	mov	r4, r0
 800794a:	460d      	mov	r5, r1
 800794c:	f7f8 fe54 	bl	80005f8 <__aeabi_dmul>
 8007950:	a37b      	add	r3, pc, #492	; (adr r3, 8007b40 <__ieee754_pow+0x6f8>)
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f7f8 fc99 	bl	800028c <__adddf3>
 800795a:	4622      	mov	r2, r4
 800795c:	462b      	mov	r3, r5
 800795e:	f7f8 fe4b 	bl	80005f8 <__aeabi_dmul>
 8007962:	a379      	add	r3, pc, #484	; (adr r3, 8007b48 <__ieee754_pow+0x700>)
 8007964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007968:	f7f8 fc90 	bl	800028c <__adddf3>
 800796c:	4622      	mov	r2, r4
 800796e:	462b      	mov	r3, r5
 8007970:	f7f8 fe42 	bl	80005f8 <__aeabi_dmul>
 8007974:	a376      	add	r3, pc, #472	; (adr r3, 8007b50 <__ieee754_pow+0x708>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f7f8 fc87 	bl	800028c <__adddf3>
 800797e:	4622      	mov	r2, r4
 8007980:	462b      	mov	r3, r5
 8007982:	f7f8 fe39 	bl	80005f8 <__aeabi_dmul>
 8007986:	a374      	add	r3, pc, #464	; (adr r3, 8007b58 <__ieee754_pow+0x710>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f7f8 fc7e 	bl	800028c <__adddf3>
 8007990:	4622      	mov	r2, r4
 8007992:	462b      	mov	r3, r5
 8007994:	f7f8 fe30 	bl	80005f8 <__aeabi_dmul>
 8007998:	a371      	add	r3, pc, #452	; (adr r3, 8007b60 <__ieee754_pow+0x718>)
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f7f8 fc75 	bl	800028c <__adddf3>
 80079a2:	4622      	mov	r2, r4
 80079a4:	4606      	mov	r6, r0
 80079a6:	460f      	mov	r7, r1
 80079a8:	462b      	mov	r3, r5
 80079aa:	4620      	mov	r0, r4
 80079ac:	4629      	mov	r1, r5
 80079ae:	f7f8 fe23 	bl	80005f8 <__aeabi_dmul>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4630      	mov	r0, r6
 80079b8:	4639      	mov	r1, r7
 80079ba:	f7f8 fe1d 	bl	80005f8 <__aeabi_dmul>
 80079be:	4642      	mov	r2, r8
 80079c0:	4604      	mov	r4, r0
 80079c2:	460d      	mov	r5, r1
 80079c4:	464b      	mov	r3, r9
 80079c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079ca:	f7f8 fc5f 	bl	800028c <__adddf3>
 80079ce:	ec53 2b18 	vmov	r2, r3, d8
 80079d2:	f7f8 fe11 	bl	80005f8 <__aeabi_dmul>
 80079d6:	4622      	mov	r2, r4
 80079d8:	462b      	mov	r3, r5
 80079da:	f7f8 fc57 	bl	800028c <__adddf3>
 80079de:	4642      	mov	r2, r8
 80079e0:	4682      	mov	sl, r0
 80079e2:	468b      	mov	fp, r1
 80079e4:	464b      	mov	r3, r9
 80079e6:	4640      	mov	r0, r8
 80079e8:	4649      	mov	r1, r9
 80079ea:	f7f8 fe05 	bl	80005f8 <__aeabi_dmul>
 80079ee:	4b6c      	ldr	r3, [pc, #432]	; (8007ba0 <__ieee754_pow+0x758>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	4606      	mov	r6, r0
 80079f4:	460f      	mov	r7, r1
 80079f6:	f7f8 fc49 	bl	800028c <__adddf3>
 80079fa:	4652      	mov	r2, sl
 80079fc:	465b      	mov	r3, fp
 80079fe:	f7f8 fc45 	bl	800028c <__adddf3>
 8007a02:	9c04      	ldr	r4, [sp, #16]
 8007a04:	460d      	mov	r5, r1
 8007a06:	4622      	mov	r2, r4
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	f7f8 fdf3 	bl	80005f8 <__aeabi_dmul>
 8007a12:	4b63      	ldr	r3, [pc, #396]	; (8007ba0 <__ieee754_pow+0x758>)
 8007a14:	4680      	mov	r8, r0
 8007a16:	4689      	mov	r9, r1
 8007a18:	2200      	movs	r2, #0
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	f7f8 fc33 	bl	8000288 <__aeabi_dsub>
 8007a22:	4632      	mov	r2, r6
 8007a24:	463b      	mov	r3, r7
 8007a26:	f7f8 fc2f 	bl	8000288 <__aeabi_dsub>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4650      	mov	r0, sl
 8007a30:	4659      	mov	r1, fp
 8007a32:	f7f8 fc29 	bl	8000288 <__aeabi_dsub>
 8007a36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a3a:	f7f8 fddd 	bl	80005f8 <__aeabi_dmul>
 8007a3e:	4622      	mov	r2, r4
 8007a40:	4606      	mov	r6, r0
 8007a42:	460f      	mov	r7, r1
 8007a44:	462b      	mov	r3, r5
 8007a46:	ec51 0b18 	vmov	r0, r1, d8
 8007a4a:	f7f8 fdd5 	bl	80005f8 <__aeabi_dmul>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4630      	mov	r0, r6
 8007a54:	4639      	mov	r1, r7
 8007a56:	f7f8 fc19 	bl	800028c <__adddf3>
 8007a5a:	4606      	mov	r6, r0
 8007a5c:	460f      	mov	r7, r1
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4640      	mov	r0, r8
 8007a64:	4649      	mov	r1, r9
 8007a66:	f7f8 fc11 	bl	800028c <__adddf3>
 8007a6a:	9c04      	ldr	r4, [sp, #16]
 8007a6c:	a33e      	add	r3, pc, #248	; (adr r3, 8007b68 <__ieee754_pow+0x720>)
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	4620      	mov	r0, r4
 8007a74:	460d      	mov	r5, r1
 8007a76:	f7f8 fdbf 	bl	80005f8 <__aeabi_dmul>
 8007a7a:	4642      	mov	r2, r8
 8007a7c:	ec41 0b18 	vmov	d8, r0, r1
 8007a80:	464b      	mov	r3, r9
 8007a82:	4620      	mov	r0, r4
 8007a84:	4629      	mov	r1, r5
 8007a86:	f7f8 fbff 	bl	8000288 <__aeabi_dsub>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4630      	mov	r0, r6
 8007a90:	4639      	mov	r1, r7
 8007a92:	f7f8 fbf9 	bl	8000288 <__aeabi_dsub>
 8007a96:	a336      	add	r3, pc, #216	; (adr r3, 8007b70 <__ieee754_pow+0x728>)
 8007a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9c:	f7f8 fdac 	bl	80005f8 <__aeabi_dmul>
 8007aa0:	a335      	add	r3, pc, #212	; (adr r3, 8007b78 <__ieee754_pow+0x730>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	460f      	mov	r7, r1
 8007aaa:	4620      	mov	r0, r4
 8007aac:	4629      	mov	r1, r5
 8007aae:	f7f8 fda3 	bl	80005f8 <__aeabi_dmul>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	4639      	mov	r1, r7
 8007aba:	f7f8 fbe7 	bl	800028c <__adddf3>
 8007abe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ac0:	4b38      	ldr	r3, [pc, #224]	; (8007ba4 <__ieee754_pow+0x75c>)
 8007ac2:	4413      	add	r3, r2
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	f7f8 fbe0 	bl	800028c <__adddf3>
 8007acc:	4682      	mov	sl, r0
 8007ace:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ad0:	468b      	mov	fp, r1
 8007ad2:	f7f8 fd27 	bl	8000524 <__aeabi_i2d>
 8007ad6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ad8:	4b33      	ldr	r3, [pc, #204]	; (8007ba8 <__ieee754_pow+0x760>)
 8007ada:	4413      	add	r3, r2
 8007adc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	460f      	mov	r7, r1
 8007ae4:	4652      	mov	r2, sl
 8007ae6:	465b      	mov	r3, fp
 8007ae8:	ec51 0b18 	vmov	r0, r1, d8
 8007aec:	f7f8 fbce 	bl	800028c <__adddf3>
 8007af0:	4642      	mov	r2, r8
 8007af2:	464b      	mov	r3, r9
 8007af4:	f7f8 fbca 	bl	800028c <__adddf3>
 8007af8:	4632      	mov	r2, r6
 8007afa:	463b      	mov	r3, r7
 8007afc:	f7f8 fbc6 	bl	800028c <__adddf3>
 8007b00:	9c04      	ldr	r4, [sp, #16]
 8007b02:	4632      	mov	r2, r6
 8007b04:	463b      	mov	r3, r7
 8007b06:	4620      	mov	r0, r4
 8007b08:	460d      	mov	r5, r1
 8007b0a:	f7f8 fbbd 	bl	8000288 <__aeabi_dsub>
 8007b0e:	4642      	mov	r2, r8
 8007b10:	464b      	mov	r3, r9
 8007b12:	f7f8 fbb9 	bl	8000288 <__aeabi_dsub>
 8007b16:	ec53 2b18 	vmov	r2, r3, d8
 8007b1a:	f7f8 fbb5 	bl	8000288 <__aeabi_dsub>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4650      	mov	r0, sl
 8007b24:	4659      	mov	r1, fp
 8007b26:	e606      	b.n	8007736 <__ieee754_pow+0x2ee>
 8007b28:	2401      	movs	r4, #1
 8007b2a:	e6a0      	b.n	800786e <__ieee754_pow+0x426>
 8007b2c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007b80 <__ieee754_pow+0x738>
 8007b30:	e60d      	b.n	800774e <__ieee754_pow+0x306>
 8007b32:	bf00      	nop
 8007b34:	f3af 8000 	nop.w
 8007b38:	4a454eef 	.word	0x4a454eef
 8007b3c:	3fca7e28 	.word	0x3fca7e28
 8007b40:	93c9db65 	.word	0x93c9db65
 8007b44:	3fcd864a 	.word	0x3fcd864a
 8007b48:	a91d4101 	.word	0xa91d4101
 8007b4c:	3fd17460 	.word	0x3fd17460
 8007b50:	518f264d 	.word	0x518f264d
 8007b54:	3fd55555 	.word	0x3fd55555
 8007b58:	db6fabff 	.word	0xdb6fabff
 8007b5c:	3fdb6db6 	.word	0x3fdb6db6
 8007b60:	33333303 	.word	0x33333303
 8007b64:	3fe33333 	.word	0x3fe33333
 8007b68:	e0000000 	.word	0xe0000000
 8007b6c:	3feec709 	.word	0x3feec709
 8007b70:	dc3a03fd 	.word	0xdc3a03fd
 8007b74:	3feec709 	.word	0x3feec709
 8007b78:	145b01f5 	.word	0x145b01f5
 8007b7c:	be3e2fe0 	.word	0xbe3e2fe0
 8007b80:	00000000 	.word	0x00000000
 8007b84:	3ff00000 	.word	0x3ff00000
 8007b88:	7ff00000 	.word	0x7ff00000
 8007b8c:	43400000 	.word	0x43400000
 8007b90:	0003988e 	.word	0x0003988e
 8007b94:	000bb679 	.word	0x000bb679
 8007b98:	080089d8 	.word	0x080089d8
 8007b9c:	3ff00000 	.word	0x3ff00000
 8007ba0:	40080000 	.word	0x40080000
 8007ba4:	080089f8 	.word	0x080089f8
 8007ba8:	080089e8 	.word	0x080089e8
 8007bac:	a3b5      	add	r3, pc, #724	; (adr r3, 8007e84 <__ieee754_pow+0xa3c>)
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	f7f8 fb69 	bl	800028c <__adddf3>
 8007bba:	4622      	mov	r2, r4
 8007bbc:	ec41 0b1a 	vmov	d10, r0, r1
 8007bc0:	462b      	mov	r3, r5
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	4639      	mov	r1, r7
 8007bc6:	f7f8 fb5f 	bl	8000288 <__aeabi_dsub>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	ec51 0b1a 	vmov	r0, r1, d10
 8007bd2:	f7f8 ffa1 	bl	8000b18 <__aeabi_dcmpgt>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f47f adf8 	bne.w	80077cc <__ieee754_pow+0x384>
 8007bdc:	4aa4      	ldr	r2, [pc, #656]	; (8007e70 <__ieee754_pow+0xa28>)
 8007bde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007be2:	4293      	cmp	r3, r2
 8007be4:	f340 810b 	ble.w	8007dfe <__ieee754_pow+0x9b6>
 8007be8:	151b      	asrs	r3, r3, #20
 8007bea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007bee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007bf2:	fa4a f303 	asr.w	r3, sl, r3
 8007bf6:	445b      	add	r3, fp
 8007bf8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007bfc:	4e9d      	ldr	r6, [pc, #628]	; (8007e74 <__ieee754_pow+0xa2c>)
 8007bfe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007c02:	4116      	asrs	r6, r2
 8007c04:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007c08:	2000      	movs	r0, #0
 8007c0a:	ea23 0106 	bic.w	r1, r3, r6
 8007c0e:	f1c2 0214 	rsb	r2, r2, #20
 8007c12:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007c16:	fa4a fa02 	asr.w	sl, sl, r2
 8007c1a:	f1bb 0f00 	cmp.w	fp, #0
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4620      	mov	r0, r4
 8007c24:	4629      	mov	r1, r5
 8007c26:	bfb8      	it	lt
 8007c28:	f1ca 0a00 	rsblt	sl, sl, #0
 8007c2c:	f7f8 fb2c 	bl	8000288 <__aeabi_dsub>
 8007c30:	ec41 0b19 	vmov	d9, r0, r1
 8007c34:	4642      	mov	r2, r8
 8007c36:	464b      	mov	r3, r9
 8007c38:	ec51 0b19 	vmov	r0, r1, d9
 8007c3c:	f7f8 fb26 	bl	800028c <__adddf3>
 8007c40:	2400      	movs	r4, #0
 8007c42:	a379      	add	r3, pc, #484	; (adr r3, 8007e28 <__ieee754_pow+0x9e0>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	4620      	mov	r0, r4
 8007c4a:	460d      	mov	r5, r1
 8007c4c:	f7f8 fcd4 	bl	80005f8 <__aeabi_dmul>
 8007c50:	ec53 2b19 	vmov	r2, r3, d9
 8007c54:	4606      	mov	r6, r0
 8007c56:	460f      	mov	r7, r1
 8007c58:	4620      	mov	r0, r4
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	f7f8 fb14 	bl	8000288 <__aeabi_dsub>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4640      	mov	r0, r8
 8007c66:	4649      	mov	r1, r9
 8007c68:	f7f8 fb0e 	bl	8000288 <__aeabi_dsub>
 8007c6c:	a370      	add	r3, pc, #448	; (adr r3, 8007e30 <__ieee754_pow+0x9e8>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	f7f8 fcc1 	bl	80005f8 <__aeabi_dmul>
 8007c76:	a370      	add	r3, pc, #448	; (adr r3, 8007e38 <__ieee754_pow+0x9f0>)
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	4689      	mov	r9, r1
 8007c80:	4620      	mov	r0, r4
 8007c82:	4629      	mov	r1, r5
 8007c84:	f7f8 fcb8 	bl	80005f8 <__aeabi_dmul>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	4649      	mov	r1, r9
 8007c90:	f7f8 fafc 	bl	800028c <__adddf3>
 8007c94:	4604      	mov	r4, r0
 8007c96:	460d      	mov	r5, r1
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	f7f8 faf4 	bl	800028c <__adddf3>
 8007ca4:	4632      	mov	r2, r6
 8007ca6:	463b      	mov	r3, r7
 8007ca8:	4680      	mov	r8, r0
 8007caa:	4689      	mov	r9, r1
 8007cac:	f7f8 faec 	bl	8000288 <__aeabi_dsub>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	f7f8 fae6 	bl	8000288 <__aeabi_dsub>
 8007cbc:	4642      	mov	r2, r8
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	460f      	mov	r7, r1
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	4640      	mov	r0, r8
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	f7f8 fc96 	bl	80005f8 <__aeabi_dmul>
 8007ccc:	a35c      	add	r3, pc, #368	; (adr r3, 8007e40 <__ieee754_pow+0x9f8>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	460d      	mov	r5, r1
 8007cd6:	f7f8 fc8f 	bl	80005f8 <__aeabi_dmul>
 8007cda:	a35b      	add	r3, pc, #364	; (adr r3, 8007e48 <__ieee754_pow+0xa00>)
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	f7f8 fad2 	bl	8000288 <__aeabi_dsub>
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	f7f8 fc86 	bl	80005f8 <__aeabi_dmul>
 8007cec:	a358      	add	r3, pc, #352	; (adr r3, 8007e50 <__ieee754_pow+0xa08>)
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f7f8 facb 	bl	800028c <__adddf3>
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	462b      	mov	r3, r5
 8007cfa:	f7f8 fc7d 	bl	80005f8 <__aeabi_dmul>
 8007cfe:	a356      	add	r3, pc, #344	; (adr r3, 8007e58 <__ieee754_pow+0xa10>)
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f7f8 fac0 	bl	8000288 <__aeabi_dsub>
 8007d08:	4622      	mov	r2, r4
 8007d0a:	462b      	mov	r3, r5
 8007d0c:	f7f8 fc74 	bl	80005f8 <__aeabi_dmul>
 8007d10:	a353      	add	r3, pc, #332	; (adr r3, 8007e60 <__ieee754_pow+0xa18>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f7f8 fab9 	bl	800028c <__adddf3>
 8007d1a:	4622      	mov	r2, r4
 8007d1c:	462b      	mov	r3, r5
 8007d1e:	f7f8 fc6b 	bl	80005f8 <__aeabi_dmul>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4640      	mov	r0, r8
 8007d28:	4649      	mov	r1, r9
 8007d2a:	f7f8 faad 	bl	8000288 <__aeabi_dsub>
 8007d2e:	4604      	mov	r4, r0
 8007d30:	460d      	mov	r5, r1
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4640      	mov	r0, r8
 8007d38:	4649      	mov	r1, r9
 8007d3a:	f7f8 fc5d 	bl	80005f8 <__aeabi_dmul>
 8007d3e:	2200      	movs	r2, #0
 8007d40:	ec41 0b19 	vmov	d9, r0, r1
 8007d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d48:	4620      	mov	r0, r4
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	f7f8 fa9c 	bl	8000288 <__aeabi_dsub>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	ec51 0b19 	vmov	r0, r1, d9
 8007d58:	f7f8 fd78 	bl	800084c <__aeabi_ddiv>
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	4604      	mov	r4, r0
 8007d60:	460d      	mov	r5, r1
 8007d62:	463b      	mov	r3, r7
 8007d64:	4640      	mov	r0, r8
 8007d66:	4649      	mov	r1, r9
 8007d68:	f7f8 fc46 	bl	80005f8 <__aeabi_dmul>
 8007d6c:	4632      	mov	r2, r6
 8007d6e:	463b      	mov	r3, r7
 8007d70:	f7f8 fa8c 	bl	800028c <__adddf3>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4620      	mov	r0, r4
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	f7f8 fa84 	bl	8000288 <__aeabi_dsub>
 8007d80:	4642      	mov	r2, r8
 8007d82:	464b      	mov	r3, r9
 8007d84:	f7f8 fa80 	bl	8000288 <__aeabi_dsub>
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	493a      	ldr	r1, [pc, #232]	; (8007e78 <__ieee754_pow+0xa30>)
 8007d8e:	2000      	movs	r0, #0
 8007d90:	f7f8 fa7a 	bl	8000288 <__aeabi_dsub>
 8007d94:	e9cd 0100 	strd	r0, r1, [sp]
 8007d98:	9b01      	ldr	r3, [sp, #4]
 8007d9a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007da2:	da2f      	bge.n	8007e04 <__ieee754_pow+0x9bc>
 8007da4:	4650      	mov	r0, sl
 8007da6:	ed9d 0b00 	vldr	d0, [sp]
 8007daa:	f000 f9cd 	bl	8008148 <scalbn>
 8007dae:	ec51 0b10 	vmov	r0, r1, d0
 8007db2:	ec53 2b18 	vmov	r2, r3, d8
 8007db6:	f7ff bbe0 	b.w	800757a <__ieee754_pow+0x132>
 8007dba:	4b30      	ldr	r3, [pc, #192]	; (8007e7c <__ieee754_pow+0xa34>)
 8007dbc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007dc0:	429e      	cmp	r6, r3
 8007dc2:	f77f af0b 	ble.w	8007bdc <__ieee754_pow+0x794>
 8007dc6:	4b2e      	ldr	r3, [pc, #184]	; (8007e80 <__ieee754_pow+0xa38>)
 8007dc8:	440b      	add	r3, r1
 8007dca:	4303      	orrs	r3, r0
 8007dcc:	d00b      	beq.n	8007de6 <__ieee754_pow+0x99e>
 8007dce:	a326      	add	r3, pc, #152	; (adr r3, 8007e68 <__ieee754_pow+0xa20>)
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	ec51 0b18 	vmov	r0, r1, d8
 8007dd8:	f7f8 fc0e 	bl	80005f8 <__aeabi_dmul>
 8007ddc:	a322      	add	r3, pc, #136	; (adr r3, 8007e68 <__ieee754_pow+0xa20>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f7ff bbca 	b.w	800757a <__ieee754_pow+0x132>
 8007de6:	4622      	mov	r2, r4
 8007de8:	462b      	mov	r3, r5
 8007dea:	f7f8 fa4d 	bl	8000288 <__aeabi_dsub>
 8007dee:	4642      	mov	r2, r8
 8007df0:	464b      	mov	r3, r9
 8007df2:	f7f8 fe87 	bl	8000b04 <__aeabi_dcmpge>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	f43f aef0 	beq.w	8007bdc <__ieee754_pow+0x794>
 8007dfc:	e7e7      	b.n	8007dce <__ieee754_pow+0x986>
 8007dfe:	f04f 0a00 	mov.w	sl, #0
 8007e02:	e717      	b.n	8007c34 <__ieee754_pow+0x7ec>
 8007e04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	e7d2      	b.n	8007db2 <__ieee754_pow+0x96a>
 8007e0c:	491a      	ldr	r1, [pc, #104]	; (8007e78 <__ieee754_pow+0xa30>)
 8007e0e:	2000      	movs	r0, #0
 8007e10:	f7ff bb9e 	b.w	8007550 <__ieee754_pow+0x108>
 8007e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e18:	f7ff bb9a 	b.w	8007550 <__ieee754_pow+0x108>
 8007e1c:	9000      	str	r0, [sp, #0]
 8007e1e:	f7ff bb76 	b.w	800750e <__ieee754_pow+0xc6>
 8007e22:	2100      	movs	r1, #0
 8007e24:	f7ff bb60 	b.w	80074e8 <__ieee754_pow+0xa0>
 8007e28:	00000000 	.word	0x00000000
 8007e2c:	3fe62e43 	.word	0x3fe62e43
 8007e30:	fefa39ef 	.word	0xfefa39ef
 8007e34:	3fe62e42 	.word	0x3fe62e42
 8007e38:	0ca86c39 	.word	0x0ca86c39
 8007e3c:	be205c61 	.word	0xbe205c61
 8007e40:	72bea4d0 	.word	0x72bea4d0
 8007e44:	3e663769 	.word	0x3e663769
 8007e48:	c5d26bf1 	.word	0xc5d26bf1
 8007e4c:	3ebbbd41 	.word	0x3ebbbd41
 8007e50:	af25de2c 	.word	0xaf25de2c
 8007e54:	3f11566a 	.word	0x3f11566a
 8007e58:	16bebd93 	.word	0x16bebd93
 8007e5c:	3f66c16c 	.word	0x3f66c16c
 8007e60:	5555553e 	.word	0x5555553e
 8007e64:	3fc55555 	.word	0x3fc55555
 8007e68:	c2f8f359 	.word	0xc2f8f359
 8007e6c:	01a56e1f 	.word	0x01a56e1f
 8007e70:	3fe00000 	.word	0x3fe00000
 8007e74:	000fffff 	.word	0x000fffff
 8007e78:	3ff00000 	.word	0x3ff00000
 8007e7c:	4090cbff 	.word	0x4090cbff
 8007e80:	3f6f3400 	.word	0x3f6f3400
 8007e84:	652b82fe 	.word	0x652b82fe
 8007e88:	3c971547 	.word	0x3c971547

08007e8c <__ieee754_sqrt>:
 8007e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e90:	ec55 4b10 	vmov	r4, r5, d0
 8007e94:	4e56      	ldr	r6, [pc, #344]	; (8007ff0 <__ieee754_sqrt+0x164>)
 8007e96:	43ae      	bics	r6, r5
 8007e98:	ee10 0a10 	vmov	r0, s0
 8007e9c:	ee10 3a10 	vmov	r3, s0
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	d110      	bne.n	8007ec8 <__ieee754_sqrt+0x3c>
 8007ea6:	ee10 2a10 	vmov	r2, s0
 8007eaa:	462b      	mov	r3, r5
 8007eac:	f7f8 fba4 	bl	80005f8 <__aeabi_dmul>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	f7f8 f9e8 	bl	800028c <__adddf3>
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	460d      	mov	r5, r1
 8007ec0:	ec45 4b10 	vmov	d0, r4, r5
 8007ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec8:	2d00      	cmp	r5, #0
 8007eca:	dc10      	bgt.n	8007eee <__ieee754_sqrt+0x62>
 8007ecc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007ed0:	4330      	orrs	r0, r6
 8007ed2:	d0f5      	beq.n	8007ec0 <__ieee754_sqrt+0x34>
 8007ed4:	b15d      	cbz	r5, 8007eee <__ieee754_sqrt+0x62>
 8007ed6:	ee10 2a10 	vmov	r2, s0
 8007eda:	462b      	mov	r3, r5
 8007edc:	ee10 0a10 	vmov	r0, s0
 8007ee0:	f7f8 f9d2 	bl	8000288 <__aeabi_dsub>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	f7f8 fcb0 	bl	800084c <__aeabi_ddiv>
 8007eec:	e7e6      	b.n	8007ebc <__ieee754_sqrt+0x30>
 8007eee:	1509      	asrs	r1, r1, #20
 8007ef0:	d076      	beq.n	8007fe0 <__ieee754_sqrt+0x154>
 8007ef2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007ef6:	07ce      	lsls	r6, r1, #31
 8007ef8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007efc:	bf5e      	ittt	pl
 8007efe:	0fda      	lsrpl	r2, r3, #31
 8007f00:	005b      	lslpl	r3, r3, #1
 8007f02:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007f06:	0fda      	lsrs	r2, r3, #31
 8007f08:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007f0c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007f10:	2000      	movs	r0, #0
 8007f12:	106d      	asrs	r5, r5, #1
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	f04f 0e16 	mov.w	lr, #22
 8007f1a:	4684      	mov	ip, r0
 8007f1c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f20:	eb0c 0401 	add.w	r4, ip, r1
 8007f24:	4294      	cmp	r4, r2
 8007f26:	bfde      	ittt	le
 8007f28:	1b12      	suble	r2, r2, r4
 8007f2a:	eb04 0c01 	addle.w	ip, r4, r1
 8007f2e:	1840      	addle	r0, r0, r1
 8007f30:	0052      	lsls	r2, r2, #1
 8007f32:	f1be 0e01 	subs.w	lr, lr, #1
 8007f36:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007f3a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007f3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f42:	d1ed      	bne.n	8007f20 <__ieee754_sqrt+0x94>
 8007f44:	4671      	mov	r1, lr
 8007f46:	2720      	movs	r7, #32
 8007f48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007f4c:	4562      	cmp	r2, ip
 8007f4e:	eb04 060e 	add.w	r6, r4, lr
 8007f52:	dc02      	bgt.n	8007f5a <__ieee754_sqrt+0xce>
 8007f54:	d113      	bne.n	8007f7e <__ieee754_sqrt+0xf2>
 8007f56:	429e      	cmp	r6, r3
 8007f58:	d811      	bhi.n	8007f7e <__ieee754_sqrt+0xf2>
 8007f5a:	2e00      	cmp	r6, #0
 8007f5c:	eb06 0e04 	add.w	lr, r6, r4
 8007f60:	da43      	bge.n	8007fea <__ieee754_sqrt+0x15e>
 8007f62:	f1be 0f00 	cmp.w	lr, #0
 8007f66:	db40      	blt.n	8007fea <__ieee754_sqrt+0x15e>
 8007f68:	f10c 0801 	add.w	r8, ip, #1
 8007f6c:	eba2 020c 	sub.w	r2, r2, ip
 8007f70:	429e      	cmp	r6, r3
 8007f72:	bf88      	it	hi
 8007f74:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007f78:	1b9b      	subs	r3, r3, r6
 8007f7a:	4421      	add	r1, r4
 8007f7c:	46c4      	mov	ip, r8
 8007f7e:	0052      	lsls	r2, r2, #1
 8007f80:	3f01      	subs	r7, #1
 8007f82:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007f86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007f8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f8e:	d1dd      	bne.n	8007f4c <__ieee754_sqrt+0xc0>
 8007f90:	4313      	orrs	r3, r2
 8007f92:	d006      	beq.n	8007fa2 <__ieee754_sqrt+0x116>
 8007f94:	1c4c      	adds	r4, r1, #1
 8007f96:	bf13      	iteet	ne
 8007f98:	3101      	addne	r1, #1
 8007f9a:	3001      	addeq	r0, #1
 8007f9c:	4639      	moveq	r1, r7
 8007f9e:	f021 0101 	bicne.w	r1, r1, #1
 8007fa2:	1043      	asrs	r3, r0, #1
 8007fa4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007fa8:	0849      	lsrs	r1, r1, #1
 8007faa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007fae:	07c2      	lsls	r2, r0, #31
 8007fb0:	bf48      	it	mi
 8007fb2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007fb6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007fba:	460c      	mov	r4, r1
 8007fbc:	463d      	mov	r5, r7
 8007fbe:	e77f      	b.n	8007ec0 <__ieee754_sqrt+0x34>
 8007fc0:	0ada      	lsrs	r2, r3, #11
 8007fc2:	3815      	subs	r0, #21
 8007fc4:	055b      	lsls	r3, r3, #21
 8007fc6:	2a00      	cmp	r2, #0
 8007fc8:	d0fa      	beq.n	8007fc0 <__ieee754_sqrt+0x134>
 8007fca:	02d7      	lsls	r7, r2, #11
 8007fcc:	d50a      	bpl.n	8007fe4 <__ieee754_sqrt+0x158>
 8007fce:	f1c1 0420 	rsb	r4, r1, #32
 8007fd2:	fa23 f404 	lsr.w	r4, r3, r4
 8007fd6:	1e4d      	subs	r5, r1, #1
 8007fd8:	408b      	lsls	r3, r1
 8007fda:	4322      	orrs	r2, r4
 8007fdc:	1b41      	subs	r1, r0, r5
 8007fde:	e788      	b.n	8007ef2 <__ieee754_sqrt+0x66>
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	e7f0      	b.n	8007fc6 <__ieee754_sqrt+0x13a>
 8007fe4:	0052      	lsls	r2, r2, #1
 8007fe6:	3101      	adds	r1, #1
 8007fe8:	e7ef      	b.n	8007fca <__ieee754_sqrt+0x13e>
 8007fea:	46e0      	mov	r8, ip
 8007fec:	e7be      	b.n	8007f6c <__ieee754_sqrt+0xe0>
 8007fee:	bf00      	nop
 8007ff0:	7ff00000 	.word	0x7ff00000

08007ff4 <fabs>:
 8007ff4:	ec51 0b10 	vmov	r0, r1, d0
 8007ff8:	ee10 2a10 	vmov	r2, s0
 8007ffc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008000:	ec43 2b10 	vmov	d0, r2, r3
 8008004:	4770      	bx	lr

08008006 <finite>:
 8008006:	b082      	sub	sp, #8
 8008008:	ed8d 0b00 	vstr	d0, [sp]
 800800c:	9801      	ldr	r0, [sp, #4]
 800800e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008012:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008016:	0fc0      	lsrs	r0, r0, #31
 8008018:	b002      	add	sp, #8
 800801a:	4770      	bx	lr
 800801c:	0000      	movs	r0, r0
	...

08008020 <nan>:
 8008020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008028 <nan+0x8>
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	00000000 	.word	0x00000000
 800802c:	7ff80000 	.word	0x7ff80000

08008030 <rint>:
 8008030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008032:	ec51 0b10 	vmov	r0, r1, d0
 8008036:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800803a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800803e:	2e13      	cmp	r6, #19
 8008040:	ee10 4a10 	vmov	r4, s0
 8008044:	460b      	mov	r3, r1
 8008046:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800804a:	dc58      	bgt.n	80080fe <rint+0xce>
 800804c:	2e00      	cmp	r6, #0
 800804e:	da2b      	bge.n	80080a8 <rint+0x78>
 8008050:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008054:	4302      	orrs	r2, r0
 8008056:	d023      	beq.n	80080a0 <rint+0x70>
 8008058:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800805c:	4302      	orrs	r2, r0
 800805e:	4254      	negs	r4, r2
 8008060:	4314      	orrs	r4, r2
 8008062:	0c4b      	lsrs	r3, r1, #17
 8008064:	0b24      	lsrs	r4, r4, #12
 8008066:	045b      	lsls	r3, r3, #17
 8008068:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800806c:	ea44 0103 	orr.w	r1, r4, r3
 8008070:	4b32      	ldr	r3, [pc, #200]	; (800813c <rint+0x10c>)
 8008072:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008076:	e9d3 6700 	ldrd	r6, r7, [r3]
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4630      	mov	r0, r6
 8008080:	4639      	mov	r1, r7
 8008082:	f7f8 f903 	bl	800028c <__adddf3>
 8008086:	e9cd 0100 	strd	r0, r1, [sp]
 800808a:	463b      	mov	r3, r7
 800808c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008090:	4632      	mov	r2, r6
 8008092:	f7f8 f8f9 	bl	8000288 <__aeabi_dsub>
 8008096:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800809a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800809e:	4639      	mov	r1, r7
 80080a0:	ec41 0b10 	vmov	d0, r0, r1
 80080a4:	b003      	add	sp, #12
 80080a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080a8:	4a25      	ldr	r2, [pc, #148]	; (8008140 <rint+0x110>)
 80080aa:	4132      	asrs	r2, r6
 80080ac:	ea01 0702 	and.w	r7, r1, r2
 80080b0:	4307      	orrs	r7, r0
 80080b2:	d0f5      	beq.n	80080a0 <rint+0x70>
 80080b4:	0851      	lsrs	r1, r2, #1
 80080b6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80080ba:	4314      	orrs	r4, r2
 80080bc:	d00c      	beq.n	80080d8 <rint+0xa8>
 80080be:	ea23 0201 	bic.w	r2, r3, r1
 80080c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80080c6:	2e13      	cmp	r6, #19
 80080c8:	fa43 f606 	asr.w	r6, r3, r6
 80080cc:	bf0c      	ite	eq
 80080ce:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80080d2:	2400      	movne	r4, #0
 80080d4:	ea42 0306 	orr.w	r3, r2, r6
 80080d8:	4918      	ldr	r1, [pc, #96]	; (800813c <rint+0x10c>)
 80080da:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80080de:	4622      	mov	r2, r4
 80080e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080e4:	4620      	mov	r0, r4
 80080e6:	4629      	mov	r1, r5
 80080e8:	f7f8 f8d0 	bl	800028c <__adddf3>
 80080ec:	e9cd 0100 	strd	r0, r1, [sp]
 80080f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080f4:	4622      	mov	r2, r4
 80080f6:	462b      	mov	r3, r5
 80080f8:	f7f8 f8c6 	bl	8000288 <__aeabi_dsub>
 80080fc:	e7d0      	b.n	80080a0 <rint+0x70>
 80080fe:	2e33      	cmp	r6, #51	; 0x33
 8008100:	dd07      	ble.n	8008112 <rint+0xe2>
 8008102:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008106:	d1cb      	bne.n	80080a0 <rint+0x70>
 8008108:	ee10 2a10 	vmov	r2, s0
 800810c:	f7f8 f8be 	bl	800028c <__adddf3>
 8008110:	e7c6      	b.n	80080a0 <rint+0x70>
 8008112:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008116:	f04f 36ff 	mov.w	r6, #4294967295
 800811a:	40d6      	lsrs	r6, r2
 800811c:	4230      	tst	r0, r6
 800811e:	d0bf      	beq.n	80080a0 <rint+0x70>
 8008120:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8008124:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8008128:	bf1f      	itttt	ne
 800812a:	ea24 0101 	bicne.w	r1, r4, r1
 800812e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008132:	fa44 f202 	asrne.w	r2, r4, r2
 8008136:	ea41 0402 	orrne.w	r4, r1, r2
 800813a:	e7cd      	b.n	80080d8 <rint+0xa8>
 800813c:	08008a08 	.word	0x08008a08
 8008140:	000fffff 	.word	0x000fffff
 8008144:	00000000 	.word	0x00000000

08008148 <scalbn>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	ec55 4b10 	vmov	r4, r5, d0
 800814e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008152:	4606      	mov	r6, r0
 8008154:	462b      	mov	r3, r5
 8008156:	b99a      	cbnz	r2, 8008180 <scalbn+0x38>
 8008158:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800815c:	4323      	orrs	r3, r4
 800815e:	d036      	beq.n	80081ce <scalbn+0x86>
 8008160:	4b39      	ldr	r3, [pc, #228]	; (8008248 <scalbn+0x100>)
 8008162:	4629      	mov	r1, r5
 8008164:	ee10 0a10 	vmov	r0, s0
 8008168:	2200      	movs	r2, #0
 800816a:	f7f8 fa45 	bl	80005f8 <__aeabi_dmul>
 800816e:	4b37      	ldr	r3, [pc, #220]	; (800824c <scalbn+0x104>)
 8008170:	429e      	cmp	r6, r3
 8008172:	4604      	mov	r4, r0
 8008174:	460d      	mov	r5, r1
 8008176:	da10      	bge.n	800819a <scalbn+0x52>
 8008178:	a32b      	add	r3, pc, #172	; (adr r3, 8008228 <scalbn+0xe0>)
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	e03a      	b.n	80081f6 <scalbn+0xae>
 8008180:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008184:	428a      	cmp	r2, r1
 8008186:	d10c      	bne.n	80081a2 <scalbn+0x5a>
 8008188:	ee10 2a10 	vmov	r2, s0
 800818c:	4620      	mov	r0, r4
 800818e:	4629      	mov	r1, r5
 8008190:	f7f8 f87c 	bl	800028c <__adddf3>
 8008194:	4604      	mov	r4, r0
 8008196:	460d      	mov	r5, r1
 8008198:	e019      	b.n	80081ce <scalbn+0x86>
 800819a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800819e:	460b      	mov	r3, r1
 80081a0:	3a36      	subs	r2, #54	; 0x36
 80081a2:	4432      	add	r2, r6
 80081a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80081a8:	428a      	cmp	r2, r1
 80081aa:	dd08      	ble.n	80081be <scalbn+0x76>
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	a120      	add	r1, pc, #128	; (adr r1, 8008230 <scalbn+0xe8>)
 80081b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081b4:	da1c      	bge.n	80081f0 <scalbn+0xa8>
 80081b6:	a120      	add	r1, pc, #128	; (adr r1, 8008238 <scalbn+0xf0>)
 80081b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081bc:	e018      	b.n	80081f0 <scalbn+0xa8>
 80081be:	2a00      	cmp	r2, #0
 80081c0:	dd08      	ble.n	80081d4 <scalbn+0x8c>
 80081c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80081ce:	ec45 4b10 	vmov	d0, r4, r5
 80081d2:	bd70      	pop	{r4, r5, r6, pc}
 80081d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80081d8:	da19      	bge.n	800820e <scalbn+0xc6>
 80081da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80081de:	429e      	cmp	r6, r3
 80081e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80081e4:	dd0a      	ble.n	80081fc <scalbn+0xb4>
 80081e6:	a112      	add	r1, pc, #72	; (adr r1, 8008230 <scalbn+0xe8>)
 80081e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e2      	bne.n	80081b6 <scalbn+0x6e>
 80081f0:	a30f      	add	r3, pc, #60	; (adr r3, 8008230 <scalbn+0xe8>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f7f8 f9ff 	bl	80005f8 <__aeabi_dmul>
 80081fa:	e7cb      	b.n	8008194 <scalbn+0x4c>
 80081fc:	a10a      	add	r1, pc, #40	; (adr r1, 8008228 <scalbn+0xe0>)
 80081fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0b8      	beq.n	8008178 <scalbn+0x30>
 8008206:	a10e      	add	r1, pc, #56	; (adr r1, 8008240 <scalbn+0xf8>)
 8008208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800820c:	e7b4      	b.n	8008178 <scalbn+0x30>
 800820e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008212:	3236      	adds	r2, #54	; 0x36
 8008214:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008218:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800821c:	4620      	mov	r0, r4
 800821e:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <scalbn+0x108>)
 8008220:	2200      	movs	r2, #0
 8008222:	e7e8      	b.n	80081f6 <scalbn+0xae>
 8008224:	f3af 8000 	nop.w
 8008228:	c2f8f359 	.word	0xc2f8f359
 800822c:	01a56e1f 	.word	0x01a56e1f
 8008230:	8800759c 	.word	0x8800759c
 8008234:	7e37e43c 	.word	0x7e37e43c
 8008238:	8800759c 	.word	0x8800759c
 800823c:	fe37e43c 	.word	0xfe37e43c
 8008240:	c2f8f359 	.word	0xc2f8f359
 8008244:	81a56e1f 	.word	0x81a56e1f
 8008248:	43500000 	.word	0x43500000
 800824c:	ffff3cb0 	.word	0xffff3cb0
 8008250:	3c900000 	.word	0x3c900000

08008254 <_init>:
 8008254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008256:	bf00      	nop
 8008258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825a:	bc08      	pop	{r3}
 800825c:	469e      	mov	lr, r3
 800825e:	4770      	bx	lr

08008260 <_fini>:
 8008260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008262:	bf00      	nop
 8008264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008266:	bc08      	pop	{r3}
 8008268:	469e      	mov	lr, r3
 800826a:	4770      	bx	lr

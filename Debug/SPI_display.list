
SPI_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  08006070  08006070  00016070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800675c  0800675c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800675c  0800675c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800675c  0800675c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08006764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  200001d8  0800693c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  0800693c  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006363  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbd  00000000  00000000  0002656b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00028128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  00028940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004940  00000000  00000000  00029040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c55  00000000  00000000  0002d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000762a9  00000000  00000000  000355d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ab87e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003094  00000000  00000000  000ab8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006058 	.word	0x08006058

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08006058 	.word	0x08006058

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa93 f3a3 	rbit	r3, r3
 8000c62:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	fab3 f383 	clz	r3, r3
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2103      	movs	r1, #3
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	401a      	ands	r2, r3
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa93 f3a3 	rbit	r3, r3
 8000c80:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	fab3 f383 	clz	r3, r3
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	431a      	orrs	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	601a      	str	r2, [r3, #0]
}
 8000c96:	bf00      	nop
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	fb01 f303 	mul.w	r3, r1, r3
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	605a      	str	r2, [r3, #4]
}
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b089      	sub	sp, #36	; 0x24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	fa93 f3a3 	rbit	r3, r3
 8000cec:	613b      	str	r3, [r7, #16]
  return(result);
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	fab3 f383 	clz	r3, r3
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2103      	movs	r1, #3
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	401a      	ands	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	fa93 f3a3 	rbit	r3, r3
 8000d0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fab3 f383 	clz	r3, r3
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000d20:	bf00      	nop
 8000d22:	3724      	adds	r7, #36	; 0x24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	613b      	str	r3, [r7, #16]
  return(result);
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	fab3 f383 	clz	r3, r3
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2103      	movs	r1, #3
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	401a      	ands	r2, r3
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa93 f3a3 	rbit	r3, r3
 8000d64:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	fab3 f383 	clz	r3, r3
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	431a      	orrs	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	60da      	str	r2, [r3, #12]
}
 8000d7a:	bf00      	nop
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b089      	sub	sp, #36	; 0x24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6a1a      	ldr	r2, [r3, #32]
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa93 f3a3 	rbit	r3, r3
 8000da0:	613b      	str	r3, [r7, #16]
  return(result);
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	fab3 f383 	clz	r3, r3
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	210f      	movs	r1, #15
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	401a      	ands	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fab3 f383 	clz	r3, r3
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000dd4:	bf00      	nop
 8000dd6:	3724      	adds	r7, #36	; 0x24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	fab3 f383 	clz	r3, r3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	210f      	movs	r1, #15
 8000e08:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	401a      	ands	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa93 f3a3 	rbit	r3, r3
 8000e1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	fab3 f383 	clz	r3, r3
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000e32:	bf00      	nop
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b088      	sub	sp, #32
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	613b      	str	r3, [r7, #16]
  return(result);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	fab3 f383 	clz	r3, r3
 8000e64:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e66:	e048      	b.n	8000efa <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d03a      	beq.n	8000ef4 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	461a      	mov	r2, r3
 8000e84:	69b9      	ldr	r1, [r7, #24]
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fede 	bl	8000c48 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d003      	beq.n	8000e9c <LL_GPIO_Init+0x5e>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d106      	bne.n	8000eaa <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff14 	bl	8000cd2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	69b9      	ldr	r1, [r7, #24]
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff3a 	bl	8000d2c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d119      	bne.n	8000ef4 <LL_GPIO_Init+0xb6>
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	60bb      	str	r3, [r7, #8]
  return(result);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000ece:	fab3 f383 	clz	r3, r3
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	d807      	bhi.n	8000ee6 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	461a      	mov	r2, r3
 8000edc:	69b9      	ldr	r1, [r7, #24]
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff51 	bl	8000d86 <LL_GPIO_SetAFPin_0_7>
 8000ee4:	e006      	b.n	8000ef4 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	461a      	mov	r2, r3
 8000eec:	69b9      	ldr	r1, [r7, #24]
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff76 	bl	8000de0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1af      	bne.n	8000e68 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d003      	beq.n	8000f18 <LL_GPIO_Init+0xda>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d107      	bne.n	8000f28 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	6819      	ldr	r1, [r3, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	461a      	mov	r2, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff febd 	bl	8000ca2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f043 0201 	orr.w	r2, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 0201 	bic.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0219      	lsls	r1, r3, #8
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	601a      	str	r2, [r3, #0]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000fb4:	f023 0307 	bic.w	r3, r3, #7
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	609a      	str	r2, [r3, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	611a      	str	r2, [r3, #16]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	605a      	str	r2, [r3, #4]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff65 	bl	8000f52 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6899      	ldr	r1, [r3, #8]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	461a      	mov	r2, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff6d 	bl	8000f72 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffb6 	bl	8001010 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff44 	bl	8000f32 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffa0 	bl	8000ff0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	6919      	ldr	r1, [r3, #16]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	461a      	mov	r2, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff70 	bl	8000fa0 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff81 	bl	8000fd0 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffa9 	bl	800102c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ffb6 	bl	8001052 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001100:	2b40      	cmp	r3, #64	; 0x40
 8001102:	bf0c      	ite	eq
 8001104:	2301      	moveq	r3, #1
 8001106:	2300      	movne	r3, #0
 8001108:	b2db      	uxtb	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	611a      	str	r2, [r3, #16]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ffd3 	bl	80010f0 <LL_SPI_IsEnabled>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d13b      	bne.n	80011c8 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001158:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	6811      	ldr	r1, [r2, #0]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	6852      	ldr	r2, [r2, #4]
 8001164:	4311      	orrs	r1, r2
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	68d2      	ldr	r2, [r2, #12]
 800116a:	4311      	orrs	r1, r2
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	6912      	ldr	r2, [r2, #16]
 8001170:	4311      	orrs	r1, r2
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	6952      	ldr	r2, [r2, #20]
 8001176:	4311      	orrs	r1, r2
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	6992      	ldr	r2, [r2, #24]
 800117c:	4311      	orrs	r1, r2
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	69d2      	ldr	r2, [r2, #28]
 8001182:	4311      	orrs	r1, r2
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	6a12      	ldr	r2, [r2, #32]
 8001188:	430a      	orrs	r2, r1
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001198:	f023 0304 	bic.w	r3, r3, #4
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	6891      	ldr	r1, [r2, #8]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	6952      	ldr	r2, [r2, #20]
 80011a4:	0c12      	lsrs	r2, r2, #16
 80011a6:	430a      	orrs	r2, r1
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011b6:	d105      	bne.n	80011c4 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa9 	bl	8001116 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <LL_InitTick+0x30>)
 80011e8:	3b01      	subs	r3, #1
 80011ea:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <LL_InitTick+0x30>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <LL_InitTick+0x30>)
 80011f4:	2205      	movs	r2, #5
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e010 	.word	0xe000e010

08001208 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001210:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffdd 	bl	80011d4 <LL_InitTick>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <LL_mDelay+0x48>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001232:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123a:	d00c      	beq.n	8001256 <LL_mDelay+0x32>
  {
    Delay++;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3301      	adds	r3, #1
 8001240:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001242:	e008      	b.n	8001256 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <LL_mDelay+0x48>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <LL_mDelay+0x32>
    {
      Delay--;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f3      	bne.n	8001244 <LL_mDelay+0x20>
    }
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <LL_SetSystemCoreClock+0x1c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000004 	.word	0x20000004

08001290 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4013      	ands	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40021000 	.word	0x40021000

080012c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	463b      	mov	r3, r7
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012f6:	f7ff ffcb 	bl	8001290 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80012fe:	f7ff ffc7 	bl	8001290 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4);
 8001302:	2118      	movs	r1, #24
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f7ff ffda 	bl	80012c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_5);
 800130c:	2122      	movs	r1, #34	; 0x22
 800130e:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_GPIO_Init+0x80>)
 8001310:	f7ff ffd6 	bl	80012c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8001314:	2318      	movs	r3, #24
 8001316:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001318:	2301      	movs	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f7ff fd85 	bl	8000e3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_5;
 8001334:	2322      	movs	r3, #34	; 0x22
 8001336:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001338:	2301      	movs	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_GPIO_Init+0x80>)
 800134e:	f7ff fd76 	bl	8000e3e <LL_GPIO_Init>

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	48000400 	.word	0x48000400

08001360 <hts221_read_byte>:
#include "hts221.h"

uint8_t address_hyg = HTS221_DEVICE_ADDRESS_0;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af02      	add	r7, sp, #8
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_hyg, 0));
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <hts221_read_byte+0x30>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	79fa      	ldrb	r2, [r7, #7]
 8001374:	f107 000f 	add.w	r0, r7, #15
 8001378:	2100      	movs	r1, #0
 800137a:	9100      	str	r1, [sp, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	f000 fb59 	bl	8001a34 <i2c_master_read>
 8001382:	4603      	mov	r3, r0
 8001384:	781b      	ldrb	r3, [r3, #0]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000

08001394 <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	460a      	mov	r2, r1
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_hyg, 0);
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <hts221_write_byte+0x28>)
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	79f9      	ldrb	r1, [r7, #7]
 80013aa:	79b8      	ldrb	r0, [r7, #6]
 80013ac:	2300      	movs	r3, #0
 80013ae:	f000 fafd 	bl	80019ac <i2c_master_write>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000000 	.word	0x20000000

080013c0 <hts221_readArray>:


void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
 80013cc:	4613      	mov	r3, r2
 80013ce:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, address_hyg, 1);
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <hts221_readArray+0x2c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	78fa      	ldrb	r2, [r7, #3]
 80013d6:	78b9      	ldrb	r1, [r7, #2]
 80013d8:	2001      	movs	r0, #1
 80013da:	9000      	str	r0, [sp, #0]
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fb29 	bl	8001a34 <i2c_master_read>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000000 	.word	0x20000000

080013f0 <hts221_get_temp>:

	return (humid);
}

float hts221_get_temp()
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
	uint8_t Data[4], T1_T0msb;
	float val, T0_degC, T1_degC;
	int16_t T0_out, T1_out, T_out;

	T1_T0msb = hts221_read_byte(0x35);
 80013f6:	2035      	movs	r0, #53	; 0x35
 80013f8:	f7ff ffb2 	bl	8001360 <hts221_read_byte>
 80013fc:	4603      	mov	r3, r0
 80013fe:	77fb      	strb	r3, [r7, #31]
	hts221_readArray(Data, 0x32, 2);
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2202      	movs	r2, #2
 8001404:	2132      	movs	r1, #50	; 0x32
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ffda 	bl	80013c0 <hts221_readArray>

	T0_degC = (Data[0] + (1 << 8) * (T1_T0msb & 0x03)) / 8.0;
 800140c:	793b      	ldrb	r3, [r7, #4]
 800140e:	461a      	mov	r2, r3
 8001410:	7ffb      	ldrb	r3, [r7, #31]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	4413      	add	r3, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f882 	bl	8000524 <__aeabi_i2d>
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b36      	ldr	r3, [pc, #216]	; (8001500 <hts221_get_temp+0x110>)
 8001426:	f7ff fa11 	bl	800084c <__aeabi_ddiv>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fbb9 	bl	8000ba8 <__aeabi_d2f>
 8001436:	4603      	mov	r3, r0
 8001438:	61bb      	str	r3, [r7, #24]
	T1_degC = (Data[1] + (1 << 6) * (T1_T0msb & 0x0C)) / 8.0;
 800143a:	797b      	ldrb	r3, [r7, #5]
 800143c:	461a      	mov	r2, r3
 800143e:	7ffb      	ldrb	r3, [r7, #31]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	019b      	lsls	r3, r3, #6
 8001446:	4413      	add	r3, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f86b 	bl	8000524 <__aeabi_i2d>
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <hts221_get_temp+0x110>)
 8001454:	f7ff f9fa 	bl	800084c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fba2 	bl	8000ba8 <__aeabi_d2f>
 8001464:	4603      	mov	r3, r0
 8001466:	617b      	str	r3, [r7, #20]

	hts221_readArray(Data, 0x3C, 4);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2204      	movs	r2, #4
 800146c:	213c      	movs	r1, #60	; 0x3c
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ffa6 	bl	80013c0 <hts221_readArray>
	T0_out = (((uint16_t)Data[1])<<8) | (uint16_t)Data[0];
 8001474:	797b      	ldrb	r3, [r7, #5]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b21a      	sxth	r2, r3
 800147a:	793b      	ldrb	r3, [r7, #4]
 800147c:	b21b      	sxth	r3, r3
 800147e:	4313      	orrs	r3, r2
 8001480:	827b      	strh	r3, [r7, #18]
	T1_out = (((uint16_t)Data[3])<<8) | (uint16_t)Data[2];
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b21a      	sxth	r2, r3
 8001488:	79bb      	ldrb	r3, [r7, #6]
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	823b      	strh	r3, [r7, #16]

	hts221_readArray(Data, 0x2A, 2);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2202      	movs	r2, #2
 8001494:	212a      	movs	r1, #42	; 0x2a
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff92 	bl	80013c0 <hts221_readArray>
	T_out = (((uint16_t)Data[1])<<8) | (uint16_t)Data[0];
 800149c:	797b      	ldrb	r3, [r7, #5]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	793b      	ldrb	r3, [r7, #4]
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	81fb      	strh	r3, [r7, #14]

	val = (float)(T0_degC + (int32_t)(T_out - T0_out) * (T1_degC - T0_degC) / (T1_out - T0_out));
 80014aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014bc:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80014c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014c8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014cc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80014d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80014e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ea:	edc7 7a02 	vstr	s15, [r7, #8]

	return val;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	ee07 3a90 	vmov	s15, r3
}
 80014f4:	eeb0 0a67 	vmov.f32	s0, s15
 80014f8:	3720      	adds	r7, #32
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40200000 	.word	0x40200000

08001504 <hts221_init>:

uint8_t hts221_init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800150a:	2301      	movs	r3, #1
 800150c:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 800150e:	2064      	movs	r0, #100	; 0x64
 8001510:	f7ff fe88 	bl	8001224 <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8001514:	200f      	movs	r0, #15
 8001516:	f7ff ff23 	bl	8001360 <hts221_read_byte>
 800151a:	4603      	mov	r3, r0
 800151c:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 800151e:	79bb      	ldrb	r3, [r7, #6]
 8001520:	2bbc      	cmp	r3, #188	; 0xbc
 8001522:	d101      	bne.n	8001528 <hts221_init+0x24>
	{
		status = 1;
 8001524:	2301      	movs	r3, #1
 8001526:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t ctrl1 = 0b10000111;
 8001528:	2387      	movs	r3, #135	; 0x87
 800152a:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 800152c:	797b      	ldrb	r3, [r7, #5]
 800152e:	4619      	mov	r1, r3
 8001530:	2020      	movs	r0, #32
 8001532:	f7ff ff2f 	bl	8001394 <hts221_write_byte>

	return status;
 8001536:	79fb      	ldrb	r3, [r7, #7]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <NVIC_EnableIRQ+0x30>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da0b      	bge.n	80015bc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <NVIC_SetPriority+0x4c>)
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	3b04      	subs	r3, #4
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ba:	e009      	b.n	80015d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <NVIC_SetPriority+0x50>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_I2C_EnableClockStretching>:
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	601a      	str	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_I2C_DisableGeneralCall>:
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <LL_I2C_SetOwnAddress2>:
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800169e:	f023 0306 	bic.w	r3, r3, #6
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	431a      	orrs	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	60da      	str	r2, [r3, #12]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LL_I2C_DisableOwnAddress2>:
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60da      	str	r2, [r3, #12]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_I2C_EnableIT_RX>:
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f043 0204 	orr.w	r2, r3, #4
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	601a      	str	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_I2C_DisableIT_RX>:
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 0204 	bic.w	r2, r3, #4
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	601a      	str	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <LL_I2C_IsActiveFlag_TXIS>:
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b02      	cmp	r3, #2
 800172c:	bf0c      	ite	eq
 800172e:	2301      	moveq	r3, #1
 8001730:	2300      	movne	r3, #0
 8001732:	b2db      	uxtb	r3, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_I2C_IsActiveFlag_RXNE>:
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b04      	cmp	r3, #4
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_I2C_IsActiveFlag_STOP>:
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	2b20      	cmp	r3, #32
 8001778:	bf0c      	ite	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	2300      	movne	r3, #0
 800177e:	b2db      	uxtb	r3, r3
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_I2C_ClearFlag_STOP>:
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	f043 0220 	orr.w	r2, r3, #32
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	61da      	str	r2, [r3, #28]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_I2C_EnableAutoEndMode>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	605a      	str	r2, [r3, #4]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	0d5b      	lsrs	r3, r3, #21
 80017e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <LL_I2C_HandleTransfer+0x48>)
 80017e8:	430b      	orrs	r3, r1
 80017ea:	43db      	mvns	r3, r3
 80017ec:	401a      	ands	r2, r3
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4319      	orrs	r1, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	041b      	lsls	r3, r3, #16
 80017f8:	4319      	orrs	r1, r3
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4319      	orrs	r1, r3
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	430b      	orrs	r3, r1
 8001802:	431a      	orrs	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	03ff7bff 	.word	0x03ff7bff

08001818 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	b2db      	uxtb	r3, r3
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_AHB1_GRP1_EnableClock>:
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	4907      	ldr	r1, [pc, #28]	; (800187c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4313      	orrs	r3, r2
 8001862:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4013      	ands	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40021000 	.word	0x40021000

08001880 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800188a:	69da      	ldr	r2, [r3, #28]
 800188c:	4907      	ldr	r1, [pc, #28]	; (80018ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4313      	orrs	r3, r2
 8001892:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8001896:	69da      	ldr	r2, [r3, #28]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4013      	ands	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40021000 	.word	0x40021000

080018b0 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08e      	sub	sp, #56	; 0x38
 80018b4:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	615a      	str	r2, [r3, #20]
 80018c8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
 80018d8:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80018da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80018de:	f7ff ffb7 	bl	8001850 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80018e2:	23c0      	movs	r3, #192	; 0xc0
 80018e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018e6:	2302      	movs	r3, #2
 80018e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80018ee:	2301      	movs	r3, #1
 80018f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80018f6:	2304      	movs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4828      	ldr	r0, [pc, #160]	; (80019a0 <MX_I2C1_Init+0xf0>)
 8001900:	f7ff fa9d 	bl	8000e3e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001904:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001908:	f7ff ffba 	bl	8001880 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800190c:	f7ff fe18 	bl	8001540 <NVIC_GetPriorityGrouping>
 8001910:	4603      	mov	r3, r0
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fe64 	bl	80015e4 <NVIC_EncodePriority>
 800191c:	4603      	mov	r3, r0
 800191e:	4619      	mov	r1, r3
 8001920:	201f      	movs	r0, #31
 8001922:	f7ff fe35 	bl	8001590 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001926:	201f      	movs	r0, #31
 8001928:	f7ff fe18 	bl	800155c <NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800192c:	f7ff fe08 	bl	8001540 <NVIC_GetPriorityGrouping>
 8001930:	4603      	mov	r3, r0
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fe54 	bl	80015e4 <NVIC_EncodePriority>
 800193c:	4603      	mov	r3, r0
 800193e:	4619      	mov	r1, r3
 8001940:	2020      	movs	r0, #32
 8001942:	f7ff fe25 	bl	8001590 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001946:	2020      	movs	r0, #32
 8001948:	f7ff fe08 	bl	800155c <NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 800194c:	4815      	ldr	r0, [pc, #84]	; (80019a4 <MX_I2C1_Init+0xf4>)
 800194e:	f7ff ff2d 	bl	80017ac <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001952:	4814      	ldr	r0, [pc, #80]	; (80019a4 <MX_I2C1_Init+0xf4>)
 8001954:	f7ff feb1 	bl	80016ba <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001958:	4812      	ldr	r0, [pc, #72]	; (80019a4 <MX_I2C1_Init+0xf4>)
 800195a:	f7ff fe86 	bl	800166a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800195e:	4811      	ldr	r0, [pc, #68]	; (80019a4 <MX_I2C1_Init+0xf4>)
 8001960:	f7ff fe73 	bl	800164a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_I2C1_Init+0xf8>)
 800196a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001974:	2302      	movs	r3, #2
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001978:	2300      	movs	r3, #0
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800197c:	2300      	movs	r3, #0
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <MX_I2C1_Init+0xf4>)
 8001988:	f7ff fb76 	bl	8001078 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <MX_I2C1_Init+0xf4>)
 8001992:	f7ff fe7a 	bl	800168a <LL_I2C_SetOwnAddress2>

}
 8001996:	bf00      	nop
 8001998:	3738      	adds	r7, #56	; 0x38
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	48000400 	.word	0x48000400
 80019a4:	40005400 	.word	0x40005400
 80019a8:	2000090e 	.word	0x2000090e

080019ac <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	4604      	mov	r4, r0
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	4603      	mov	r3, r0
 80019c0:	71bb      	strb	r3, [r7, #6]
 80019c2:	460b      	mov	r3, r1
 80019c4:	717b      	strb	r3, [r7, #5]
 80019c6:	4613      	mov	r3, r2
 80019c8:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 80019ca:	793b      	ldrb	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019d6:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80019d8:	7979      	ldrb	r1, [r7, #5]
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <i2c_master_write+0x80>)
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2302      	movs	r3, #2
 80019e6:	2200      	movs	r2, #0
 80019e8:	4811      	ldr	r0, [pc, #68]	; (8001a30 <i2c_master_write+0x84>)
 80019ea:	f7ff feef 	bl	80017cc <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	4619      	mov	r1, r3
 80019f2:	480f      	ldr	r0, [pc, #60]	; (8001a30 <i2c_master_write+0x84>)
 80019f4:	f7ff ff1d 	bl	8001832 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80019f8:	e00a      	b.n	8001a10 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80019fa:	480d      	ldr	r0, [pc, #52]	; (8001a30 <i2c_master_write+0x84>)
 80019fc:	f7ff fe8d 	bl	800171a <LL_I2C_IsActiveFlag_TXIS>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d004      	beq.n	8001a10 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4809      	ldr	r0, [pc, #36]	; (8001a30 <i2c_master_write+0x84>)
 8001a0c:	f7ff ff11 	bl	8001832 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <i2c_master_write+0x84>)
 8001a12:	f7ff fea8 	bl	8001766 <LL_I2C_IsActiveFlag_STOP>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0ee      	beq.n	80019fa <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <i2c_master_write+0x84>)
 8001a1e:	f7ff feb5 	bl	800178c <LL_I2C_ClearFlag_STOP>
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	80002000 	.word	0x80002000
 8001a30:	40005400 	.word	0x40005400

08001a34 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	4611      	mov	r1, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	70fb      	strb	r3, [r7, #3]
 8001a46:	460b      	mov	r3, r1
 8001a48:	70bb      	strb	r3, [r7, #2]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001a4e:	4a30      	ldr	r2, [pc, #192]	; (8001b10 <i2c_master_read+0xdc>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8001a54:	7c3b      	ldrb	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001a5a:	78bb      	ldrb	r3, [r7, #2]
 8001a5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a60:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <i2c_master_read+0xe0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 8001a68:	482b      	ldr	r0, [pc, #172]	; (8001b18 <i2c_master_read+0xe4>)
 8001a6a:	f7ff fe36 	bl	80016da <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001a6e:	7879      	ldrb	r1, [r7, #1]
 8001a70:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <i2c_master_read+0xe8>)
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4826      	ldr	r0, [pc, #152]	; (8001b18 <i2c_master_read+0xe4>)
 8001a80:	f7ff fea4 	bl	80017cc <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a84:	e00a      	b.n	8001a9c <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001a86:	4824      	ldr	r0, [pc, #144]	; (8001b18 <i2c_master_read+0xe4>)
 8001a88:	f7ff fe47 	bl	800171a <LL_I2C_IsActiveFlag_TXIS>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8001a92:	78bb      	ldrb	r3, [r7, #2]
 8001a94:	4619      	mov	r1, r3
 8001a96:	4820      	ldr	r0, [pc, #128]	; (8001b18 <i2c_master_read+0xe4>)
 8001a98:	f7ff fecb 	bl	8001832 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a9c:	481e      	ldr	r0, [pc, #120]	; (8001b18 <i2c_master_read+0xe4>)
 8001a9e:	f7ff fe62 	bl	8001766 <LL_I2C_IsActiveFlag_STOP>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0ee      	beq.n	8001a86 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001aa8:	481b      	ldr	r0, [pc, #108]	; (8001b18 <i2c_master_read+0xe4>)
 8001aaa:	f7ff fe6f 	bl	800178c <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001aae:	bf00      	nop
 8001ab0:	4819      	ldr	r0, [pc, #100]	; (8001b18 <i2c_master_read+0xe4>)
 8001ab2:	f7ff fe58 	bl	8001766 <LL_I2C_IsActiveFlag_STOP>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f9      	bne.n	8001ab0 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001abc:	7879      	ldrb	r1, [r7, #1]
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <i2c_master_read+0xec>)
 8001ac2:	9201      	str	r2, [sp, #4]
 8001ac4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac8:	9200      	str	r2, [sp, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	4812      	ldr	r0, [pc, #72]	; (8001b18 <i2c_master_read+0xe4>)
 8001ace:	f7ff fe7d 	bl	80017cc <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001ad2:	bf00      	nop
 8001ad4:	4810      	ldr	r0, [pc, #64]	; (8001b18 <i2c_master_read+0xe4>)
 8001ad6:	f7ff fe46 	bl	8001766 <LL_I2C_IsActiveFlag_STOP>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f9      	beq.n	8001ad4 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <i2c_master_read+0xe4>)
 8001ae2:	f7ff fe53 	bl	800178c <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001ae6:	480c      	ldr	r0, [pc, #48]	; (8001b18 <i2c_master_read+0xe4>)
 8001ae8:	f7ff fe07 	bl	80016fa <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <i2c_master_read+0xe4>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <i2c_master_read+0xe4>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <i2c_master_read+0xf0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <i2c_master_read+0xe0>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <i2c_master_read+0xdc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200001f4 	.word	0x200001f4
 8001b14:	200001f8 	.word	0x200001f8
 8001b18:	40005400 	.word	0x40005400
 8001b1c:	80002000 	.word	0x80002000
 8001b20:	80002400 	.word	0x80002400
 8001b24:	200001f9 	.word	0x200001f9

08001b28 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8001b28:	b598      	push	{r3, r4, r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001b2c:	4812      	ldr	r0, [pc, #72]	; (8001b78 <I2C1_EV_IRQHandler+0x50>)
 8001b2e:	f7ff fe07 	bl	8001740 <LL_I2C_IsActiveFlag_RXNE>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01c      	beq.n	8001b72 <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <I2C1_EV_IRQHandler+0x54>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <I2C1_EV_IRQHandler+0x58>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	1c59      	adds	r1, r3, #1
 8001b44:	b2c8      	uxtb	r0, r1
 8001b46:	490e      	ldr	r1, [pc, #56]	; (8001b80 <I2C1_EV_IRQHandler+0x58>)
 8001b48:	7008      	strb	r0, [r1, #0]
 8001b4a:	18d4      	adds	r4, r2, r3
 8001b4c:	480a      	ldr	r0, [pc, #40]	; (8001b78 <I2C1_EV_IRQHandler+0x50>)
 8001b4e:	f7ff fe63 	bl	8001818 <LL_I2C_ReceiveData8>
 8001b52:	4603      	mov	r3, r0
 8001b54:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <I2C1_EV_IRQHandler+0x58>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b13      	cmp	r3, #19
 8001b5e:	d903      	bls.n	8001b68 <I2C1_EV_IRQHandler+0x40>
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <I2C1_EV_IRQHandler+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e001      	b.n	8001b6c <I2C1_EV_IRQHandler+0x44>
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <I2C1_EV_IRQHandler+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <I2C1_EV_IRQHandler+0x5c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
	}
}
 8001b72:	bf00      	nop
 8001b74:	bd98      	pop	{r3, r4, r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	200001f4 	.word	0x200001f4
 8001b80:	200001f9 	.word	0x200001f9
 8001b84:	200001f8 	.word	0x200001f8

08001b88 <lis3mdl_read_byte>:
static uint8_t sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS;

uint64_t lastMovementTick = 0;

uint8_t lis3mdl_read_byte(uint8_t reg_addr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, sLIS3MDLI2Caddress, 0));
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <lis3mdl_read_byte+0x30>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	79fa      	ldrb	r2, [r7, #7]
 8001b9c:	f107 000f 	add.w	r0, r7, #15
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	9100      	str	r1, [sp, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	f7ff ff45 	bl	8001a34 <i2c_master_read>
 8001baa:	4603      	mov	r3, r0
 8001bac:	781b      	ldrb	r3, [r3, #0]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000001 	.word	0x20000001

08001bbc <lis3mdl_write_byte>:

void lis3mdl_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	460a      	mov	r2, r1
 8001bc6:	71fb      	strb	r3, [r7, #7]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, sLIS3MDLI2Caddress, 0);
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <lis3mdl_write_byte+0x28>)
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	79f9      	ldrb	r1, [r7, #7]
 8001bd2:	79b8      	ldrb	r0, [r7, #6]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f7ff fee9 	bl	80019ac <i2c_master_write>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000001 	.word	0x20000001

08001be8 <lis3mdl_init>:
	*z = (float)(zz/range_scale);
}


uint8_t lis3mdl_init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001bf2:	2064      	movs	r0, #100	; 0x64
 8001bf4:	f7ff fb16 	bl	8001224 <LL_mDelay>

	uint8_t val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8001bf8:	200f      	movs	r0, #15
 8001bfa:	f7ff ffc5 	bl	8001b88 <lis3mdl_read_byte>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71bb      	strb	r3, [r7, #6]

	if(val == LIS3MDL_WHO_AM_I_VALUE)
 8001c02:	79bb      	ldrb	r3, [r7, #6]
 8001c04:	2b3d      	cmp	r3, #61	; 0x3d
 8001c06:	d102      	bne.n	8001c0e <lis3mdl_init+0x26>
	{
		status = 1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	71fb      	strb	r3, [r7, #7]
 8001c0c:	e011      	b.n	8001c32 <lis3mdl_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS_ALTERNATIVE;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <lis3mdl_init+0x8c>)
 8001c10:	223c      	movs	r2, #60	; 0x3c
 8001c12:	701a      	strb	r2, [r3, #0]
		val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8001c14:	200f      	movs	r0, #15
 8001c16:	f7ff ffb7 	bl	8001b88 <lis3mdl_read_byte>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71bb      	strb	r3, [r7, #6]
		if(val == LIS3MDL_WHO_AM_I_VALUE)
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	2b3d      	cmp	r3, #61	; 0x3d
 8001c22:	d102      	bne.n	8001c2a <lis3mdl_init+0x42>
		{
			status = 1;
 8001c24:	2301      	movs	r3, #1
 8001c26:	71fb      	strb	r3, [r7, #7]
 8001c28:	e003      	b.n	8001c32 <lis3mdl_init+0x4a>
		}
		else
		{
			status = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	71fb      	strb	r3, [r7, #7]
			return status;
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	e01c      	b.n	8001c6c <lis3mdl_init+0x84>
		}
	}

	//acc device init

	uint8_t ctrl1 = LIS3MDL_CTRL1_OM_UHP | LIS3MDL_CTRL1_DO_80HZ | (1 << 7);
 8001c32:	23fc      	movs	r3, #252	; 0xfc
 8001c34:	717b      	strb	r3, [r7, #5]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL1, ctrl1);
 8001c36:	797b      	ldrb	r3, [r7, #5]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	2020      	movs	r0, #32
 8001c3c:	f7ff ffbe 	bl	8001bbc <lis3mdl_write_byte>

	uint8_t ctrl2 = LIS3MDL_CTRL2_FS_4GAUS;
 8001c40:	2300      	movs	r3, #0
 8001c42:	713b      	strb	r3, [r7, #4]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL2, ctrl2);
 8001c44:	793b      	ldrb	r3, [r7, #4]
 8001c46:	4619      	mov	r1, r3
 8001c48:	2021      	movs	r0, #33	; 0x21
 8001c4a:	f7ff ffb7 	bl	8001bbc <lis3mdl_write_byte>

	uint8_t ctrl3 = LIS3MDL_CTRL3_MD_CONTINUES;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	70fb      	strb	r3, [r7, #3]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL3, ctrl3);
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	4619      	mov	r1, r3
 8001c56:	2022      	movs	r0, #34	; 0x22
 8001c58:	f7ff ffb0 	bl	8001bbc <lis3mdl_write_byte>

	uint8_t ctrl4 = LIS3MDL_CTRL4_OMZ_UHP;
 8001c5c:	230c      	movs	r3, #12
 8001c5e:	70bb      	strb	r3, [r7, #2]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL4, ctrl4);
 8001c60:	78bb      	ldrb	r3, [r7, #2]
 8001c62:	4619      	mov	r1, r3
 8001c64:	2023      	movs	r0, #35	; 0x23
 8001c66:	f7ff ffa9 	bl	8001bbc <lis3mdl_write_byte>

	return status;
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000001 	.word	0x20000001

08001c78 <lps22hb_read_byte>:
#include "lps22hb.h"

uint8_t address_bar = LPS22HB_DEVICE_ADDRESS_0;

uint8_t lps22hb_read_byte(uint8_t reg_addr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_bar, 0));
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <lps22hb_read_byte+0x30>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	f107 000f 	add.w	r0, r7, #15
 8001c90:	2100      	movs	r1, #0
 8001c92:	9100      	str	r1, [sp, #0]
 8001c94:	2101      	movs	r1, #1
 8001c96:	f7ff fecd 	bl	8001a34 <i2c_master_read>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	781b      	ldrb	r3, [r3, #0]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000002 	.word	0x20000002

08001cac <lps22hb_write_byte>:


void lps22hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_bar, 0);
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <lps22hb_write_byte+0x28>)
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	79f9      	ldrb	r1, [r7, #7]
 8001cc2:	79b8      	ldrb	r0, [r7, #6]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f7ff fe71 	bl	80019ac <i2c_master_write>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000002 	.word	0x20000002

08001cd8 <lps22hb_init>:

    return (temperature/100);
}

uint8_t lps22hb_init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
	uint8_t status = 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8001ce2:	2064      	movs	r0, #100	; 0x64
 8001ce4:	f7ff fa9e 	bl	8001224 <LL_mDelay>

	uint8_t val = lps22hb_read_byte(LPS22HB_WHO_AM_I_ADDRES);
 8001ce8:	200f      	movs	r0, #15
 8001cea:	f7ff ffc5 	bl	8001c78 <lps22hb_read_byte>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71bb      	strb	r3, [r7, #6]

	if(val == LPS22HB_WHO_AM_I_VALUE)
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	2bb1      	cmp	r3, #177	; 0xb1
 8001cf6:	d102      	bne.n	8001cfe <lps22hb_init+0x26>
	{
		status = 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	71fb      	strb	r3, [r7, #7]
 8001cfc:	e011      	b.n	8001d22 <lps22hb_init+0x4a>
	}
	else
	{
		address_bar = LPS22HB_DEVICE_ADDRESS_1;
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <lps22hb_init+0x64>)
 8001d00:	22ba      	movs	r2, #186	; 0xba
 8001d02:	701a      	strb	r2, [r3, #0]
		val = lps22hb_read_byte(LPS22HB_WHO_AM_I_ADDRES);
 8001d04:	200f      	movs	r0, #15
 8001d06:	f7ff ffb7 	bl	8001c78 <lps22hb_read_byte>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71bb      	strb	r3, [r7, #6]
		if(val == LPS22HB_WHO_AM_I_VALUE)
 8001d0e:	79bb      	ldrb	r3, [r7, #6]
 8001d10:	2bb1      	cmp	r3, #177	; 0xb1
 8001d12:	d102      	bne.n	8001d1a <lps22hb_init+0x42>
		{
			status = 1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	71fb      	strb	r3, [r7, #7]
 8001d18:	e003      	b.n	8001d22 <lps22hb_init+0x4a>
		}
		else
		{
			status = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	71fb      	strb	r3, [r7, #7]
			return status;
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	e007      	b.n	8001d32 <lps22hb_init+0x5a>
		}
	}

	uint8_t ctrl1 = 0b01001010;
 8001d22:	234a      	movs	r3, #74	; 0x4a
 8001d24:	717b      	strb	r3, [r7, #5]
	lps22hb_write_byte(LPS22HB_ADDRESS_CTRL1, ctrl1);
 8001d26:	797b      	ldrb	r3, [r7, #5]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	2010      	movs	r0, #16
 8001d2c:	f7ff ffbe 	bl	8001cac <lps22hb_write_byte>

	return status;
 8001d30:	79fb      	ldrb	r3, [r7, #7]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000002 	.word	0x20000002

08001d40 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <lsm6ds0_read_byte+0x30>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	79fa      	ldrb	r2, [r7, #7]
 8001d54:	f107 000f 	add.w	r0, r7, #15
 8001d58:	2100      	movs	r1, #0
 8001d5a:	9100      	str	r1, [sp, #0]
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	f7ff fe69 	bl	8001a34 <i2c_master_read>
 8001d62:	4603      	mov	r3, r0
 8001d64:	781b      	ldrb	r3, [r3, #0]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000003 	.word	0x20000003

08001d74 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <lsm6ds0_write_byte+0x28>)
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	79f9      	ldrb	r1, [r7, #7]
 8001d8a:	79b8      	ldrb	r0, [r7, #6]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f7ff fe0d 	bl	80019ac <i2c_master_write>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000003 	.word	0x20000003

08001da0 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001da6:	2301      	movs	r3, #1
 8001da8:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001daa:	2064      	movs	r0, #100	; 0x64
 8001dac:	f7ff fa3a 	bl	8001224 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001db0:	200f      	movs	r0, #15
 8001db2:	f7ff ffc5 	bl	8001d40 <lsm6ds0_read_byte>
 8001db6:	4603      	mov	r3, r0
 8001db8:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001dba:	79bb      	ldrb	r3, [r7, #6]
 8001dbc:	2b6a      	cmp	r3, #106	; 0x6a
 8001dbe:	d102      	bne.n	8001dc6 <lsm6ds0_init+0x26>
	{
		status = 1;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	71fb      	strb	r3, [r7, #7]
 8001dc4:	e00f      	b.n	8001de6 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <lsm6ds0_init+0x74>)
 8001dc8:	22d7      	movs	r2, #215	; 0xd7
 8001dca:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001dcc:	200f      	movs	r0, #15
 8001dce:	f7ff ffb7 	bl	8001d40 <lsm6ds0_read_byte>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001dd6:	79bb      	ldrb	r3, [r7, #6]
 8001dd8:	2b6a      	cmp	r3, #106	; 0x6a
 8001dda:	d102      	bne.n	8001de2 <lsm6ds0_init+0x42>
		{
			status = 1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	e001      	b.n	8001de6 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	71fb      	strb	r3, [r7, #7]
			//return status;
		}
	}

	//acc device init
	uint8_t ctrl1 = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 8001de6:	2010      	movs	r0, #16
 8001de8:	f7ff ffaa 	bl	8001d40 <lsm6ds0_read_byte>
 8001dec:	4603      	mov	r3, r0
 8001dee:	717b      	strb	r3, [r7, #5]
	ctrl1 &= ~0xFC;
 8001df0:	797b      	ldrb	r3, [r7, #5]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	717b      	strb	r3, [r7, #5]
	ctrl1 |= 0x70;
 8001df8:	797b      	ldrb	r3, [r7, #5]
 8001dfa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001dfe:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8001e00:	797b      	ldrb	r3, [r7, #5]
 8001e02:	4619      	mov	r1, r3
 8001e04:	2010      	movs	r0, #16
 8001e06:	f7ff ffb5 	bl	8001d74 <lsm6ds0_write_byte>

	return status;
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000003 	.word	0x20000003

08001e18 <NVIC_SetPriorityGrouping>:
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <LL_RCC_HSI_Enable+0x1c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <LL_RCC_HSI_Enable+0x1c>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6013      	str	r3, [r2, #0]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000

08001e80 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <LL_RCC_HSI_IsReady+0x20>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4904      	ldr	r1, [pc, #16]	; (8001ecc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <LL_RCC_SetSysClkSource+0x24>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f023 0203 	bic.w	r2, r3, #3
 8001ee0:	4904      	ldr	r1, [pc, #16]	; (8001ef4 <LL_RCC_SetSysClkSource+0x24>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <LL_RCC_GetSysClkSource+0x18>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000

08001f14 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <LL_RCC_SetAHBPrescaler+0x24>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f24:	4904      	ldr	r1, [pc, #16]	; (8001f38 <LL_RCC_SetAHBPrescaler+0x24>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000

08001f3c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f4c:	4904      	ldr	r1, [pc, #16]	; (8001f60 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40021000 	.word	0x40021000

08001f64 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f74:	4904      	ldr	r1, [pc, #16]	; (8001f88 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40021000 	.word	0x40021000

08001f8c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <LL_RCC_SetI2CClockSource+0x2c>)
 8001f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	0e1b      	lsrs	r3, r3, #24
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001fa6:	4904      	ldr	r1, [pc, #16]	; (8001fb8 <LL_RCC_SetI2CClockSource+0x2c>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40021000 	.word	0x40021000

08001fbc <LL_APB1_GRP1_EnableClock>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	4907      	ldr	r1, [pc, #28]	; (8001fe8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fda:	68fb      	ldr	r3, [r7, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40021000 	.word	0x40021000

08001fec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ff6:	699a      	ldr	r2, [r3, #24]
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002002:	699a      	ldr	r2, [r3, #24]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	40021000 	.word	0x40021000

0800201c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <LL_FLASH_SetLatency+0x24>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 0207 	bic.w	r2, r3, #7
 800202c:	4904      	ldr	r1, [pc, #16]	; (8002040 <LL_FLASH_SetLatency+0x24>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	40022000 	.word	0x40022000

08002044 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <LL_FLASH_GetLatency+0x18>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40022000 	.word	0x40022000

08002060 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b04      	cmp	r3, #4
 800206c:	d106      	bne.n	800207c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <LL_SYSTICK_SetClkSource+0x34>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a08      	ldr	r2, [pc, #32]	; (8002094 <LL_SYSTICK_SetClkSource+0x34>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800207a:	e005      	b.n	8002088 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <LL_SYSTICK_SetClkSource+0x34>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <LL_SYSTICK_SetClkSource+0x34>)
 8002082:	f023 0304 	bic.w	r3, r3, #4
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e010 	.word	0xe000e010

08002098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209a:	b085      	sub	sp, #20
 800209c:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800209e:	2001      	movs	r0, #1
 80020a0:	f7ff ffa4 	bl	8001fec <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80020a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80020a8:	f7ff ff88 	bl	8001fbc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ac:	2003      	movs	r0, #3
 80020ae:	f7ff feb3 	bl	8001e18 <NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020b2:	f000 f867 	bl	8002184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020b6:	f7ff f911 	bl	80012dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80020ba:	f7ff fbf9 	bl	80018b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80020be:	f000 fa4d 	bl	800255c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  lsm6ds0_init();
 80020c2:	f7ff fe6d 	bl	8001da0 <lsm6ds0_init>
  hts221_init();
 80020c6:	f7ff fa1d 	bl	8001504 <hts221_init>
  lps22hb_init();
 80020ca:	f7ff fe05 	bl	8001cd8 <lps22hb_init>
  lis3mdl_init();
 80020ce:	f7ff fd8b 	bl	8001be8 <lis3mdl_init>


  initCD_Pin();
 80020d2:	f000 fb0b 	bl	80026ec <initCD_Pin>
   initCS_Pin();
 80020d6:	f000 faef 	bl	80026b8 <initCS_Pin>
   initRES_Pin();
 80020da:	f000 fb20 	bl	800271e <initRES_Pin>

   LL_mDelay(50);
 80020de:	2032      	movs	r0, #50	; 0x32
 80020e0:	f7ff f8a0 	bl	8001224 <LL_mDelay>

   lcdInitialise(LCD_ORIENTATION3);
 80020e4:	20c0      	movs	r0, #192	; 0xc0
 80020e6:	f000 fce6 	bl	8002ab6 <lcdInitialise>
   lcdClearDisplay(decodeRgbValue(0, 0, 0));
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2000      	movs	r0, #0
 80020f0:	f001 f824 	bl	800313c <decodeRgbValue>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 fdb8 	bl	8002c6c <lcdClearDisplay>



   uint8_t state = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  memset(formated_text, '\0', sizeof(formated_text));
 8002100:	2232      	movs	r2, #50	; 0x32
 8002102:	2100      	movs	r1, #0
 8002104:	481d      	ldr	r0, [pc, #116]	; (800217c <main+0xe4>)
 8002106:	f001 f8bb 	bl	8003280 <memset>
	  sprintf(formated_text, "Temp [C]: %0.1f", hts221_get_temp());
 800210a:	f7ff f971 	bl	80013f0 <hts221_get_temp>
 800210e:	ee10 3a10 	vmov	r3, s0
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa18 	bl	8000548 <__aeabi_f2d>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4918      	ldr	r1, [pc, #96]	; (8002180 <main+0xe8>)
 800211e:	4817      	ldr	r0, [pc, #92]	; (800217c <main+0xe4>)
 8002120:	f001 fd20 	bl	8003b64 <siprintf>

	  LL_mDelay(200);
 8002124:	20c8      	movs	r0, #200	; 0xc8
 8002126:	f7ff f87d 	bl	8001224 <LL_mDelay>

	  lcdPutS(formated_text, lcdTextX(2), lcdTextY(3), decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
 800212a:	2002      	movs	r0, #2
 800212c:	f001 f822 	bl	8003174 <lcdTextX>
 8002130:	4603      	mov	r3, r0
 8002132:	461c      	mov	r4, r3
 8002134:	2003      	movs	r0, #3
 8002136:	f001 f82e 	bl	8003196 <lcdTextY>
 800213a:	4603      	mov	r3, r0
 800213c:	461d      	mov	r5, r3
 800213e:	22ff      	movs	r2, #255	; 0xff
 8002140:	21ff      	movs	r1, #255	; 0xff
 8002142:	20ff      	movs	r0, #255	; 0xff
 8002144:	f000 fffa 	bl	800313c <decodeRgbValue>
 8002148:	4603      	mov	r3, r0
 800214a:	461e      	mov	r6, r3
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	2000      	movs	r0, #0
 8002152:	f000 fff3 	bl	800313c <decodeRgbValue>
 8002156:	4603      	mov	r3, r0
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	4633      	mov	r3, r6
 800215c:	462a      	mov	r2, r5
 800215e:	4621      	mov	r1, r4
 8002160:	4806      	ldr	r0, [pc, #24]	; (800217c <main+0xe4>)
 8002162:	f001 f826 	bl	80031b2 <lcdPutS>

	  if(state==0){
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <main+0xdc>
		  DrawSun();
 800216c:	f000 f844 	bl	80021f8 <DrawSun>
		  state=1;
 8002170:	2301      	movs	r3, #1
 8002172:	71fb      	strb	r3, [r7, #7]
	  }


	  LL_mDelay(100);
 8002174:	2064      	movs	r0, #100	; 0x64
 8002176:	f7ff f855 	bl	8001224 <LL_mDelay>
	  memset(formated_text, '\0', sizeof(formated_text));
 800217a:	e7c1      	b.n	8002100 <main+0x68>
 800217c:	200001fc 	.word	0x200001fc
 8002180:	08006070 	.word	0x08006070

08002184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002188:	2000      	movs	r0, #0
 800218a:	f7ff ff47 	bl	800201c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800218e:	f7ff ff59 	bl	8002044 <LL_FLASH_GetLatency>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0x18>
  {
  Error_Handler();
 8002198:	f000 f87f 	bl	800229a <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 800219c:	f7ff fe60 	bl	8001e60 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80021a0:	bf00      	nop
 80021a2:	f7ff fe6d 	bl	8001e80 <LL_RCC_HSI_IsReady>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d1fa      	bne.n	80021a2 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80021ac:	2010      	movs	r0, #16
 80021ae:	f7ff fe79 	bl	8001ea4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7ff feae 	bl	8001f14 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff febf 	bl	8001f3c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7ff fed0 	bl	8001f64 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff fe83 	bl	8001ed0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80021ca:	bf00      	nop
 80021cc:	f7ff fe94 	bl	8001ef8 <LL_RCC_GetSysClkSource>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1fa      	bne.n	80021cc <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 80021d6:	4807      	ldr	r0, [pc, #28]	; (80021f4 <SystemClock_Config+0x70>)
 80021d8:	f7ff f816 	bl	8001208 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80021dc:	2004      	movs	r0, #4
 80021de:	f7ff ff3f 	bl	8002060 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 80021e2:	4804      	ldr	r0, [pc, #16]	; (80021f4 <SystemClock_Config+0x70>)
 80021e4:	f7ff f844 	bl	8001270 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80021e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80021ec:	f7ff fece 	bl	8001f8c <LL_RCC_SetI2CClockSource>
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	007a1200 	.word	0x007a1200

080021f8 <DrawSun>:

/* USER CODE BEGIN 4 */
void DrawSun(void){
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af02      	add	r7, sp, #8

	for(int i=12; i>0;i--){
 80021fe:	230c      	movs	r3, #12
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	e00f      	b.n	8002224 <DrawSun+0x2c>
		lcdCircle(64, 85, i, decodeRgbValue(255, 255, 51));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	b21c      	sxth	r4, r3
 8002208:	2233      	movs	r2, #51	; 0x33
 800220a:	21ff      	movs	r1, #255	; 0xff
 800220c:	20ff      	movs	r0, #255	; 0xff
 800220e:	f000 ff95 	bl	800313c <decodeRgbValue>
 8002212:	4603      	mov	r3, r0
 8002214:	4622      	mov	r2, r4
 8002216:	2155      	movs	r1, #85	; 0x55
 8002218:	2040      	movs	r0, #64	; 0x40
 800221a:	f000 fe4c 	bl	8002eb6 <lcdCircle>
	for(int i=12; i>0;i--){
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3b01      	subs	r3, #1
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	dcec      	bgt.n	8002204 <DrawSun+0xc>
	}

	lcdLine(64, 65, 64, 105, decodeRgbValue(255, 255, 51));
 800222a:	2233      	movs	r2, #51	; 0x33
 800222c:	21ff      	movs	r1, #255	; 0xff
 800222e:	20ff      	movs	r0, #255	; 0xff
 8002230:	f000 ff84 	bl	800313c <decodeRgbValue>
 8002234:	4603      	mov	r3, r0
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2369      	movs	r3, #105	; 0x69
 800223a:	2240      	movs	r2, #64	; 0x40
 800223c:	2141      	movs	r1, #65	; 0x41
 800223e:	2040      	movs	r0, #64	; 0x40
 8002240:	f000 fd8d 	bl	8002d5e <lcdLine>
	lcdLine(42, 85, 85, 85, decodeRgbValue(255, 255, 51));
 8002244:	2233      	movs	r2, #51	; 0x33
 8002246:	21ff      	movs	r1, #255	; 0xff
 8002248:	20ff      	movs	r0, #255	; 0xff
 800224a:	f000 ff77 	bl	800313c <decodeRgbValue>
 800224e:	4603      	mov	r3, r0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2355      	movs	r3, #85	; 0x55
 8002254:	2255      	movs	r2, #85	; 0x55
 8002256:	2155      	movs	r1, #85	; 0x55
 8002258:	202a      	movs	r0, #42	; 0x2a
 800225a:	f000 fd80 	bl	8002d5e <lcdLine>
	lcdLine(50, 70, 79, 99, decodeRgbValue(255, 255, 51));
 800225e:	2233      	movs	r2, #51	; 0x33
 8002260:	21ff      	movs	r1, #255	; 0xff
 8002262:	20ff      	movs	r0, #255	; 0xff
 8002264:	f000 ff6a 	bl	800313c <decodeRgbValue>
 8002268:	4603      	mov	r3, r0
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2363      	movs	r3, #99	; 0x63
 800226e:	224f      	movs	r2, #79	; 0x4f
 8002270:	2146      	movs	r1, #70	; 0x46
 8002272:	2032      	movs	r0, #50	; 0x32
 8002274:	f000 fd73 	bl	8002d5e <lcdLine>
	lcdLine(49, 100, 80, 70, decodeRgbValue(255, 255, 51));
 8002278:	2233      	movs	r2, #51	; 0x33
 800227a:	21ff      	movs	r1, #255	; 0xff
 800227c:	20ff      	movs	r0, #255	; 0xff
 800227e:	f000 ff5d 	bl	800313c <decodeRgbValue>
 8002282:	4603      	mov	r3, r0
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2346      	movs	r3, #70	; 0x46
 8002288:	2250      	movs	r2, #80	; 0x50
 800228a:	2164      	movs	r1, #100	; 0x64
 800228c:	2031      	movs	r0, #49	; 0x31
 800228e:	f000 fd66 	bl	8002d5e <lcdLine>
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}

0800229a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <NVIC_GetPriorityGrouping>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <NVIC_EnableIRQ>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	4907      	ldr	r1, [pc, #28]	; (80022f4 <NVIC_EnableIRQ+0x30>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2001      	movs	r0, #1
 80022de:	fa00 f202 	lsl.w	r2, r0, r2
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000e100 	.word	0xe000e100

080022f8 <NVIC_SetPriority>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	2b00      	cmp	r3, #0
 800230a:	da0b      	bge.n	8002324 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	490c      	ldr	r1, [pc, #48]	; (8002344 <NVIC_SetPriority+0x4c>)
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	3b04      	subs	r3, #4
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	761a      	strb	r2, [r3, #24]
}
 8002322:	e009      	b.n	8002338 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	4907      	ldr	r1, [pc, #28]	; (8002348 <NVIC_SetPriority+0x50>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	440b      	add	r3, r1
 8002334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00
 8002348:	e000e100 	.word	0xe000e100

0800234c <NVIC_EncodePriority>:
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	; 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f1c3 0307 	rsb	r3, r3, #7
 8002366:	2b04      	cmp	r3, #4
 8002368:	bf28      	it	cs
 800236a:	2304      	movcs	r3, #4
 800236c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3304      	adds	r3, #4
 8002372:	2b06      	cmp	r3, #6
 8002374:	d902      	bls.n	800237c <NVIC_EncodePriority+0x30>
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3b03      	subs	r3, #3
 800237a:	e000      	b.n	800237e <NVIC_EncodePriority+0x32>
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	f04f 32ff 	mov.w	r2, #4294967295
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	401a      	ands	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002394:	f04f 31ff 	mov.w	r1, #4294967295
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	43d9      	mvns	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	4313      	orrs	r3, r2
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3724      	adds	r7, #36	; 0x24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <LL_AHB1_GRP1_EnableClock>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	4907      	ldr	r1, [pc, #28]	; (80023e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4013      	ands	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40021000 	.word	0x40021000

080023e4 <LL_APB2_GRP1_EnableClock>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	4907      	ldr	r1, [pc, #28]	; (8002410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40021000 	.word	0x40021000

08002414 <LL_SPI_Enable>:
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	601a      	str	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_SPI_SetStandard>:
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f023 0210 	bic.w	r2, r3, #16
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	605a      	str	r2, [r3, #4]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f043 0208 	orr.w	r2, r3, #8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	605a      	str	r2, [r3, #4]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f023 0208 	bic.w	r2, r3, #8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	605a      	str	r2, [r3, #4]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	bf0c      	ite	eq
 80024ae:	2301      	moveq	r3, #1
 80024b0:	2300      	movne	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	b2db      	uxtb	r3, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	330c      	adds	r3, #12
 8002510:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_GPIO_SetOutputPin>:
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	619a      	str	r2, [r3, #24]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_GPIO_ResetOutputPin>:
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b090      	sub	sp, #64	; 0x40
 8002560:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002562:	f107 0318 	add.w	r3, r7, #24
 8002566:	2228      	movs	r2, #40	; 0x28
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fe88 	bl	8003280 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	463b      	mov	r3, r7
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	60da      	str	r2, [r3, #12]
 800257c:	611a      	str	r2, [r3, #16]
 800257e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002580:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002584:	f7ff ff2e 	bl	80023e4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002588:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800258c:	f7ff ff12 	bl	80023b4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002590:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002594:	f7ff ff0e 	bl	80023b4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA7   ------> SPI1_MOSI
  PB3   ------> SPI1_SCK
  PB4   ------> SPI1_MISO
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800259c:	2302      	movs	r3, #2
 800259e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80025ac:	2305      	movs	r3, #5
 80025ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	463b      	mov	r3, r7
 80025b2:	4619      	mov	r1, r3
 80025b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b8:	f7fe fc41 	bl	8000e3e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 80025bc:	2318      	movs	r3, #24
 80025be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025c0:	2302      	movs	r3, #2
 80025c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80025c4:	2303      	movs	r3, #3
 80025c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80025d0:	2305      	movs	r3, #5
 80025d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	463b      	mov	r3, r7
 80025d6:	4619      	mov	r1, r3
 80025d8:	4823      	ldr	r0, [pc, #140]	; (8002668 <MX_SPI1_Init+0x10c>)
 80025da:	f7fe fc30 	bl	8000e3e <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80025de:	f7ff fe63 	bl	80022a8 <NVIC_GetPriorityGrouping>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2200      	movs	r2, #0
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff feaf 	bl	800234c <NVIC_EncodePriority>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4619      	mov	r1, r3
 80025f2:	2023      	movs	r0, #35	; 0x23
 80025f4:	f7ff fe80 	bl	80022f8 <NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 80025f8:	2023      	movs	r0, #35	; 0x23
 80025fa:	f7ff fe63 	bl	80022c4 <NVIC_EnableIRQ>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002602:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002606:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002608:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800260c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8002612:	2300      	movs	r3, #0
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 800261c:	2320      	movs	r3, #32
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002620:	2300      	movs	r3, #0
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002628:	2307      	movs	r3, #7
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c

  SPI1->CR2 |= 1 << 12;
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <MX_SPI1_Init+0x110>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a0e      	ldr	r2, [pc, #56]	; (800266c <MX_SPI1_Init+0x110>)
 8002632:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002636:	6053      	str	r3, [r2, #4]

   LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002638:	f107 0318 	add.w	r3, r7, #24
 800263c:	4619      	mov	r1, r3
 800263e:	480b      	ldr	r0, [pc, #44]	; (800266c <MX_SPI1_Init+0x110>)
 8002640:	f7fe fd79 	bl	8001136 <LL_SPI_Init>
   LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002644:	2100      	movs	r1, #0
 8002646:	4809      	ldr	r0, [pc, #36]	; (800266c <MX_SPI1_Init+0x110>)
 8002648:	f7ff fef4 	bl	8002434 <LL_SPI_SetStandard>
   LL_SPI_DisableNSSPulseMgt(SPI1);
 800264c:	4807      	ldr	r0, [pc, #28]	; (800266c <MX_SPI1_Init+0x110>)
 800264e:	f7ff ff14 	bl	800247a <LL_SPI_DisableNSSPulseMgt>
   LL_SPI_EnableNSSPulseMgt(SPI1);
 8002652:	4806      	ldr	r0, [pc, #24]	; (800266c <MX_SPI1_Init+0x110>)
 8002654:	f7ff ff01 	bl	800245a <LL_SPI_EnableNSSPulseMgt>
   LL_SPI_Enable(SPI1);
 8002658:	4804      	ldr	r0, [pc, #16]	; (800266c <MX_SPI1_Init+0x110>)
 800265a:	f7ff fedb 	bl	8002414 <LL_SPI_Enable>

}
 800265e:	bf00      	nop
 8002660:	3740      	adds	r7, #64	; 0x40
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	48000400 	.word	0x48000400
 800266c:	40013000 	.word	0x40013000

08002670 <readWriteSPI1>:

/* USER CODE BEGIN 1 */
unsigned char readWriteSPI1(unsigned char txData)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	LL_SPI_TransmitData8(SPI1, (uint8_t)txData);
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	4619      	mov	r1, r3
 800267e:	480d      	ldr	r0, [pc, #52]	; (80026b4 <readWriteSPI1+0x44>)
 8002680:	f7ff ff3e 	bl	8002500 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_TXE(SPI1) != SET);
 8002684:	bf00      	nop
 8002686:	480b      	ldr	r0, [pc, #44]	; (80026b4 <readWriteSPI1+0x44>)
 8002688:	f7ff ff1a 	bl	80024c0 <LL_SPI_IsActiveFlag_TXE>
 800268c:	4603      	mov	r3, r0
 800268e:	2b01      	cmp	r3, #1
 8002690:	d1f9      	bne.n	8002686 <readWriteSPI1+0x16>

	// wait until RXNE = 1
	while(LL_SPI_IsActiveFlag_RXNE(SPI1) != SET);
 8002692:	bf00      	nop
 8002694:	4807      	ldr	r0, [pc, #28]	; (80026b4 <readWriteSPI1+0x44>)
 8002696:	f7ff ff00 	bl	800249a <LL_SPI_IsActiveFlag_RXNE>
 800269a:	4603      	mov	r3, r0
 800269c:	2b01      	cmp	r3, #1
 800269e:	d1f9      	bne.n	8002694 <readWriteSPI1+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = LL_SPI_ReceiveData8(SPI1);
 80026a0:	4804      	ldr	r0, [pc, #16]	; (80026b4 <readWriteSPI1+0x44>)
 80026a2:	f7ff ff20 	bl	80024e6 <LL_SPI_ReceiveData8>
 80026a6:	4603      	mov	r3, r0
 80026a8:	73fb      	strb	r3, [r7, #15]

	return rxData;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40013000 	.word	0x40013000

080026b8 <initCS_Pin>:

void initCS_Pin(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
	cs_set();
 80026bc:	f000 f802 	bl	80026c4 <cs_set>
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <cs_set>:

void cs_set(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80026c8:	2120      	movs	r1, #32
 80026ca:	4802      	ldr	r0, [pc, #8]	; (80026d4 <cs_set+0x10>)
 80026cc:	f7ff ff2a 	bl	8002524 <LL_GPIO_SetOutputPin>
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	48000400 	.word	0x48000400

080026d8 <cs_reset>:

void cs_reset(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80026dc:	2120      	movs	r1, #32
 80026de:	4802      	ldr	r0, [pc, #8]	; (80026e8 <cs_reset+0x10>)
 80026e0:	f7ff ff2e 	bl	8002540 <LL_GPIO_ResetOutputPin>
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	48000400 	.word	0x48000400

080026ec <initCD_Pin>:

void initCD_Pin(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <cd_set>:

void cd_set(void)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80026fe:	2110      	movs	r1, #16
 8002700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002704:	f7ff ff0e 	bl	8002524 <LL_GPIO_SetOutputPin>
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <cd_reset>:

void cd_reset(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8002710:	2110      	movs	r1, #16
 8002712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002716:	f7ff ff13 	bl	8002540 <LL_GPIO_ResetOutputPin>
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}

0800271e <initRES_Pin>:

void initRES_Pin(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	*/
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <res_set>:

void res_set(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8002730:	2108      	movs	r1, #8
 8002732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002736:	f7ff fef5 	bl	8002524 <LL_GPIO_SetOutputPin>
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}

0800273e <res_reset>:

void res_reset(void)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8002742:	2108      	movs	r1, #8
 8002744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002748:	f7ff fefa 	bl	8002540 <LL_GPIO_ResetOutputPin>
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <HardFault_Handler+0x4>

08002764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <MemManage_Handler+0x4>

0800276a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800276e:	e7fe      	b.n	800276e <BusFault_Handler+0x4>

08002770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <UsageFault_Handler+0x4>

08002776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
	return 1;
 80027c0:	2301      	movs	r3, #1
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_kill>:

int _kill(int pid, int sig)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027d6:	f000 fd29 	bl	800322c <__errno>
 80027da:	4603      	mov	r3, r0
 80027dc:	2216      	movs	r2, #22
 80027de:	601a      	str	r2, [r3, #0]
	return -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_exit>:

void _exit (int status)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ffe7 	bl	80027cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80027fe:	e7fe      	b.n	80027fe <_exit+0x12>

08002800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e00a      	b.n	8002828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002812:	f3af 8000 	nop.w
 8002816:	4601      	mov	r1, r0
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	60ba      	str	r2, [r7, #8]
 800281e:	b2ca      	uxtb	r2, r1
 8002820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	dbf0      	blt.n	8002812 <_read+0x12>
	}

return len;
 8002830:	687b      	ldr	r3, [r7, #4]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e009      	b.n	8002860 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	60ba      	str	r2, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	dbf1      	blt.n	800284c <_write+0x12>
	}
	return len;
 8002868:	687b      	ldr	r3, [r7, #4]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_close>:

int _close(int file)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
	return -1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800289a:	605a      	str	r2, [r3, #4]
	return 0;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <_isatty>:

int _isatty(int file)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
	return 1;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
	return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <_sbrk+0x50>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <_sbrk+0x16>
		heap_end = &end;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <_sbrk+0x50>)
 80028ee:	4a10      	ldr	r2, [pc, #64]	; (8002930 <_sbrk+0x54>)
 80028f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <_sbrk+0x50>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <_sbrk+0x50>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	466a      	mov	r2, sp
 8002902:	4293      	cmp	r3, r2
 8002904:	d907      	bls.n	8002916 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002906:	f000 fc91 	bl	800322c <__errno>
 800290a:	4603      	mov	r3, r0
 800290c:	220c      	movs	r2, #12
 800290e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002910:	f04f 33ff 	mov.w	r3, #4294967295
 8002914:	e006      	b.n	8002924 <_sbrk+0x48>
	}

	heap_end += incr;
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <_sbrk+0x50>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	4a03      	ldr	r2, [pc, #12]	; (800292c <_sbrk+0x50>)
 8002920:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000230 	.word	0x20000230
 8002930:	20000248 	.word	0x20000248

08002934 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <SystemInit+0x84>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <SystemInit+0x84>)
 8002940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002948:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <SystemInit+0x88>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <SystemInit+0x88>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <SystemInit+0x88>)
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	4918      	ldr	r1, [pc, #96]	; (80029bc <SystemInit+0x88>)
 800295a:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <SystemInit+0x8c>)
 800295c:	4013      	ands	r3, r2
 800295e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <SystemInit+0x88>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a15      	ldr	r2, [pc, #84]	; (80029bc <SystemInit+0x88>)
 8002966:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800296a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <SystemInit+0x88>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a11      	ldr	r2, [pc, #68]	; (80029bc <SystemInit+0x88>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800297a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <SystemInit+0x88>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <SystemInit+0x88>)
 8002982:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002986:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <SystemInit+0x88>)
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	4a0b      	ldr	r2, [pc, #44]	; (80029bc <SystemInit+0x88>)
 800298e:	f023 030f 	bic.w	r3, r3, #15
 8002992:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <SystemInit+0x88>)
 8002996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002998:	4908      	ldr	r1, [pc, #32]	; (80029bc <SystemInit+0x88>)
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <SystemInit+0x90>)
 800299c:	4013      	ands	r3, r2
 800299e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <SystemInit+0x88>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <SystemInit+0x84>)
 80029a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029ac:	609a      	str	r2, [r3, #8]
#endif
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000ed00 	.word	0xe000ed00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	f87fc00c 	.word	0xf87fc00c
 80029c4:	ff00fccc 	.word	0xff00fccc

080029c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80029cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80029ce:	e003      	b.n	80029d8 <LoopCopyDataInit>

080029d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80029d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80029d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80029d6:	3104      	adds	r1, #4

080029d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80029d8:	480b      	ldr	r0, [pc, #44]	; (8002a08 <LoopForever+0xa>)
	ldr	r3, =_edata
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <LoopForever+0xe>)
	adds	r2, r0, r1
 80029dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80029de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80029e0:	d3f6      	bcc.n	80029d0 <CopyDataInit>
	ldr	r2, =_sbss
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <LoopForever+0x12>)
	b	LoopFillZerobss
 80029e4:	e002      	b.n	80029ec <LoopFillZerobss>

080029e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80029e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80029e8:	f842 3b04 	str.w	r3, [r2], #4

080029ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <LoopForever+0x16>)
	cmp	r2, r3
 80029ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80029f0:	d3f9      	bcc.n	80029e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029f2:	f7ff ff9f 	bl	8002934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f6:	f000 fc1f 	bl	8003238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029fa:	f7ff fb4d 	bl	8002098 <main>

080029fe <LoopForever>:

LoopForever:
    b LoopForever
 80029fe:	e7fe      	b.n	80029fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a00:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002a04:	08006764 	.word	0x08006764
	ldr	r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a0c:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8002a10:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8002a14:	20000244 	.word	0x20000244

08002a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a18:	e7fe      	b.n	8002a18 <ADC1_2_IRQHandler>

08002a1a <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 8002a1e:	f7ff fe8e 	bl	800273e <res_reset>
	LL_mDelay(100);
 8002a22:	2064      	movs	r0, #100	; 0x64
 8002a24:	f7fe fbfe 	bl	8001224 <LL_mDelay>

	res_set();
 8002a28:	f7ff fe80 	bl	800272c <res_set>
	LL_mDelay(100);
 8002a2c:	2064      	movs	r0, #100	; 0x64
 8002a2e:	f7fe fbf9 	bl	8001224 <LL_mDelay>
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 8002a40:	f7ff fe64 	bl	800270c <cd_reset>
	cs_reset();
 8002a44:	f7ff fe48 	bl	80026d8 <cs_reset>
	readWriteSPI1(address);
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fe10 	bl	8002670 <readWriteSPI1>
	cs_set();
 8002a50:	f7ff fe38 	bl	80026c4 <cs_set>
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <lcdWriteParameter>:

void lcdWriteParameter(uint8_t parameter)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
	cd_set();
 8002a66:	f7ff fe48 	bl	80026fa <cd_set>
	cs_reset();
 8002a6a:	f7ff fe35 	bl	80026d8 <cs_reset>
	readWriteSPI1(parameter);
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fdfd 	bl	8002670 <readWriteSPI1>
	cs_set();
 8002a76:	f7ff fe25 	bl	80026c4 <cs_set>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	71fb      	strb	r3, [r7, #7]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	71bb      	strb	r3, [r7, #6]
	cd_set();
 8002a92:	f7ff fe32 	bl	80026fa <cd_set>
	cs_reset();
 8002a96:	f7ff fe1f 	bl	80026d8 <cs_reset>
	readWriteSPI1(dataByte1);
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fde7 	bl	8002670 <readWriteSPI1>
	readWriteSPI1(dataByte2);
 8002aa2:	79bb      	ldrb	r3, [r7, #6]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fde3 	bl	8002670 <readWriteSPI1>
	cs_set();
 8002aaa:	f7ff fe0b 	bl	80026c4 <cs_set>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <lcdInitialise>:

void lcdInitialise(uint8_t orientation)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 8002ac0:	f7ff ffab 	bl	8002a1a <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 8002ac4:	2011      	movs	r0, #17
 8002ac6:	f7ff ffb6 	bl	8002a36 <lcdWriteCommand>
    LL_mDelay(100); //Delay(10000); // Wait for the screen to wake up
 8002aca:	2064      	movs	r0, #100	; 0x64
 8002acc:	f7fe fbaa 	bl	8001224 <LL_mDelay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 8002ad0:	203a      	movs	r0, #58	; 0x3a
 8002ad2:	f7ff ffb0 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 8002ad6:	2005      	movs	r0, #5
 8002ad8:	f7ff ffc0 	bl	8002a5c <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 8002adc:	2026      	movs	r0, #38	; 0x26
 8002ade:	f7ff ffaa 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 8002ae2:	2004      	movs	r0, #4
 8002ae4:	f7ff ffba 	bl	8002a5c <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8002ae8:	20f2      	movs	r0, #242	; 0xf2
 8002aea:	f7ff ffa4 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 8002aee:	2001      	movs	r0, #1
 8002af0:	f7ff ffb4 	bl	8002a5c <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 8002af4:	20e0      	movs	r0, #224	; 0xe0
 8002af6:	f7ff ff9e 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8002afa:	203f      	movs	r0, #63	; 0x3f
 8002afc:	f7ff ffae 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 8002b00:	2025      	movs	r0, #37	; 0x25
 8002b02:	f7ff ffab 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 8002b06:	201c      	movs	r0, #28
 8002b08:	f7ff ffa8 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 8002b0c:	201e      	movs	r0, #30
 8002b0e:	f7ff ffa5 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 8002b12:	2020      	movs	r0, #32
 8002b14:	f7ff ffa2 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 8002b18:	2012      	movs	r0, #18
 8002b1a:	f7ff ff9f 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 8002b1e:	202a      	movs	r0, #42	; 0x2a
 8002b20:	f7ff ff9c 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 8002b24:	2090      	movs	r0, #144	; 0x90
 8002b26:	f7ff ff99 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 8002b2a:	2024      	movs	r0, #36	; 0x24
 8002b2c:	f7ff ff96 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 8002b30:	2011      	movs	r0, #17
 8002b32:	f7ff ff93 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7ff ff90 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7ff ff8d 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7ff ff8a 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7ff ff87 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7ff ff84 	bl	8002a5c <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 8002b54:	20e1      	movs	r0, #225	; 0xe1
 8002b56:	f7ff ff6e 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 8002b5a:	2020      	movs	r0, #32
 8002b5c:	f7ff ff7e 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 8002b60:	2020      	movs	r0, #32
 8002b62:	f7ff ff7b 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 8002b66:	2020      	movs	r0, #32
 8002b68:	f7ff ff78 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 8002b6c:	2020      	movs	r0, #32
 8002b6e:	f7ff ff75 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 8002b72:	2005      	movs	r0, #5
 8002b74:	f7ff ff72 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7ff ff6f 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 8002b7e:	2015      	movs	r0, #21
 8002b80:	f7ff ff6c 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 8002b84:	20a7      	movs	r0, #167	; 0xa7
 8002b86:	f7ff ff69 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 8002b8a:	203d      	movs	r0, #61	; 0x3d
 8002b8c:	f7ff ff66 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 8002b90:	2018      	movs	r0, #24
 8002b92:	f7ff ff63 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 8002b96:	2025      	movs	r0, #37	; 0x25
 8002b98:	f7ff ff60 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 8002b9c:	202a      	movs	r0, #42	; 0x2a
 8002b9e:	f7ff ff5d 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 8002ba2:	202b      	movs	r0, #43	; 0x2b
 8002ba4:	f7ff ff5a 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 8002ba8:	202b      	movs	r0, #43	; 0x2b
 8002baa:	f7ff ff57 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 8002bae:	203a      	movs	r0, #58	; 0x3a
 8002bb0:	f7ff ff54 	bl	8002a5c <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 8002bb4:	20b1      	movs	r0, #177	; 0xb1
 8002bb6:	f7ff ff3e 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 8002bba:	2008      	movs	r0, #8
 8002bbc:	f7ff ff4e 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 8002bc0:	2008      	movs	r0, #8
 8002bc2:	f7ff ff4b 	bl	8002a5c <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 8002bc6:	20b4      	movs	r0, #180	; 0xb4
 8002bc8:	f7ff ff35 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8002bcc:	2007      	movs	r0, #7
 8002bce:	f7ff ff45 	bl	8002a5c <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 8002bd2:	20c0      	movs	r0, #192	; 0xc0
 8002bd4:	f7ff ff2f 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8002bd8:	200a      	movs	r0, #10
 8002bda:	f7ff ff3f 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 8002bde:	2002      	movs	r0, #2
 8002be0:	f7ff ff3c 	bl	8002a5c <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 8002be4:	20c1      	movs	r0, #193	; 0xc1
 8002be6:	f7ff ff26 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 8002bea:	2002      	movs	r0, #2
 8002bec:	f7ff ff36 	bl	8002a5c <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 8002bf0:	20c5      	movs	r0, #197	; 0xc5
 8002bf2:	f7ff ff20 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 8002bf6:	2050      	movs	r0, #80	; 0x50
 8002bf8:	f7ff ff30 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 8002bfc:	205b      	movs	r0, #91	; 0x5b
 8002bfe:	f7ff ff2d 	bl	8002a5c <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 8002c02:	20c7      	movs	r0, #199	; 0xc7
 8002c04:	f7ff ff17 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 8002c08:	2040      	movs	r0, #64	; 0x40
 8002c0a:	f7ff ff27 	bl	8002a5c <lcdWriteParameter>

    lcdWriteCommand(SET_COLUMN_ADDRESS);
 8002c0e:	202a      	movs	r0, #42	; 0x2a
 8002c10:	f7ff ff11 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x00); // XSH
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7ff ff21 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // XSL
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7ff ff1e 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // XEH
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7ff ff1b 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x7f); // XEL (128 pixels x)
 8002c26:	207f      	movs	r0, #127	; 0x7f
 8002c28:	f7ff ff18 	bl	8002a5c <lcdWriteParameter>

    lcdWriteCommand(SET_PAGE_ADDRESS);
 8002c2c:	202b      	movs	r0, #43	; 0x2b
 8002c2e:	f7ff ff02 	bl	8002a36 <lcdWriteCommand>
    lcdWriteParameter(0x00);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7ff ff12 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f7ff ff0f 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7ff ff0c 	bl	8002a5c <lcdWriteParameter>
    lcdWriteParameter(0x7f); // 128 pixels y
 8002c44:	207f      	movs	r0, #127	; 0x7f
 8002c46:	f7ff ff09 	bl	8002a5c <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 8002c4a:	2036      	movs	r0, #54	; 0x36
 8002c4c:	f7ff fef3 	bl	8002a36 <lcdWriteCommand>
	lcdWriteParameter(orientation);
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff02 	bl	8002a5c <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 8002c58:	2029      	movs	r0, #41	; 0x29
 8002c5a:	f7ff feec 	bl	8002a36 <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 8002c5e:	202c      	movs	r0, #44	; 0x2c
 8002c60:	f7ff fee9 	bl	8002a36 <lcdWriteCommand>
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	80fb      	strh	r3, [r7, #6]
	uint16_t pixel;

	// Set the column address to 0-127
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8002c76:	202a      	movs	r0, #42	; 0x2a
 8002c78:	f7ff fedd 	bl	8002a36 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7ff feed 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002c82:	2000      	movs	r0, #0
 8002c84:	f7ff feea 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7ff fee7 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8002c8e:	207f      	movs	r0, #127	; 0x7f
 8002c90:	f7ff fee4 	bl	8002a5c <lcdWriteParameter>

	// Set the page address to 0-127
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8002c94:	202b      	movs	r0, #43	; 0x2b
 8002c96:	f7ff fece 	bl	8002a36 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7ff fede 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7ff fedb 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7ff fed8 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8002cac:	207f      	movs	r0, #127	; 0x7f
 8002cae:	f7ff fed5 	bl	8002a5c <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 8002cb2:	202c      	movs	r0, #44	; 0x2c
 8002cb4:	f7ff febf 	bl	8002a36 <lcdWriteCommand>
	for(pixel = 0; pixel < 16385; pixel++)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	81fb      	strh	r3, [r7, #14]
 8002cbc:	e00c      	b.n	8002cd8 <lcdClearDisplay+0x6c>
	{
		lcdWriteData(colour >> 8, colour);
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	88fa      	ldrh	r2, [r7, #6]
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fed8 	bl	8002a82 <lcdWriteData>
	for(pixel = 0; pixel < 16385; pixel++)
 8002cd2:	89fb      	ldrh	r3, [r7, #14]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	81fb      	strh	r3, [r7, #14]
 8002cd8:	89fb      	ldrh	r3, [r7, #14]
 8002cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cde:	d9ee      	bls.n	8002cbe <lcdClearDisplay+0x52>
	}
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <lcdPlot>:

void lcdPlot(uint8_t x, uint8_t y, uint16_t colour)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	71fb      	strb	r3, [r7, #7]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	71bb      	strb	r3, [r7, #6]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	80bb      	strh	r3, [r7, #4]
	// Horizontal Address Start Position
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8002cfc:	202a      	movs	r0, #42	; 0x2a
 8002cfe:	f7ff fe9a 	bl	8002a36 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7ff feaa 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(x);
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fea6 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7ff fea3 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8002d16:	207f      	movs	r0, #127	; 0x7f
 8002d18:	f7ff fea0 	bl	8002a5c <lcdWriteParameter>

	// Vertical Address end Position
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8002d1c:	202b      	movs	r0, #43	; 0x2b
 8002d1e:	f7ff fe8a 	bl	8002a36 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7ff fe9a 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(y);
 8002d28:	79bb      	ldrb	r3, [r7, #6]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fe96 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7ff fe93 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x7f);//7f
 8002d36:	207f      	movs	r0, #127	; 0x7f
 8002d38:	f7ff fe90 	bl	8002a5c <lcdWriteParameter>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 8002d3c:	202c      	movs	r0, #44	; 0x2c
 8002d3e:	f7ff fe7a 	bl	8002a36 <lcdWriteCommand>
	lcdWriteData(colour >> 8, colour);
 8002d42:	88bb      	ldrh	r3, [r7, #4]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	88ba      	ldrh	r2, [r7, #4]
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fe96 	bl	8002a82 <lcdWriteData>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <lcdLine>:

// Draw a line from x0, y0 to x1, y1
// Note:	This is a version of Bresenham's line drawing algorithm
//			It only draws lines from left to right!
void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8002d5e:	b590      	push	{r4, r7, lr}
 8002d60:	b087      	sub	sp, #28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	4604      	mov	r4, r0
 8002d66:	4608      	mov	r0, r1
 8002d68:	4611      	mov	r1, r2
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4623      	mov	r3, r4
 8002d6e:	80fb      	strh	r3, [r7, #6]
 8002d70:	4603      	mov	r3, r0
 8002d72:	80bb      	strh	r3, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 8002d7c:	883a      	ldrh	r2, [r7, #0]
 8002d7e:	88bb      	ldrh	r3, [r7, #4]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	82fb      	strh	r3, [r7, #22]
	int16_t dx = x1 - x0;
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	82bb      	strh	r3, [r7, #20]
	int16_t stepx, stepy;

	if (dy < 0)
 8002d90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	da07      	bge.n	8002da8 <lcdLine+0x4a>
	{
		dy = -dy; stepy = -1;
 8002d98:	8afb      	ldrh	r3, [r7, #22]
 8002d9a:	425b      	negs	r3, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	82fb      	strh	r3, [r7, #22]
 8002da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002da4:	823b      	strh	r3, [r7, #16]
 8002da6:	e001      	b.n	8002dac <lcdLine+0x4e>
	}
	else stepy = 1;
 8002da8:	2301      	movs	r3, #1
 8002daa:	823b      	strh	r3, [r7, #16]

 	if (dx < 0)
 8002dac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	da07      	bge.n	8002dc4 <lcdLine+0x66>
	{
		dx = -dx; stepx = -1;
 8002db4:	8abb      	ldrh	r3, [r7, #20]
 8002db6:	425b      	negs	r3, r3
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	82bb      	strh	r3, [r7, #20]
 8002dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dc0:	827b      	strh	r3, [r7, #18]
 8002dc2:	e001      	b.n	8002dc8 <lcdLine+0x6a>
	}
	else stepx = 1;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	827b      	strh	r3, [r7, #18]

	dy <<= 1; 							// dy is now 2*dy
 8002dc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	82fb      	strh	r3, [r7, #22]
	dx <<= 1; 							// dx is now 2*dx
 8002dd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	82bb      	strh	r3, [r7, #20]

	lcdPlot(x0, y0, colour);
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	88ba      	ldrh	r2, [r7, #4]
 8002dde:	b2d1      	uxtb	r1, r2
 8002de0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff ff81 	bl	8002cea <lcdPlot>

	if (dx > dy) {
 8002de8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002dec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	dd2e      	ble.n	8002e52 <lcdLine+0xf4>
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
 8002df4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002df8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002dfc:	1052      	asrs	r2, r2, #1
 8002dfe:	b212      	sxth	r2, r2
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
		while (x0 != x1)
 8002e04:	e01e      	b.n	8002e44 <lcdLine+0xe6>
		{
			if (fraction >= 0)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	db09      	blt.n	8002e20 <lcdLine+0xc2>
			{
				y0 += stepy;
 8002e0c:	88ba      	ldrh	r2, [r7, #4]
 8002e0e:	8a3b      	ldrh	r3, [r7, #16]
 8002e10:	4413      	add	r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	80bb      	strh	r3, [r7, #4]
				fraction -= dx; 		// same as fraction -= 2*dx
 8002e16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	60fb      	str	r3, [r7, #12]
			}

   			x0 += stepx;
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	8a7b      	ldrh	r3, [r7, #18]
 8002e24:	4413      	add	r3, r2
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	80fb      	strh	r3, [r7, #6]
   			fraction += dy; 				// same as fraction -= 2*dy
 8002e2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
   			lcdPlot(x0, y0, colour);
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	88ba      	ldrh	r2, [r7, #4]
 8002e3a:	b2d1      	uxtb	r1, r2
 8002e3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff53 	bl	8002cea <lcdPlot>
		while (x0 != x1)
 8002e44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1da      	bne.n	8002e06 <lcdLine+0xa8>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
}
 8002e50:	e02d      	b.n	8002eae <lcdLine+0x150>
		int fraction = dx - (dy >> 1);
 8002e52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e5a:	1052      	asrs	r2, r2, #1
 8002e5c:	b212      	sxth	r2, r2
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	60bb      	str	r3, [r7, #8]
		while (y0 != y1)
 8002e62:	e01e      	b.n	8002ea2 <lcdLine+0x144>
			if (fraction >= 0)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	db09      	blt.n	8002e7e <lcdLine+0x120>
				x0 += stepx;
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	8a7b      	ldrh	r3, [r7, #18]
 8002e6e:	4413      	add	r3, r2
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 8002e74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	60bb      	str	r3, [r7, #8]
			y0 += stepy;
 8002e7e:	88ba      	ldrh	r2, [r7, #4]
 8002e80:	8a3b      	ldrh	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 8002e88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	4413      	add	r3, r2
 8002e90:	60bb      	str	r3, [r7, #8]
			lcdPlot(x0, y0, colour);
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	88ba      	ldrh	r2, [r7, #4]
 8002e98:	b2d1      	uxtb	r1, r2
 8002e9a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff24 	bl	8002cea <lcdPlot>
		while (y0 != y1)
 8002ea2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ea6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d1da      	bne.n	8002e64 <lcdLine+0x106>
}
 8002eae:	bf00      	nop
 8002eb0:	371c      	adds	r7, #28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd90      	pop	{r4, r7, pc}

08002eb6 <lcdCircle>:
// Draw a circle
// Note:	This is another version of Bresenham's line drawing algorithm.
//			There's plenty of documentation on the web if you are curious
//			how this works.
void lcdCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour)
{
 8002eb6:	b590      	push	{r4, r7, lr}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	4608      	mov	r0, r1
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4623      	mov	r3, r4
 8002ec6:	80fb      	strh	r3, [r7, #6]
 8002ec8:	4603      	mov	r3, r0
 8002eca:	80bb      	strh	r3, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	807b      	strh	r3, [r7, #2]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	81fb      	strh	r3, [r7, #14]
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 8002edc:	887b      	ldrh	r3, [r7, #2]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f1c3 0303 	rsb	r3, r3, #3
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	817b      	strh	r3, [r7, #10]

    while(x <= y)
 8002eea:	e0a5      	b.n	8003038 <lcdCircle+0x182>
	{
		lcdPlot(xCentre + x, yCentre + y, colour);
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	89fb      	ldrh	r3, [r7, #14]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	b2d8      	uxtb	r0, r3
 8002ef8:	88bb      	ldrh	r3, [r7, #4]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	89bb      	ldrh	r3, [r7, #12]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	883a      	ldrh	r2, [r7, #0]
 8002f06:	4619      	mov	r1, r3
 8002f08:	f7ff feef 	bl	8002cea <lcdPlot>
		lcdPlot(xCentre + y, yCentre + x, colour);
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	89bb      	ldrh	r3, [r7, #12]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	b2d8      	uxtb	r0, r3
 8002f18:	88bb      	ldrh	r3, [r7, #4]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	89fb      	ldrh	r3, [r7, #14]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	883a      	ldrh	r2, [r7, #0]
 8002f26:	4619      	mov	r1, r3
 8002f28:	f7ff fedf 	bl	8002cea <lcdPlot>
		lcdPlot(xCentre - x, yCentre + y, colour);
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	89fb      	ldrh	r3, [r7, #14]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	b2d8      	uxtb	r0, r3
 8002f38:	88bb      	ldrh	r3, [r7, #4]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	89bb      	ldrh	r3, [r7, #12]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	883a      	ldrh	r2, [r7, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	f7ff fecf 	bl	8002cea <lcdPlot>
		lcdPlot(xCentre + y, yCentre - x, colour);
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	89bb      	ldrh	r3, [r7, #12]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	b2d8      	uxtb	r0, r3
 8002f58:	88bb      	ldrh	r3, [r7, #4]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	89fb      	ldrh	r3, [r7, #14]
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	883a      	ldrh	r2, [r7, #0]
 8002f66:	4619      	mov	r1, r3
 8002f68:	f7ff febf 	bl	8002cea <lcdPlot>
		lcdPlot(xCentre - x, yCentre - y, colour);
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	89fb      	ldrh	r3, [r7, #14]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	b2d8      	uxtb	r0, r3
 8002f78:	88bb      	ldrh	r3, [r7, #4]
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	89bb      	ldrh	r3, [r7, #12]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	883a      	ldrh	r2, [r7, #0]
 8002f86:	4619      	mov	r1, r3
 8002f88:	f7ff feaf 	bl	8002cea <lcdPlot>
		lcdPlot(xCentre - y, yCentre - x, colour);
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	89bb      	ldrh	r3, [r7, #12]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	b2d8      	uxtb	r0, r3
 8002f98:	88bb      	ldrh	r3, [r7, #4]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	89fb      	ldrh	r3, [r7, #14]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	883a      	ldrh	r2, [r7, #0]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f7ff fe9f 	bl	8002cea <lcdPlot>
		lcdPlot(xCentre + x, yCentre - y, colour);
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	89fb      	ldrh	r3, [r7, #14]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	b2d8      	uxtb	r0, r3
 8002fb8:	88bb      	ldrh	r3, [r7, #4]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	89bb      	ldrh	r3, [r7, #12]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	883a      	ldrh	r2, [r7, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7ff fe8f 	bl	8002cea <lcdPlot>
		lcdPlot(xCentre - y, yCentre + x, colour);
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	89bb      	ldrh	r3, [r7, #12]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	b2d8      	uxtb	r0, r3
 8002fd8:	88bb      	ldrh	r3, [r7, #4]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	89fb      	ldrh	r3, [r7, #14]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	883a      	ldrh	r2, [r7, #0]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f7ff fe7f 	bl	8002cea <lcdPlot>

		if (d < 0) d += (4 * x) + 6;
 8002fec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da09      	bge.n	8003008 <lcdCircle+0x152>
 8002ff4:	89fb      	ldrh	r3, [r7, #14]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	897b      	ldrh	r3, [r7, #10]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3306      	adds	r3, #6
 8003002:	b29b      	uxth	r3, r3
 8003004:	817b      	strh	r3, [r7, #10]
 8003006:	e011      	b.n	800302c <lcdCircle+0x176>
		else
		{
			d += (4 * (x - y)) + 10;
 8003008:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800300c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	b29b      	uxth	r3, r3
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	b29a      	uxth	r2, r3
 8003018:	897b      	ldrh	r3, [r7, #10]
 800301a:	4413      	add	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	330a      	adds	r3, #10
 8003020:	b29b      	uxth	r3, r3
 8003022:	817b      	strh	r3, [r7, #10]
			y -= 1;
 8003024:	89bb      	ldrh	r3, [r7, #12]
 8003026:	3b01      	subs	r3, #1
 8003028:	b29b      	uxth	r3, r3
 800302a:	81bb      	strh	r3, [r7, #12]
		}

		x++;
 800302c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003030:	b29b      	uxth	r3, r3
 8003032:	3301      	adds	r3, #1
 8003034:	b29b      	uxth	r3, r3
 8003036:	81fb      	strh	r3, [r7, #14]
    while(x <= y)
 8003038:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800303c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003040:	429a      	cmp	r2, r3
 8003042:	f77f af53 	ble.w	8002eec <lcdCircle+0x36>
	}
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	bd90      	pop	{r4, r7, pc}

08003050 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	4604      	mov	r4, r0
 8003058:	4608      	mov	r0, r1
 800305a:	4611      	mov	r1, r2
 800305c:	461a      	mov	r2, r3
 800305e:	4623      	mov	r3, r4
 8003060:	71fb      	strb	r3, [r7, #7]
 8003062:	4603      	mov	r3, r0
 8003064:	71bb      	strb	r3, [r7, #6]
 8003066:	460b      	mov	r3, r1
 8003068:	717b      	strb	r3, [r7, #5]
 800306a:	4613      	mov	r3, r2
 800306c:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 800306e:	202a      	movs	r0, #42	; 0x2a
 8003070:	f7ff fce1 	bl	8002a36 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8003074:	2000      	movs	r0, #0
 8003076:	f7ff fcf1 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(x);
 800307a:	79bb      	ldrb	r3, [r7, #6]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fced 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8003082:	2000      	movs	r0, #0
 8003084:	f7ff fcea 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(x+5);
 8003088:	79bb      	ldrb	r3, [r7, #6]
 800308a:	3305      	adds	r3, #5
 800308c:	b2db      	uxtb	r3, r3
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fce4 	bl	8002a5c <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8003094:	202b      	movs	r0, #43	; 0x2b
 8003096:	f7ff fcce 	bl	8002a36 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 800309a:	2000      	movs	r0, #0
 800309c:	f7ff fcde 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(y);
 80030a0:	797b      	ldrb	r3, [r7, #5]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fcda 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7ff fcd7 	bl	8002a5c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 80030ae:	207f      	movs	r0, #127	; 0x7f
 80030b0:	f7ff fcd4 	bl	8002a5c <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 80030b4:	202c      	movs	r0, #44	; 0x2c
 80030b6:	f7ff fcbe 	bl	8002a36 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]
 80030be:	e032      	b.n	8003126 <lcdPutCh+0xd6>
	{
		for (column = 0; column < 6; column++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	73bb      	strb	r3, [r7, #14]
 80030c4:	e029      	b.n	800311a <lcdPutCh+0xca>
		{
			//if ((font5x8[character][column]) & (1 << row))
			if ((fontus[character][column]) & (1 << row))
 80030c6:	79fa      	ldrb	r2, [r7, #7]
 80030c8:	7bb9      	ldrb	r1, [r7, #14]
 80030ca:	481b      	ldr	r0, [pc, #108]	; (8003138 <lcdPutCh+0xe8>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4403      	add	r3, r0
 80030d6:	440b      	add	r3, r1
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	fa42 f303 	asr.w	r3, r2, r3
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <lcdPutCh+0xb0>
				lcdWriteData(fgColour>>8, fgColour);
 80030ea:	887b      	ldrh	r3, [r7, #2]
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fcc2 	bl	8002a82 <lcdWriteData>
 80030fe:	e009      	b.n	8003114 <lcdPutCh+0xc4>
			else lcdWriteData(bgColour >> 8, bgColour);
 8003100:	8c3b      	ldrh	r3, [r7, #32]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	b29b      	uxth	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	8c3a      	ldrh	r2, [r7, #32]
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fcb7 	bl	8002a82 <lcdWriteData>
		for (column = 0; column < 6; column++)
 8003114:	7bbb      	ldrb	r3, [r7, #14]
 8003116:	3301      	adds	r3, #1
 8003118:	73bb      	strb	r3, [r7, #14]
 800311a:	7bbb      	ldrb	r3, [r7, #14]
 800311c:	2b05      	cmp	r3, #5
 800311e:	d9d2      	bls.n	80030c6 <lcdPutCh+0x76>
	for (row = 0; row < 8; row++)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	3301      	adds	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	2b07      	cmp	r3, #7
 800312a:	d9c9      	bls.n	80030c0 <lcdPutCh+0x70>
		}
	}
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bd90      	pop	{r4, r7, pc}
 8003136:	bf00      	nop
 8003138:	08006080 	.word	0x08006080

0800313c <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
 8003146:	460b      	mov	r3, r1
 8003148:	71bb      	strb	r3, [r7, #6]
 800314a:	4613      	mov	r3, r2
 800314c:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 800314e:	797b      	ldrb	r3, [r7, #5]
 8003150:	02db      	lsls	r3, r3, #11
 8003152:	b21a      	sxth	r2, r3
 8003154:	79bb      	ldrb	r3, [r7, #6]
 8003156:	019b      	lsls	r3, r3, #6
 8003158:	b21b      	sxth	r3, r3
 800315a:	4313      	orrs	r3, r2
 800315c:	b21a      	sxth	r2, r3
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	b21b      	sxth	r3, r3
 8003162:	4313      	orrs	r3, r2
 8003164:	b21b      	sxth	r3, r3
 8003166:	b29b      	uxth	r3, r3
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <lcdTextX>:

// This routine takes a row number from 0 to 20 and
// returns the x coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextX(uint8_t x) { return x*6; }
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	461a      	mov	r2, r3
 8003182:	0052      	lsls	r2, r2, #1
 8003184:	4413      	add	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	b2db      	uxtb	r3, r3
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <lcdTextY>:

// This routine takes a column number from 0 to 20 and
// returns the y coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	71fb      	strb	r3, [r7, #7]
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <lcdPutS>:

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 80031b2:	b590      	push	{r4, r7, lr}
 80031b4:	b087      	sub	sp, #28
 80031b6:	af02      	add	r7, sp, #8
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	4608      	mov	r0, r1
 80031bc:	4611      	mov	r1, r2
 80031be:	461a      	mov	r2, r3
 80031c0:	4603      	mov	r3, r0
 80031c2:	70fb      	strb	r3, [r7, #3]
 80031c4:	460b      	mov	r3, r1
 80031c6:	70bb      	strb	r3, [r7, #2]
 80031c8:	4613      	mov	r3, r2
 80031ca:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	e01c      	b.n	8003210 <lcdPutS+0x5e>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x > 121)
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	2b79      	cmp	r3, #121	; 0x79
 80031da:	d904      	bls.n	80031e6 <lcdPutS+0x34>
		{
			x = origin;
 80031dc:	7bbb      	ldrb	r3, [r7, #14]
 80031de:	70fb      	strb	r3, [r7, #3]
			y += 8;
 80031e0:	78bb      	ldrb	r3, [r7, #2]
 80031e2:	3308      	adds	r3, #8
 80031e4:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 80031e6:	78bb      	ldrb	r3, [r7, #2]
 80031e8:	2b78      	cmp	r3, #120	; 0x78
 80031ea:	d819      	bhi.n	8003220 <lcdPutS+0x6e>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	7818      	ldrb	r0, [r3, #0]
 80031f4:	883c      	ldrh	r4, [r7, #0]
 80031f6:	78ba      	ldrb	r2, [r7, #2]
 80031f8:	78f9      	ldrb	r1, [r7, #3]
 80031fa:	8c3b      	ldrh	r3, [r7, #32]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	4623      	mov	r3, r4
 8003200:	f7ff ff26 	bl	8003050 <lcdPutCh>
		x += 6;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	3306      	adds	r3, #6
 8003208:	70fb      	strb	r3, [r7, #3]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	3301      	adds	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	7bfc      	ldrb	r4, [r7, #15]
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fc ffdc 	bl	80001d0 <strlen>
 8003218:	4603      	mov	r3, r0
 800321a:	429c      	cmp	r4, r3
 800321c:	d3db      	bcc.n	80031d6 <lcdPutS+0x24>
	}
}
 800321e:	e000      	b.n	8003222 <lcdPutS+0x70>
		if (y > 120) break;
 8003220:	bf00      	nop
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	bd90      	pop	{r4, r7, pc}
	...

0800322c <__errno>:
 800322c:	4b01      	ldr	r3, [pc, #4]	; (8003234 <__errno+0x8>)
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000008 	.word	0x20000008

08003238 <__libc_init_array>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	4d0d      	ldr	r5, [pc, #52]	; (8003270 <__libc_init_array+0x38>)
 800323c:	4c0d      	ldr	r4, [pc, #52]	; (8003274 <__libc_init_array+0x3c>)
 800323e:	1b64      	subs	r4, r4, r5
 8003240:	10a4      	asrs	r4, r4, #2
 8003242:	2600      	movs	r6, #0
 8003244:	42a6      	cmp	r6, r4
 8003246:	d109      	bne.n	800325c <__libc_init_array+0x24>
 8003248:	4d0b      	ldr	r5, [pc, #44]	; (8003278 <__libc_init_array+0x40>)
 800324a:	4c0c      	ldr	r4, [pc, #48]	; (800327c <__libc_init_array+0x44>)
 800324c:	f002 ff04 	bl	8006058 <_init>
 8003250:	1b64      	subs	r4, r4, r5
 8003252:	10a4      	asrs	r4, r4, #2
 8003254:	2600      	movs	r6, #0
 8003256:	42a6      	cmp	r6, r4
 8003258:	d105      	bne.n	8003266 <__libc_init_array+0x2e>
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003260:	4798      	blx	r3
 8003262:	3601      	adds	r6, #1
 8003264:	e7ee      	b.n	8003244 <__libc_init_array+0xc>
 8003266:	f855 3b04 	ldr.w	r3, [r5], #4
 800326a:	4798      	blx	r3
 800326c:	3601      	adds	r6, #1
 800326e:	e7f2      	b.n	8003256 <__libc_init_array+0x1e>
 8003270:	0800675c 	.word	0x0800675c
 8003274:	0800675c 	.word	0x0800675c
 8003278:	0800675c 	.word	0x0800675c
 800327c:	08006760 	.word	0x08006760

08003280 <memset>:
 8003280:	4402      	add	r2, r0
 8003282:	4603      	mov	r3, r0
 8003284:	4293      	cmp	r3, r2
 8003286:	d100      	bne.n	800328a <memset+0xa>
 8003288:	4770      	bx	lr
 800328a:	f803 1b01 	strb.w	r1, [r3], #1
 800328e:	e7f9      	b.n	8003284 <memset+0x4>

08003290 <__cvt>:
 8003290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003294:	ec55 4b10 	vmov	r4, r5, d0
 8003298:	2d00      	cmp	r5, #0
 800329a:	460e      	mov	r6, r1
 800329c:	4619      	mov	r1, r3
 800329e:	462b      	mov	r3, r5
 80032a0:	bfbb      	ittet	lt
 80032a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80032a6:	461d      	movlt	r5, r3
 80032a8:	2300      	movge	r3, #0
 80032aa:	232d      	movlt	r3, #45	; 0x2d
 80032ac:	700b      	strb	r3, [r1, #0]
 80032ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80032b4:	4691      	mov	r9, r2
 80032b6:	f023 0820 	bic.w	r8, r3, #32
 80032ba:	bfbc      	itt	lt
 80032bc:	4622      	movlt	r2, r4
 80032be:	4614      	movlt	r4, r2
 80032c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032c4:	d005      	beq.n	80032d2 <__cvt+0x42>
 80032c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80032ca:	d100      	bne.n	80032ce <__cvt+0x3e>
 80032cc:	3601      	adds	r6, #1
 80032ce:	2102      	movs	r1, #2
 80032d0:	e000      	b.n	80032d4 <__cvt+0x44>
 80032d2:	2103      	movs	r1, #3
 80032d4:	ab03      	add	r3, sp, #12
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	ab02      	add	r3, sp, #8
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	ec45 4b10 	vmov	d0, r4, r5
 80032e0:	4653      	mov	r3, sl
 80032e2:	4632      	mov	r2, r6
 80032e4:	f000 fcec 	bl	8003cc0 <_dtoa_r>
 80032e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032ec:	4607      	mov	r7, r0
 80032ee:	d102      	bne.n	80032f6 <__cvt+0x66>
 80032f0:	f019 0f01 	tst.w	r9, #1
 80032f4:	d022      	beq.n	800333c <__cvt+0xac>
 80032f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032fa:	eb07 0906 	add.w	r9, r7, r6
 80032fe:	d110      	bne.n	8003322 <__cvt+0x92>
 8003300:	783b      	ldrb	r3, [r7, #0]
 8003302:	2b30      	cmp	r3, #48	; 0x30
 8003304:	d10a      	bne.n	800331c <__cvt+0x8c>
 8003306:	2200      	movs	r2, #0
 8003308:	2300      	movs	r3, #0
 800330a:	4620      	mov	r0, r4
 800330c:	4629      	mov	r1, r5
 800330e:	f7fd fbdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8003312:	b918      	cbnz	r0, 800331c <__cvt+0x8c>
 8003314:	f1c6 0601 	rsb	r6, r6, #1
 8003318:	f8ca 6000 	str.w	r6, [sl]
 800331c:	f8da 3000 	ldr.w	r3, [sl]
 8003320:	4499      	add	r9, r3
 8003322:	2200      	movs	r2, #0
 8003324:	2300      	movs	r3, #0
 8003326:	4620      	mov	r0, r4
 8003328:	4629      	mov	r1, r5
 800332a:	f7fd fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800332e:	b108      	cbz	r0, 8003334 <__cvt+0xa4>
 8003330:	f8cd 900c 	str.w	r9, [sp, #12]
 8003334:	2230      	movs	r2, #48	; 0x30
 8003336:	9b03      	ldr	r3, [sp, #12]
 8003338:	454b      	cmp	r3, r9
 800333a:	d307      	bcc.n	800334c <__cvt+0xbc>
 800333c:	9b03      	ldr	r3, [sp, #12]
 800333e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003340:	1bdb      	subs	r3, r3, r7
 8003342:	4638      	mov	r0, r7
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	b004      	add	sp, #16
 8003348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800334c:	1c59      	adds	r1, r3, #1
 800334e:	9103      	str	r1, [sp, #12]
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e7f0      	b.n	8003336 <__cvt+0xa6>

08003354 <__exponent>:
 8003354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003356:	4603      	mov	r3, r0
 8003358:	2900      	cmp	r1, #0
 800335a:	bfb8      	it	lt
 800335c:	4249      	neglt	r1, r1
 800335e:	f803 2b02 	strb.w	r2, [r3], #2
 8003362:	bfb4      	ite	lt
 8003364:	222d      	movlt	r2, #45	; 0x2d
 8003366:	222b      	movge	r2, #43	; 0x2b
 8003368:	2909      	cmp	r1, #9
 800336a:	7042      	strb	r2, [r0, #1]
 800336c:	dd2a      	ble.n	80033c4 <__exponent+0x70>
 800336e:	f10d 0407 	add.w	r4, sp, #7
 8003372:	46a4      	mov	ip, r4
 8003374:	270a      	movs	r7, #10
 8003376:	46a6      	mov	lr, r4
 8003378:	460a      	mov	r2, r1
 800337a:	fb91 f6f7 	sdiv	r6, r1, r7
 800337e:	fb07 1516 	mls	r5, r7, r6, r1
 8003382:	3530      	adds	r5, #48	; 0x30
 8003384:	2a63      	cmp	r2, #99	; 0x63
 8003386:	f104 34ff 	add.w	r4, r4, #4294967295
 800338a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800338e:	4631      	mov	r1, r6
 8003390:	dcf1      	bgt.n	8003376 <__exponent+0x22>
 8003392:	3130      	adds	r1, #48	; 0x30
 8003394:	f1ae 0502 	sub.w	r5, lr, #2
 8003398:	f804 1c01 	strb.w	r1, [r4, #-1]
 800339c:	1c44      	adds	r4, r0, #1
 800339e:	4629      	mov	r1, r5
 80033a0:	4561      	cmp	r1, ip
 80033a2:	d30a      	bcc.n	80033ba <__exponent+0x66>
 80033a4:	f10d 0209 	add.w	r2, sp, #9
 80033a8:	eba2 020e 	sub.w	r2, r2, lr
 80033ac:	4565      	cmp	r5, ip
 80033ae:	bf88      	it	hi
 80033b0:	2200      	movhi	r2, #0
 80033b2:	4413      	add	r3, r2
 80033b4:	1a18      	subs	r0, r3, r0
 80033b6:	b003      	add	sp, #12
 80033b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80033c2:	e7ed      	b.n	80033a0 <__exponent+0x4c>
 80033c4:	2330      	movs	r3, #48	; 0x30
 80033c6:	3130      	adds	r1, #48	; 0x30
 80033c8:	7083      	strb	r3, [r0, #2]
 80033ca:	70c1      	strb	r1, [r0, #3]
 80033cc:	1d03      	adds	r3, r0, #4
 80033ce:	e7f1      	b.n	80033b4 <__exponent+0x60>

080033d0 <_printf_float>:
 80033d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d4:	ed2d 8b02 	vpush	{d8}
 80033d8:	b08d      	sub	sp, #52	; 0x34
 80033da:	460c      	mov	r4, r1
 80033dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80033e0:	4616      	mov	r6, r2
 80033e2:	461f      	mov	r7, r3
 80033e4:	4605      	mov	r5, r0
 80033e6:	f001 fa59 	bl	800489c <_localeconv_r>
 80033ea:	f8d0 a000 	ldr.w	sl, [r0]
 80033ee:	4650      	mov	r0, sl
 80033f0:	f7fc feee 	bl	80001d0 <strlen>
 80033f4:	2300      	movs	r3, #0
 80033f6:	930a      	str	r3, [sp, #40]	; 0x28
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	9305      	str	r3, [sp, #20]
 80033fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003400:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003404:	3307      	adds	r3, #7
 8003406:	f023 0307 	bic.w	r3, r3, #7
 800340a:	f103 0208 	add.w	r2, r3, #8
 800340e:	f8c8 2000 	str.w	r2, [r8]
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800341a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800341e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003422:	9307      	str	r3, [sp, #28]
 8003424:	f8cd 8018 	str.w	r8, [sp, #24]
 8003428:	ee08 0a10 	vmov	s16, r0
 800342c:	4b9f      	ldr	r3, [pc, #636]	; (80036ac <_printf_float+0x2dc>)
 800342e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003432:	f04f 32ff 	mov.w	r2, #4294967295
 8003436:	f7fd fb79 	bl	8000b2c <__aeabi_dcmpun>
 800343a:	bb88      	cbnz	r0, 80034a0 <_printf_float+0xd0>
 800343c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003440:	4b9a      	ldr	r3, [pc, #616]	; (80036ac <_printf_float+0x2dc>)
 8003442:	f04f 32ff 	mov.w	r2, #4294967295
 8003446:	f7fd fb53 	bl	8000af0 <__aeabi_dcmple>
 800344a:	bb48      	cbnz	r0, 80034a0 <_printf_float+0xd0>
 800344c:	2200      	movs	r2, #0
 800344e:	2300      	movs	r3, #0
 8003450:	4640      	mov	r0, r8
 8003452:	4649      	mov	r1, r9
 8003454:	f7fd fb42 	bl	8000adc <__aeabi_dcmplt>
 8003458:	b110      	cbz	r0, 8003460 <_printf_float+0x90>
 800345a:	232d      	movs	r3, #45	; 0x2d
 800345c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003460:	4b93      	ldr	r3, [pc, #588]	; (80036b0 <_printf_float+0x2e0>)
 8003462:	4894      	ldr	r0, [pc, #592]	; (80036b4 <_printf_float+0x2e4>)
 8003464:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003468:	bf94      	ite	ls
 800346a:	4698      	movls	r8, r3
 800346c:	4680      	movhi	r8, r0
 800346e:	2303      	movs	r3, #3
 8003470:	6123      	str	r3, [r4, #16]
 8003472:	9b05      	ldr	r3, [sp, #20]
 8003474:	f023 0204 	bic.w	r2, r3, #4
 8003478:	6022      	str	r2, [r4, #0]
 800347a:	f04f 0900 	mov.w	r9, #0
 800347e:	9700      	str	r7, [sp, #0]
 8003480:	4633      	mov	r3, r6
 8003482:	aa0b      	add	r2, sp, #44	; 0x2c
 8003484:	4621      	mov	r1, r4
 8003486:	4628      	mov	r0, r5
 8003488:	f000 f9d8 	bl	800383c <_printf_common>
 800348c:	3001      	adds	r0, #1
 800348e:	f040 8090 	bne.w	80035b2 <_printf_float+0x1e2>
 8003492:	f04f 30ff 	mov.w	r0, #4294967295
 8003496:	b00d      	add	sp, #52	; 0x34
 8003498:	ecbd 8b02 	vpop	{d8}
 800349c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034a0:	4642      	mov	r2, r8
 80034a2:	464b      	mov	r3, r9
 80034a4:	4640      	mov	r0, r8
 80034a6:	4649      	mov	r1, r9
 80034a8:	f7fd fb40 	bl	8000b2c <__aeabi_dcmpun>
 80034ac:	b140      	cbz	r0, 80034c0 <_printf_float+0xf0>
 80034ae:	464b      	mov	r3, r9
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bfbc      	itt	lt
 80034b4:	232d      	movlt	r3, #45	; 0x2d
 80034b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80034ba:	487f      	ldr	r0, [pc, #508]	; (80036b8 <_printf_float+0x2e8>)
 80034bc:	4b7f      	ldr	r3, [pc, #508]	; (80036bc <_printf_float+0x2ec>)
 80034be:	e7d1      	b.n	8003464 <_printf_float+0x94>
 80034c0:	6863      	ldr	r3, [r4, #4]
 80034c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80034c6:	9206      	str	r2, [sp, #24]
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	d13f      	bne.n	800354c <_printf_float+0x17c>
 80034cc:	2306      	movs	r3, #6
 80034ce:	6063      	str	r3, [r4, #4]
 80034d0:	9b05      	ldr	r3, [sp, #20]
 80034d2:	6861      	ldr	r1, [r4, #4]
 80034d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034d8:	2300      	movs	r3, #0
 80034da:	9303      	str	r3, [sp, #12]
 80034dc:	ab0a      	add	r3, sp, #40	; 0x28
 80034de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80034e2:	ab09      	add	r3, sp, #36	; 0x24
 80034e4:	ec49 8b10 	vmov	d0, r8, r9
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	6022      	str	r2, [r4, #0]
 80034ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80034f0:	4628      	mov	r0, r5
 80034f2:	f7ff fecd 	bl	8003290 <__cvt>
 80034f6:	9b06      	ldr	r3, [sp, #24]
 80034f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034fa:	2b47      	cmp	r3, #71	; 0x47
 80034fc:	4680      	mov	r8, r0
 80034fe:	d108      	bne.n	8003512 <_printf_float+0x142>
 8003500:	1cc8      	adds	r0, r1, #3
 8003502:	db02      	blt.n	800350a <_printf_float+0x13a>
 8003504:	6863      	ldr	r3, [r4, #4]
 8003506:	4299      	cmp	r1, r3
 8003508:	dd41      	ble.n	800358e <_printf_float+0x1be>
 800350a:	f1ab 0b02 	sub.w	fp, fp, #2
 800350e:	fa5f fb8b 	uxtb.w	fp, fp
 8003512:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003516:	d820      	bhi.n	800355a <_printf_float+0x18a>
 8003518:	3901      	subs	r1, #1
 800351a:	465a      	mov	r2, fp
 800351c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003520:	9109      	str	r1, [sp, #36]	; 0x24
 8003522:	f7ff ff17 	bl	8003354 <__exponent>
 8003526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003528:	1813      	adds	r3, r2, r0
 800352a:	2a01      	cmp	r2, #1
 800352c:	4681      	mov	r9, r0
 800352e:	6123      	str	r3, [r4, #16]
 8003530:	dc02      	bgt.n	8003538 <_printf_float+0x168>
 8003532:	6822      	ldr	r2, [r4, #0]
 8003534:	07d2      	lsls	r2, r2, #31
 8003536:	d501      	bpl.n	800353c <_printf_float+0x16c>
 8003538:	3301      	adds	r3, #1
 800353a:	6123      	str	r3, [r4, #16]
 800353c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003540:	2b00      	cmp	r3, #0
 8003542:	d09c      	beq.n	800347e <_printf_float+0xae>
 8003544:	232d      	movs	r3, #45	; 0x2d
 8003546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800354a:	e798      	b.n	800347e <_printf_float+0xae>
 800354c:	9a06      	ldr	r2, [sp, #24]
 800354e:	2a47      	cmp	r2, #71	; 0x47
 8003550:	d1be      	bne.n	80034d0 <_printf_float+0x100>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1bc      	bne.n	80034d0 <_printf_float+0x100>
 8003556:	2301      	movs	r3, #1
 8003558:	e7b9      	b.n	80034ce <_printf_float+0xfe>
 800355a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800355e:	d118      	bne.n	8003592 <_printf_float+0x1c2>
 8003560:	2900      	cmp	r1, #0
 8003562:	6863      	ldr	r3, [r4, #4]
 8003564:	dd0b      	ble.n	800357e <_printf_float+0x1ae>
 8003566:	6121      	str	r1, [r4, #16]
 8003568:	b913      	cbnz	r3, 8003570 <_printf_float+0x1a0>
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	07d0      	lsls	r0, r2, #31
 800356e:	d502      	bpl.n	8003576 <_printf_float+0x1a6>
 8003570:	3301      	adds	r3, #1
 8003572:	440b      	add	r3, r1
 8003574:	6123      	str	r3, [r4, #16]
 8003576:	65a1      	str	r1, [r4, #88]	; 0x58
 8003578:	f04f 0900 	mov.w	r9, #0
 800357c:	e7de      	b.n	800353c <_printf_float+0x16c>
 800357e:	b913      	cbnz	r3, 8003586 <_printf_float+0x1b6>
 8003580:	6822      	ldr	r2, [r4, #0]
 8003582:	07d2      	lsls	r2, r2, #31
 8003584:	d501      	bpl.n	800358a <_printf_float+0x1ba>
 8003586:	3302      	adds	r3, #2
 8003588:	e7f4      	b.n	8003574 <_printf_float+0x1a4>
 800358a:	2301      	movs	r3, #1
 800358c:	e7f2      	b.n	8003574 <_printf_float+0x1a4>
 800358e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003594:	4299      	cmp	r1, r3
 8003596:	db05      	blt.n	80035a4 <_printf_float+0x1d4>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	6121      	str	r1, [r4, #16]
 800359c:	07d8      	lsls	r0, r3, #31
 800359e:	d5ea      	bpl.n	8003576 <_printf_float+0x1a6>
 80035a0:	1c4b      	adds	r3, r1, #1
 80035a2:	e7e7      	b.n	8003574 <_printf_float+0x1a4>
 80035a4:	2900      	cmp	r1, #0
 80035a6:	bfd4      	ite	le
 80035a8:	f1c1 0202 	rsble	r2, r1, #2
 80035ac:	2201      	movgt	r2, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	e7e0      	b.n	8003574 <_printf_float+0x1a4>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	055a      	lsls	r2, r3, #21
 80035b6:	d407      	bmi.n	80035c8 <_printf_float+0x1f8>
 80035b8:	6923      	ldr	r3, [r4, #16]
 80035ba:	4642      	mov	r2, r8
 80035bc:	4631      	mov	r1, r6
 80035be:	4628      	mov	r0, r5
 80035c0:	47b8      	blx	r7
 80035c2:	3001      	adds	r0, #1
 80035c4:	d12c      	bne.n	8003620 <_printf_float+0x250>
 80035c6:	e764      	b.n	8003492 <_printf_float+0xc2>
 80035c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80035cc:	f240 80e0 	bls.w	8003790 <_printf_float+0x3c0>
 80035d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035d4:	2200      	movs	r2, #0
 80035d6:	2300      	movs	r3, #0
 80035d8:	f7fd fa76 	bl	8000ac8 <__aeabi_dcmpeq>
 80035dc:	2800      	cmp	r0, #0
 80035de:	d034      	beq.n	800364a <_printf_float+0x27a>
 80035e0:	4a37      	ldr	r2, [pc, #220]	; (80036c0 <_printf_float+0x2f0>)
 80035e2:	2301      	movs	r3, #1
 80035e4:	4631      	mov	r1, r6
 80035e6:	4628      	mov	r0, r5
 80035e8:	47b8      	blx	r7
 80035ea:	3001      	adds	r0, #1
 80035ec:	f43f af51 	beq.w	8003492 <_printf_float+0xc2>
 80035f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035f4:	429a      	cmp	r2, r3
 80035f6:	db02      	blt.n	80035fe <_printf_float+0x22e>
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	07d8      	lsls	r0, r3, #31
 80035fc:	d510      	bpl.n	8003620 <_printf_float+0x250>
 80035fe:	ee18 3a10 	vmov	r3, s16
 8003602:	4652      	mov	r2, sl
 8003604:	4631      	mov	r1, r6
 8003606:	4628      	mov	r0, r5
 8003608:	47b8      	blx	r7
 800360a:	3001      	adds	r0, #1
 800360c:	f43f af41 	beq.w	8003492 <_printf_float+0xc2>
 8003610:	f04f 0800 	mov.w	r8, #0
 8003614:	f104 091a 	add.w	r9, r4, #26
 8003618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800361a:	3b01      	subs	r3, #1
 800361c:	4543      	cmp	r3, r8
 800361e:	dc09      	bgt.n	8003634 <_printf_float+0x264>
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	079b      	lsls	r3, r3, #30
 8003624:	f100 8105 	bmi.w	8003832 <_printf_float+0x462>
 8003628:	68e0      	ldr	r0, [r4, #12]
 800362a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800362c:	4298      	cmp	r0, r3
 800362e:	bfb8      	it	lt
 8003630:	4618      	movlt	r0, r3
 8003632:	e730      	b.n	8003496 <_printf_float+0xc6>
 8003634:	2301      	movs	r3, #1
 8003636:	464a      	mov	r2, r9
 8003638:	4631      	mov	r1, r6
 800363a:	4628      	mov	r0, r5
 800363c:	47b8      	blx	r7
 800363e:	3001      	adds	r0, #1
 8003640:	f43f af27 	beq.w	8003492 <_printf_float+0xc2>
 8003644:	f108 0801 	add.w	r8, r8, #1
 8003648:	e7e6      	b.n	8003618 <_printf_float+0x248>
 800364a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800364c:	2b00      	cmp	r3, #0
 800364e:	dc39      	bgt.n	80036c4 <_printf_float+0x2f4>
 8003650:	4a1b      	ldr	r2, [pc, #108]	; (80036c0 <_printf_float+0x2f0>)
 8003652:	2301      	movs	r3, #1
 8003654:	4631      	mov	r1, r6
 8003656:	4628      	mov	r0, r5
 8003658:	47b8      	blx	r7
 800365a:	3001      	adds	r0, #1
 800365c:	f43f af19 	beq.w	8003492 <_printf_float+0xc2>
 8003660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003664:	4313      	orrs	r3, r2
 8003666:	d102      	bne.n	800366e <_printf_float+0x29e>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	07d9      	lsls	r1, r3, #31
 800366c:	d5d8      	bpl.n	8003620 <_printf_float+0x250>
 800366e:	ee18 3a10 	vmov	r3, s16
 8003672:	4652      	mov	r2, sl
 8003674:	4631      	mov	r1, r6
 8003676:	4628      	mov	r0, r5
 8003678:	47b8      	blx	r7
 800367a:	3001      	adds	r0, #1
 800367c:	f43f af09 	beq.w	8003492 <_printf_float+0xc2>
 8003680:	f04f 0900 	mov.w	r9, #0
 8003684:	f104 0a1a 	add.w	sl, r4, #26
 8003688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800368a:	425b      	negs	r3, r3
 800368c:	454b      	cmp	r3, r9
 800368e:	dc01      	bgt.n	8003694 <_printf_float+0x2c4>
 8003690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003692:	e792      	b.n	80035ba <_printf_float+0x1ea>
 8003694:	2301      	movs	r3, #1
 8003696:	4652      	mov	r2, sl
 8003698:	4631      	mov	r1, r6
 800369a:	4628      	mov	r0, r5
 800369c:	47b8      	blx	r7
 800369e:	3001      	adds	r0, #1
 80036a0:	f43f aef7 	beq.w	8003492 <_printf_float+0xc2>
 80036a4:	f109 0901 	add.w	r9, r9, #1
 80036a8:	e7ee      	b.n	8003688 <_printf_float+0x2b8>
 80036aa:	bf00      	nop
 80036ac:	7fefffff 	.word	0x7fefffff
 80036b0:	08006384 	.word	0x08006384
 80036b4:	08006388 	.word	0x08006388
 80036b8:	08006390 	.word	0x08006390
 80036bc:	0800638c 	.word	0x0800638c
 80036c0:	08006394 	.word	0x08006394
 80036c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036c8:	429a      	cmp	r2, r3
 80036ca:	bfa8      	it	ge
 80036cc:	461a      	movge	r2, r3
 80036ce:	2a00      	cmp	r2, #0
 80036d0:	4691      	mov	r9, r2
 80036d2:	dc37      	bgt.n	8003744 <_printf_float+0x374>
 80036d4:	f04f 0b00 	mov.w	fp, #0
 80036d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036dc:	f104 021a 	add.w	r2, r4, #26
 80036e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036e2:	9305      	str	r3, [sp, #20]
 80036e4:	eba3 0309 	sub.w	r3, r3, r9
 80036e8:	455b      	cmp	r3, fp
 80036ea:	dc33      	bgt.n	8003754 <_printf_float+0x384>
 80036ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036f0:	429a      	cmp	r2, r3
 80036f2:	db3b      	blt.n	800376c <_printf_float+0x39c>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	07da      	lsls	r2, r3, #31
 80036f8:	d438      	bmi.n	800376c <_printf_float+0x39c>
 80036fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036fc:	9a05      	ldr	r2, [sp, #20]
 80036fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003700:	1a9a      	subs	r2, r3, r2
 8003702:	eba3 0901 	sub.w	r9, r3, r1
 8003706:	4591      	cmp	r9, r2
 8003708:	bfa8      	it	ge
 800370a:	4691      	movge	r9, r2
 800370c:	f1b9 0f00 	cmp.w	r9, #0
 8003710:	dc35      	bgt.n	800377e <_printf_float+0x3ae>
 8003712:	f04f 0800 	mov.w	r8, #0
 8003716:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800371a:	f104 0a1a 	add.w	sl, r4, #26
 800371e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	eba3 0309 	sub.w	r3, r3, r9
 8003728:	4543      	cmp	r3, r8
 800372a:	f77f af79 	ble.w	8003620 <_printf_float+0x250>
 800372e:	2301      	movs	r3, #1
 8003730:	4652      	mov	r2, sl
 8003732:	4631      	mov	r1, r6
 8003734:	4628      	mov	r0, r5
 8003736:	47b8      	blx	r7
 8003738:	3001      	adds	r0, #1
 800373a:	f43f aeaa 	beq.w	8003492 <_printf_float+0xc2>
 800373e:	f108 0801 	add.w	r8, r8, #1
 8003742:	e7ec      	b.n	800371e <_printf_float+0x34e>
 8003744:	4613      	mov	r3, r2
 8003746:	4631      	mov	r1, r6
 8003748:	4642      	mov	r2, r8
 800374a:	4628      	mov	r0, r5
 800374c:	47b8      	blx	r7
 800374e:	3001      	adds	r0, #1
 8003750:	d1c0      	bne.n	80036d4 <_printf_float+0x304>
 8003752:	e69e      	b.n	8003492 <_printf_float+0xc2>
 8003754:	2301      	movs	r3, #1
 8003756:	4631      	mov	r1, r6
 8003758:	4628      	mov	r0, r5
 800375a:	9205      	str	r2, [sp, #20]
 800375c:	47b8      	blx	r7
 800375e:	3001      	adds	r0, #1
 8003760:	f43f ae97 	beq.w	8003492 <_printf_float+0xc2>
 8003764:	9a05      	ldr	r2, [sp, #20]
 8003766:	f10b 0b01 	add.w	fp, fp, #1
 800376a:	e7b9      	b.n	80036e0 <_printf_float+0x310>
 800376c:	ee18 3a10 	vmov	r3, s16
 8003770:	4652      	mov	r2, sl
 8003772:	4631      	mov	r1, r6
 8003774:	4628      	mov	r0, r5
 8003776:	47b8      	blx	r7
 8003778:	3001      	adds	r0, #1
 800377a:	d1be      	bne.n	80036fa <_printf_float+0x32a>
 800377c:	e689      	b.n	8003492 <_printf_float+0xc2>
 800377e:	9a05      	ldr	r2, [sp, #20]
 8003780:	464b      	mov	r3, r9
 8003782:	4442      	add	r2, r8
 8003784:	4631      	mov	r1, r6
 8003786:	4628      	mov	r0, r5
 8003788:	47b8      	blx	r7
 800378a:	3001      	adds	r0, #1
 800378c:	d1c1      	bne.n	8003712 <_printf_float+0x342>
 800378e:	e680      	b.n	8003492 <_printf_float+0xc2>
 8003790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003792:	2a01      	cmp	r2, #1
 8003794:	dc01      	bgt.n	800379a <_printf_float+0x3ca>
 8003796:	07db      	lsls	r3, r3, #31
 8003798:	d538      	bpl.n	800380c <_printf_float+0x43c>
 800379a:	2301      	movs	r3, #1
 800379c:	4642      	mov	r2, r8
 800379e:	4631      	mov	r1, r6
 80037a0:	4628      	mov	r0, r5
 80037a2:	47b8      	blx	r7
 80037a4:	3001      	adds	r0, #1
 80037a6:	f43f ae74 	beq.w	8003492 <_printf_float+0xc2>
 80037aa:	ee18 3a10 	vmov	r3, s16
 80037ae:	4652      	mov	r2, sl
 80037b0:	4631      	mov	r1, r6
 80037b2:	4628      	mov	r0, r5
 80037b4:	47b8      	blx	r7
 80037b6:	3001      	adds	r0, #1
 80037b8:	f43f ae6b 	beq.w	8003492 <_printf_float+0xc2>
 80037bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037c0:	2200      	movs	r2, #0
 80037c2:	2300      	movs	r3, #0
 80037c4:	f7fd f980 	bl	8000ac8 <__aeabi_dcmpeq>
 80037c8:	b9d8      	cbnz	r0, 8003802 <_printf_float+0x432>
 80037ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037cc:	f108 0201 	add.w	r2, r8, #1
 80037d0:	3b01      	subs	r3, #1
 80037d2:	4631      	mov	r1, r6
 80037d4:	4628      	mov	r0, r5
 80037d6:	47b8      	blx	r7
 80037d8:	3001      	adds	r0, #1
 80037da:	d10e      	bne.n	80037fa <_printf_float+0x42a>
 80037dc:	e659      	b.n	8003492 <_printf_float+0xc2>
 80037de:	2301      	movs	r3, #1
 80037e0:	4652      	mov	r2, sl
 80037e2:	4631      	mov	r1, r6
 80037e4:	4628      	mov	r0, r5
 80037e6:	47b8      	blx	r7
 80037e8:	3001      	adds	r0, #1
 80037ea:	f43f ae52 	beq.w	8003492 <_printf_float+0xc2>
 80037ee:	f108 0801 	add.w	r8, r8, #1
 80037f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	4543      	cmp	r3, r8
 80037f8:	dcf1      	bgt.n	80037de <_printf_float+0x40e>
 80037fa:	464b      	mov	r3, r9
 80037fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003800:	e6dc      	b.n	80035bc <_printf_float+0x1ec>
 8003802:	f04f 0800 	mov.w	r8, #0
 8003806:	f104 0a1a 	add.w	sl, r4, #26
 800380a:	e7f2      	b.n	80037f2 <_printf_float+0x422>
 800380c:	2301      	movs	r3, #1
 800380e:	4642      	mov	r2, r8
 8003810:	e7df      	b.n	80037d2 <_printf_float+0x402>
 8003812:	2301      	movs	r3, #1
 8003814:	464a      	mov	r2, r9
 8003816:	4631      	mov	r1, r6
 8003818:	4628      	mov	r0, r5
 800381a:	47b8      	blx	r7
 800381c:	3001      	adds	r0, #1
 800381e:	f43f ae38 	beq.w	8003492 <_printf_float+0xc2>
 8003822:	f108 0801 	add.w	r8, r8, #1
 8003826:	68e3      	ldr	r3, [r4, #12]
 8003828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800382a:	1a5b      	subs	r3, r3, r1
 800382c:	4543      	cmp	r3, r8
 800382e:	dcf0      	bgt.n	8003812 <_printf_float+0x442>
 8003830:	e6fa      	b.n	8003628 <_printf_float+0x258>
 8003832:	f04f 0800 	mov.w	r8, #0
 8003836:	f104 0919 	add.w	r9, r4, #25
 800383a:	e7f4      	b.n	8003826 <_printf_float+0x456>

0800383c <_printf_common>:
 800383c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003840:	4616      	mov	r6, r2
 8003842:	4699      	mov	r9, r3
 8003844:	688a      	ldr	r2, [r1, #8]
 8003846:	690b      	ldr	r3, [r1, #16]
 8003848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800384c:	4293      	cmp	r3, r2
 800384e:	bfb8      	it	lt
 8003850:	4613      	movlt	r3, r2
 8003852:	6033      	str	r3, [r6, #0]
 8003854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003858:	4607      	mov	r7, r0
 800385a:	460c      	mov	r4, r1
 800385c:	b10a      	cbz	r2, 8003862 <_printf_common+0x26>
 800385e:	3301      	adds	r3, #1
 8003860:	6033      	str	r3, [r6, #0]
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	0699      	lsls	r1, r3, #26
 8003866:	bf42      	ittt	mi
 8003868:	6833      	ldrmi	r3, [r6, #0]
 800386a:	3302      	addmi	r3, #2
 800386c:	6033      	strmi	r3, [r6, #0]
 800386e:	6825      	ldr	r5, [r4, #0]
 8003870:	f015 0506 	ands.w	r5, r5, #6
 8003874:	d106      	bne.n	8003884 <_printf_common+0x48>
 8003876:	f104 0a19 	add.w	sl, r4, #25
 800387a:	68e3      	ldr	r3, [r4, #12]
 800387c:	6832      	ldr	r2, [r6, #0]
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	42ab      	cmp	r3, r5
 8003882:	dc26      	bgt.n	80038d2 <_printf_common+0x96>
 8003884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003888:	1e13      	subs	r3, r2, #0
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	bf18      	it	ne
 800388e:	2301      	movne	r3, #1
 8003890:	0692      	lsls	r2, r2, #26
 8003892:	d42b      	bmi.n	80038ec <_printf_common+0xb0>
 8003894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003898:	4649      	mov	r1, r9
 800389a:	4638      	mov	r0, r7
 800389c:	47c0      	blx	r8
 800389e:	3001      	adds	r0, #1
 80038a0:	d01e      	beq.n	80038e0 <_printf_common+0xa4>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	68e5      	ldr	r5, [r4, #12]
 80038a6:	6832      	ldr	r2, [r6, #0]
 80038a8:	f003 0306 	and.w	r3, r3, #6
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	bf08      	it	eq
 80038b0:	1aad      	subeq	r5, r5, r2
 80038b2:	68a3      	ldr	r3, [r4, #8]
 80038b4:	6922      	ldr	r2, [r4, #16]
 80038b6:	bf0c      	ite	eq
 80038b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038bc:	2500      	movne	r5, #0
 80038be:	4293      	cmp	r3, r2
 80038c0:	bfc4      	itt	gt
 80038c2:	1a9b      	subgt	r3, r3, r2
 80038c4:	18ed      	addgt	r5, r5, r3
 80038c6:	2600      	movs	r6, #0
 80038c8:	341a      	adds	r4, #26
 80038ca:	42b5      	cmp	r5, r6
 80038cc:	d11a      	bne.n	8003904 <_printf_common+0xc8>
 80038ce:	2000      	movs	r0, #0
 80038d0:	e008      	b.n	80038e4 <_printf_common+0xa8>
 80038d2:	2301      	movs	r3, #1
 80038d4:	4652      	mov	r2, sl
 80038d6:	4649      	mov	r1, r9
 80038d8:	4638      	mov	r0, r7
 80038da:	47c0      	blx	r8
 80038dc:	3001      	adds	r0, #1
 80038de:	d103      	bne.n	80038e8 <_printf_common+0xac>
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038e8:	3501      	adds	r5, #1
 80038ea:	e7c6      	b.n	800387a <_printf_common+0x3e>
 80038ec:	18e1      	adds	r1, r4, r3
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	2030      	movs	r0, #48	; 0x30
 80038f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038f6:	4422      	add	r2, r4
 80038f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003900:	3302      	adds	r3, #2
 8003902:	e7c7      	b.n	8003894 <_printf_common+0x58>
 8003904:	2301      	movs	r3, #1
 8003906:	4622      	mov	r2, r4
 8003908:	4649      	mov	r1, r9
 800390a:	4638      	mov	r0, r7
 800390c:	47c0      	blx	r8
 800390e:	3001      	adds	r0, #1
 8003910:	d0e6      	beq.n	80038e0 <_printf_common+0xa4>
 8003912:	3601      	adds	r6, #1
 8003914:	e7d9      	b.n	80038ca <_printf_common+0x8e>
	...

08003918 <_printf_i>:
 8003918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800391c:	7e0f      	ldrb	r7, [r1, #24]
 800391e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003920:	2f78      	cmp	r7, #120	; 0x78
 8003922:	4691      	mov	r9, r2
 8003924:	4680      	mov	r8, r0
 8003926:	460c      	mov	r4, r1
 8003928:	469a      	mov	sl, r3
 800392a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800392e:	d807      	bhi.n	8003940 <_printf_i+0x28>
 8003930:	2f62      	cmp	r7, #98	; 0x62
 8003932:	d80a      	bhi.n	800394a <_printf_i+0x32>
 8003934:	2f00      	cmp	r7, #0
 8003936:	f000 80d8 	beq.w	8003aea <_printf_i+0x1d2>
 800393a:	2f58      	cmp	r7, #88	; 0x58
 800393c:	f000 80a3 	beq.w	8003a86 <_printf_i+0x16e>
 8003940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003948:	e03a      	b.n	80039c0 <_printf_i+0xa8>
 800394a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800394e:	2b15      	cmp	r3, #21
 8003950:	d8f6      	bhi.n	8003940 <_printf_i+0x28>
 8003952:	a101      	add	r1, pc, #4	; (adr r1, 8003958 <_printf_i+0x40>)
 8003954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003958:	080039b1 	.word	0x080039b1
 800395c:	080039c5 	.word	0x080039c5
 8003960:	08003941 	.word	0x08003941
 8003964:	08003941 	.word	0x08003941
 8003968:	08003941 	.word	0x08003941
 800396c:	08003941 	.word	0x08003941
 8003970:	080039c5 	.word	0x080039c5
 8003974:	08003941 	.word	0x08003941
 8003978:	08003941 	.word	0x08003941
 800397c:	08003941 	.word	0x08003941
 8003980:	08003941 	.word	0x08003941
 8003984:	08003ad1 	.word	0x08003ad1
 8003988:	080039f5 	.word	0x080039f5
 800398c:	08003ab3 	.word	0x08003ab3
 8003990:	08003941 	.word	0x08003941
 8003994:	08003941 	.word	0x08003941
 8003998:	08003af3 	.word	0x08003af3
 800399c:	08003941 	.word	0x08003941
 80039a0:	080039f5 	.word	0x080039f5
 80039a4:	08003941 	.word	0x08003941
 80039a8:	08003941 	.word	0x08003941
 80039ac:	08003abb 	.word	0x08003abb
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	1d1a      	adds	r2, r3, #4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	602a      	str	r2, [r5, #0]
 80039b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0a3      	b.n	8003b0c <_printf_i+0x1f4>
 80039c4:	6820      	ldr	r0, [r4, #0]
 80039c6:	6829      	ldr	r1, [r5, #0]
 80039c8:	0606      	lsls	r6, r0, #24
 80039ca:	f101 0304 	add.w	r3, r1, #4
 80039ce:	d50a      	bpl.n	80039e6 <_printf_i+0xce>
 80039d0:	680e      	ldr	r6, [r1, #0]
 80039d2:	602b      	str	r3, [r5, #0]
 80039d4:	2e00      	cmp	r6, #0
 80039d6:	da03      	bge.n	80039e0 <_printf_i+0xc8>
 80039d8:	232d      	movs	r3, #45	; 0x2d
 80039da:	4276      	negs	r6, r6
 80039dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039e0:	485e      	ldr	r0, [pc, #376]	; (8003b5c <_printf_i+0x244>)
 80039e2:	230a      	movs	r3, #10
 80039e4:	e019      	b.n	8003a1a <_printf_i+0x102>
 80039e6:	680e      	ldr	r6, [r1, #0]
 80039e8:	602b      	str	r3, [r5, #0]
 80039ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039ee:	bf18      	it	ne
 80039f0:	b236      	sxthne	r6, r6
 80039f2:	e7ef      	b.n	80039d4 <_printf_i+0xbc>
 80039f4:	682b      	ldr	r3, [r5, #0]
 80039f6:	6820      	ldr	r0, [r4, #0]
 80039f8:	1d19      	adds	r1, r3, #4
 80039fa:	6029      	str	r1, [r5, #0]
 80039fc:	0601      	lsls	r1, r0, #24
 80039fe:	d501      	bpl.n	8003a04 <_printf_i+0xec>
 8003a00:	681e      	ldr	r6, [r3, #0]
 8003a02:	e002      	b.n	8003a0a <_printf_i+0xf2>
 8003a04:	0646      	lsls	r6, r0, #25
 8003a06:	d5fb      	bpl.n	8003a00 <_printf_i+0xe8>
 8003a08:	881e      	ldrh	r6, [r3, #0]
 8003a0a:	4854      	ldr	r0, [pc, #336]	; (8003b5c <_printf_i+0x244>)
 8003a0c:	2f6f      	cmp	r7, #111	; 0x6f
 8003a0e:	bf0c      	ite	eq
 8003a10:	2308      	moveq	r3, #8
 8003a12:	230a      	movne	r3, #10
 8003a14:	2100      	movs	r1, #0
 8003a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a1a:	6865      	ldr	r5, [r4, #4]
 8003a1c:	60a5      	str	r5, [r4, #8]
 8003a1e:	2d00      	cmp	r5, #0
 8003a20:	bfa2      	ittt	ge
 8003a22:	6821      	ldrge	r1, [r4, #0]
 8003a24:	f021 0104 	bicge.w	r1, r1, #4
 8003a28:	6021      	strge	r1, [r4, #0]
 8003a2a:	b90e      	cbnz	r6, 8003a30 <_printf_i+0x118>
 8003a2c:	2d00      	cmp	r5, #0
 8003a2e:	d04d      	beq.n	8003acc <_printf_i+0x1b4>
 8003a30:	4615      	mov	r5, r2
 8003a32:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a36:	fb03 6711 	mls	r7, r3, r1, r6
 8003a3a:	5dc7      	ldrb	r7, [r0, r7]
 8003a3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a40:	4637      	mov	r7, r6
 8003a42:	42bb      	cmp	r3, r7
 8003a44:	460e      	mov	r6, r1
 8003a46:	d9f4      	bls.n	8003a32 <_printf_i+0x11a>
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d10b      	bne.n	8003a64 <_printf_i+0x14c>
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	07de      	lsls	r6, r3, #31
 8003a50:	d508      	bpl.n	8003a64 <_printf_i+0x14c>
 8003a52:	6923      	ldr	r3, [r4, #16]
 8003a54:	6861      	ldr	r1, [r4, #4]
 8003a56:	4299      	cmp	r1, r3
 8003a58:	bfde      	ittt	le
 8003a5a:	2330      	movle	r3, #48	; 0x30
 8003a5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a64:	1b52      	subs	r2, r2, r5
 8003a66:	6122      	str	r2, [r4, #16]
 8003a68:	f8cd a000 	str.w	sl, [sp]
 8003a6c:	464b      	mov	r3, r9
 8003a6e:	aa03      	add	r2, sp, #12
 8003a70:	4621      	mov	r1, r4
 8003a72:	4640      	mov	r0, r8
 8003a74:	f7ff fee2 	bl	800383c <_printf_common>
 8003a78:	3001      	adds	r0, #1
 8003a7a:	d14c      	bne.n	8003b16 <_printf_i+0x1fe>
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	b004      	add	sp, #16
 8003a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a86:	4835      	ldr	r0, [pc, #212]	; (8003b5c <_printf_i+0x244>)
 8003a88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a8c:	6829      	ldr	r1, [r5, #0]
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a94:	6029      	str	r1, [r5, #0]
 8003a96:	061d      	lsls	r5, r3, #24
 8003a98:	d514      	bpl.n	8003ac4 <_printf_i+0x1ac>
 8003a9a:	07df      	lsls	r7, r3, #31
 8003a9c:	bf44      	itt	mi
 8003a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8003aa2:	6023      	strmi	r3, [r4, #0]
 8003aa4:	b91e      	cbnz	r6, 8003aae <_printf_i+0x196>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	f023 0320 	bic.w	r3, r3, #32
 8003aac:	6023      	str	r3, [r4, #0]
 8003aae:	2310      	movs	r3, #16
 8003ab0:	e7b0      	b.n	8003a14 <_printf_i+0xfc>
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	f043 0320 	orr.w	r3, r3, #32
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	2378      	movs	r3, #120	; 0x78
 8003abc:	4828      	ldr	r0, [pc, #160]	; (8003b60 <_printf_i+0x248>)
 8003abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ac2:	e7e3      	b.n	8003a8c <_printf_i+0x174>
 8003ac4:	0659      	lsls	r1, r3, #25
 8003ac6:	bf48      	it	mi
 8003ac8:	b2b6      	uxthmi	r6, r6
 8003aca:	e7e6      	b.n	8003a9a <_printf_i+0x182>
 8003acc:	4615      	mov	r5, r2
 8003ace:	e7bb      	b.n	8003a48 <_printf_i+0x130>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	6826      	ldr	r6, [r4, #0]
 8003ad4:	6961      	ldr	r1, [r4, #20]
 8003ad6:	1d18      	adds	r0, r3, #4
 8003ad8:	6028      	str	r0, [r5, #0]
 8003ada:	0635      	lsls	r5, r6, #24
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	d501      	bpl.n	8003ae4 <_printf_i+0x1cc>
 8003ae0:	6019      	str	r1, [r3, #0]
 8003ae2:	e002      	b.n	8003aea <_printf_i+0x1d2>
 8003ae4:	0670      	lsls	r0, r6, #25
 8003ae6:	d5fb      	bpl.n	8003ae0 <_printf_i+0x1c8>
 8003ae8:	8019      	strh	r1, [r3, #0]
 8003aea:	2300      	movs	r3, #0
 8003aec:	6123      	str	r3, [r4, #16]
 8003aee:	4615      	mov	r5, r2
 8003af0:	e7ba      	b.n	8003a68 <_printf_i+0x150>
 8003af2:	682b      	ldr	r3, [r5, #0]
 8003af4:	1d1a      	adds	r2, r3, #4
 8003af6:	602a      	str	r2, [r5, #0]
 8003af8:	681d      	ldr	r5, [r3, #0]
 8003afa:	6862      	ldr	r2, [r4, #4]
 8003afc:	2100      	movs	r1, #0
 8003afe:	4628      	mov	r0, r5
 8003b00:	f7fc fb6e 	bl	80001e0 <memchr>
 8003b04:	b108      	cbz	r0, 8003b0a <_printf_i+0x1f2>
 8003b06:	1b40      	subs	r0, r0, r5
 8003b08:	6060      	str	r0, [r4, #4]
 8003b0a:	6863      	ldr	r3, [r4, #4]
 8003b0c:	6123      	str	r3, [r4, #16]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b14:	e7a8      	b.n	8003a68 <_printf_i+0x150>
 8003b16:	6923      	ldr	r3, [r4, #16]
 8003b18:	462a      	mov	r2, r5
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	47d0      	blx	sl
 8003b20:	3001      	adds	r0, #1
 8003b22:	d0ab      	beq.n	8003a7c <_printf_i+0x164>
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	079b      	lsls	r3, r3, #30
 8003b28:	d413      	bmi.n	8003b52 <_printf_i+0x23a>
 8003b2a:	68e0      	ldr	r0, [r4, #12]
 8003b2c:	9b03      	ldr	r3, [sp, #12]
 8003b2e:	4298      	cmp	r0, r3
 8003b30:	bfb8      	it	lt
 8003b32:	4618      	movlt	r0, r3
 8003b34:	e7a4      	b.n	8003a80 <_printf_i+0x168>
 8003b36:	2301      	movs	r3, #1
 8003b38:	4632      	mov	r2, r6
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	4640      	mov	r0, r8
 8003b3e:	47d0      	blx	sl
 8003b40:	3001      	adds	r0, #1
 8003b42:	d09b      	beq.n	8003a7c <_printf_i+0x164>
 8003b44:	3501      	adds	r5, #1
 8003b46:	68e3      	ldr	r3, [r4, #12]
 8003b48:	9903      	ldr	r1, [sp, #12]
 8003b4a:	1a5b      	subs	r3, r3, r1
 8003b4c:	42ab      	cmp	r3, r5
 8003b4e:	dcf2      	bgt.n	8003b36 <_printf_i+0x21e>
 8003b50:	e7eb      	b.n	8003b2a <_printf_i+0x212>
 8003b52:	2500      	movs	r5, #0
 8003b54:	f104 0619 	add.w	r6, r4, #25
 8003b58:	e7f5      	b.n	8003b46 <_printf_i+0x22e>
 8003b5a:	bf00      	nop
 8003b5c:	08006396 	.word	0x08006396
 8003b60:	080063a7 	.word	0x080063a7

08003b64 <siprintf>:
 8003b64:	b40e      	push	{r1, r2, r3}
 8003b66:	b500      	push	{lr}
 8003b68:	b09c      	sub	sp, #112	; 0x70
 8003b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b6c:	9002      	str	r0, [sp, #8]
 8003b6e:	9006      	str	r0, [sp, #24]
 8003b70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b74:	4809      	ldr	r0, [pc, #36]	; (8003b9c <siprintf+0x38>)
 8003b76:	9107      	str	r1, [sp, #28]
 8003b78:	9104      	str	r1, [sp, #16]
 8003b7a:	4909      	ldr	r1, [pc, #36]	; (8003ba0 <siprintf+0x3c>)
 8003b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b80:	9105      	str	r1, [sp, #20]
 8003b82:	6800      	ldr	r0, [r0, #0]
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	a902      	add	r1, sp, #8
 8003b88:	f001 fb78 	bl	800527c <_svfiprintf_r>
 8003b8c:	9b02      	ldr	r3, [sp, #8]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	b01c      	add	sp, #112	; 0x70
 8003b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b98:	b003      	add	sp, #12
 8003b9a:	4770      	bx	lr
 8003b9c:	20000008 	.word	0x20000008
 8003ba0:	ffff0208 	.word	0xffff0208

08003ba4 <quorem>:
 8003ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba8:	6903      	ldr	r3, [r0, #16]
 8003baa:	690c      	ldr	r4, [r1, #16]
 8003bac:	42a3      	cmp	r3, r4
 8003bae:	4607      	mov	r7, r0
 8003bb0:	f2c0 8081 	blt.w	8003cb6 <quorem+0x112>
 8003bb4:	3c01      	subs	r4, #1
 8003bb6:	f101 0814 	add.w	r8, r1, #20
 8003bba:	f100 0514 	add.w	r5, r0, #20
 8003bbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003bc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003bd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003bd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bdc:	d331      	bcc.n	8003c42 <quorem+0x9e>
 8003bde:	f04f 0e00 	mov.w	lr, #0
 8003be2:	4640      	mov	r0, r8
 8003be4:	46ac      	mov	ip, r5
 8003be6:	46f2      	mov	sl, lr
 8003be8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003bec:	b293      	uxth	r3, r2
 8003bee:	fb06 e303 	mla	r3, r6, r3, lr
 8003bf2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	ebaa 0303 	sub.w	r3, sl, r3
 8003bfc:	f8dc a000 	ldr.w	sl, [ip]
 8003c00:	0c12      	lsrs	r2, r2, #16
 8003c02:	fa13 f38a 	uxtah	r3, r3, sl
 8003c06:	fb06 e202 	mla	r2, r6, r2, lr
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	9b00      	ldr	r3, [sp, #0]
 8003c0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c12:	b292      	uxth	r2, r2
 8003c14:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003c18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c1c:	f8bd 3000 	ldrh.w	r3, [sp]
 8003c20:	4581      	cmp	r9, r0
 8003c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c26:	f84c 3b04 	str.w	r3, [ip], #4
 8003c2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003c2e:	d2db      	bcs.n	8003be8 <quorem+0x44>
 8003c30:	f855 300b 	ldr.w	r3, [r5, fp]
 8003c34:	b92b      	cbnz	r3, 8003c42 <quorem+0x9e>
 8003c36:	9b01      	ldr	r3, [sp, #4]
 8003c38:	3b04      	subs	r3, #4
 8003c3a:	429d      	cmp	r5, r3
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	d32e      	bcc.n	8003c9e <quorem+0xfa>
 8003c40:	613c      	str	r4, [r7, #16]
 8003c42:	4638      	mov	r0, r7
 8003c44:	f001 f8c6 	bl	8004dd4 <__mcmp>
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	db24      	blt.n	8003c96 <quorem+0xf2>
 8003c4c:	3601      	adds	r6, #1
 8003c4e:	4628      	mov	r0, r5
 8003c50:	f04f 0c00 	mov.w	ip, #0
 8003c54:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c58:	f8d0 e000 	ldr.w	lr, [r0]
 8003c5c:	b293      	uxth	r3, r2
 8003c5e:	ebac 0303 	sub.w	r3, ip, r3
 8003c62:	0c12      	lsrs	r2, r2, #16
 8003c64:	fa13 f38e 	uxtah	r3, r3, lr
 8003c68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c76:	45c1      	cmp	r9, r8
 8003c78:	f840 3b04 	str.w	r3, [r0], #4
 8003c7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c80:	d2e8      	bcs.n	8003c54 <quorem+0xb0>
 8003c82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c8a:	b922      	cbnz	r2, 8003c96 <quorem+0xf2>
 8003c8c:	3b04      	subs	r3, #4
 8003c8e:	429d      	cmp	r5, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	d30a      	bcc.n	8003caa <quorem+0x106>
 8003c94:	613c      	str	r4, [r7, #16]
 8003c96:	4630      	mov	r0, r6
 8003c98:	b003      	add	sp, #12
 8003c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	3b04      	subs	r3, #4
 8003ca2:	2a00      	cmp	r2, #0
 8003ca4:	d1cc      	bne.n	8003c40 <quorem+0x9c>
 8003ca6:	3c01      	subs	r4, #1
 8003ca8:	e7c7      	b.n	8003c3a <quorem+0x96>
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	3b04      	subs	r3, #4
 8003cae:	2a00      	cmp	r2, #0
 8003cb0:	d1f0      	bne.n	8003c94 <quorem+0xf0>
 8003cb2:	3c01      	subs	r4, #1
 8003cb4:	e7eb      	b.n	8003c8e <quorem+0xea>
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	e7ee      	b.n	8003c98 <quorem+0xf4>
 8003cba:	0000      	movs	r0, r0
 8003cbc:	0000      	movs	r0, r0
	...

08003cc0 <_dtoa_r>:
 8003cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc4:	ed2d 8b04 	vpush	{d8-d9}
 8003cc8:	ec57 6b10 	vmov	r6, r7, d0
 8003ccc:	b093      	sub	sp, #76	; 0x4c
 8003cce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003cd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003cd4:	9106      	str	r1, [sp, #24]
 8003cd6:	ee10 aa10 	vmov	sl, s0
 8003cda:	4604      	mov	r4, r0
 8003cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8003cde:	930c      	str	r3, [sp, #48]	; 0x30
 8003ce0:	46bb      	mov	fp, r7
 8003ce2:	b975      	cbnz	r5, 8003d02 <_dtoa_r+0x42>
 8003ce4:	2010      	movs	r0, #16
 8003ce6:	f000 fddd 	bl	80048a4 <malloc>
 8003cea:	4602      	mov	r2, r0
 8003cec:	6260      	str	r0, [r4, #36]	; 0x24
 8003cee:	b920      	cbnz	r0, 8003cfa <_dtoa_r+0x3a>
 8003cf0:	4ba7      	ldr	r3, [pc, #668]	; (8003f90 <_dtoa_r+0x2d0>)
 8003cf2:	21ea      	movs	r1, #234	; 0xea
 8003cf4:	48a7      	ldr	r0, [pc, #668]	; (8003f94 <_dtoa_r+0x2d4>)
 8003cf6:	f001 fbd1 	bl	800549c <__assert_func>
 8003cfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003cfe:	6005      	str	r5, [r0, #0]
 8003d00:	60c5      	str	r5, [r0, #12]
 8003d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d04:	6819      	ldr	r1, [r3, #0]
 8003d06:	b151      	cbz	r1, 8003d1e <_dtoa_r+0x5e>
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	604a      	str	r2, [r1, #4]
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	4093      	lsls	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
 8003d12:	4620      	mov	r0, r4
 8003d14:	f000 fe1c 	bl	8004950 <_Bfree>
 8003d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	1e3b      	subs	r3, r7, #0
 8003d20:	bfaa      	itet	ge
 8003d22:	2300      	movge	r3, #0
 8003d24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003d28:	f8c8 3000 	strge.w	r3, [r8]
 8003d2c:	4b9a      	ldr	r3, [pc, #616]	; (8003f98 <_dtoa_r+0x2d8>)
 8003d2e:	bfbc      	itt	lt
 8003d30:	2201      	movlt	r2, #1
 8003d32:	f8c8 2000 	strlt.w	r2, [r8]
 8003d36:	ea33 030b 	bics.w	r3, r3, fp
 8003d3a:	d11b      	bne.n	8003d74 <_dtoa_r+0xb4>
 8003d3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003d48:	4333      	orrs	r3, r6
 8003d4a:	f000 8592 	beq.w	8004872 <_dtoa_r+0xbb2>
 8003d4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d50:	b963      	cbnz	r3, 8003d6c <_dtoa_r+0xac>
 8003d52:	4b92      	ldr	r3, [pc, #584]	; (8003f9c <_dtoa_r+0x2dc>)
 8003d54:	e022      	b.n	8003d9c <_dtoa_r+0xdc>
 8003d56:	4b92      	ldr	r3, [pc, #584]	; (8003fa0 <_dtoa_r+0x2e0>)
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	9801      	ldr	r0, [sp, #4]
 8003d62:	b013      	add	sp, #76	; 0x4c
 8003d64:	ecbd 8b04 	vpop	{d8-d9}
 8003d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d6c:	4b8b      	ldr	r3, [pc, #556]	; (8003f9c <_dtoa_r+0x2dc>)
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	3303      	adds	r3, #3
 8003d72:	e7f3      	b.n	8003d5c <_dtoa_r+0x9c>
 8003d74:	2200      	movs	r2, #0
 8003d76:	2300      	movs	r3, #0
 8003d78:	4650      	mov	r0, sl
 8003d7a:	4659      	mov	r1, fp
 8003d7c:	f7fc fea4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d80:	ec4b ab19 	vmov	d9, sl, fp
 8003d84:	4680      	mov	r8, r0
 8003d86:	b158      	cbz	r0, 8003da0 <_dtoa_r+0xe0>
 8003d88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 856b 	beq.w	800486c <_dtoa_r+0xbac>
 8003d96:	4883      	ldr	r0, [pc, #524]	; (8003fa4 <_dtoa_r+0x2e4>)
 8003d98:	6018      	str	r0, [r3, #0]
 8003d9a:	1e43      	subs	r3, r0, #1
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	e7df      	b.n	8003d60 <_dtoa_r+0xa0>
 8003da0:	ec4b ab10 	vmov	d0, sl, fp
 8003da4:	aa10      	add	r2, sp, #64	; 0x40
 8003da6:	a911      	add	r1, sp, #68	; 0x44
 8003da8:	4620      	mov	r0, r4
 8003daa:	f001 f8b9 	bl	8004f20 <__d2b>
 8003dae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003db2:	ee08 0a10 	vmov	s16, r0
 8003db6:	2d00      	cmp	r5, #0
 8003db8:	f000 8084 	beq.w	8003ec4 <_dtoa_r+0x204>
 8003dbc:	ee19 3a90 	vmov	r3, s19
 8003dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003dc8:	4656      	mov	r6, sl
 8003dca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003dce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003dd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003dd6:	4b74      	ldr	r3, [pc, #464]	; (8003fa8 <_dtoa_r+0x2e8>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	4630      	mov	r0, r6
 8003ddc:	4639      	mov	r1, r7
 8003dde:	f7fc fa53 	bl	8000288 <__aeabi_dsub>
 8003de2:	a365      	add	r3, pc, #404	; (adr r3, 8003f78 <_dtoa_r+0x2b8>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f7fc fc06 	bl	80005f8 <__aeabi_dmul>
 8003dec:	a364      	add	r3, pc, #400	; (adr r3, 8003f80 <_dtoa_r+0x2c0>)
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f7fc fa4b 	bl	800028c <__adddf3>
 8003df6:	4606      	mov	r6, r0
 8003df8:	4628      	mov	r0, r5
 8003dfa:	460f      	mov	r7, r1
 8003dfc:	f7fc fb92 	bl	8000524 <__aeabi_i2d>
 8003e00:	a361      	add	r3, pc, #388	; (adr r3, 8003f88 <_dtoa_r+0x2c8>)
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f7fc fbf7 	bl	80005f8 <__aeabi_dmul>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4630      	mov	r0, r6
 8003e10:	4639      	mov	r1, r7
 8003e12:	f7fc fa3b 	bl	800028c <__adddf3>
 8003e16:	4606      	mov	r6, r0
 8003e18:	460f      	mov	r7, r1
 8003e1a:	f7fc fe9d 	bl	8000b58 <__aeabi_d2iz>
 8003e1e:	2200      	movs	r2, #0
 8003e20:	9000      	str	r0, [sp, #0]
 8003e22:	2300      	movs	r3, #0
 8003e24:	4630      	mov	r0, r6
 8003e26:	4639      	mov	r1, r7
 8003e28:	f7fc fe58 	bl	8000adc <__aeabi_dcmplt>
 8003e2c:	b150      	cbz	r0, 8003e44 <_dtoa_r+0x184>
 8003e2e:	9800      	ldr	r0, [sp, #0]
 8003e30:	f7fc fb78 	bl	8000524 <__aeabi_i2d>
 8003e34:	4632      	mov	r2, r6
 8003e36:	463b      	mov	r3, r7
 8003e38:	f7fc fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e3c:	b910      	cbnz	r0, 8003e44 <_dtoa_r+0x184>
 8003e3e:	9b00      	ldr	r3, [sp, #0]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	9b00      	ldr	r3, [sp, #0]
 8003e46:	2b16      	cmp	r3, #22
 8003e48:	d85a      	bhi.n	8003f00 <_dtoa_r+0x240>
 8003e4a:	9a00      	ldr	r2, [sp, #0]
 8003e4c:	4b57      	ldr	r3, [pc, #348]	; (8003fac <_dtoa_r+0x2ec>)
 8003e4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e56:	ec51 0b19 	vmov	r0, r1, d9
 8003e5a:	f7fc fe3f 	bl	8000adc <__aeabi_dcmplt>
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	d050      	beq.n	8003f04 <_dtoa_r+0x244>
 8003e62:	9b00      	ldr	r3, [sp, #0]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e6e:	1b5d      	subs	r5, r3, r5
 8003e70:	1e6b      	subs	r3, r5, #1
 8003e72:	9305      	str	r3, [sp, #20]
 8003e74:	bf45      	ittet	mi
 8003e76:	f1c5 0301 	rsbmi	r3, r5, #1
 8003e7a:	9304      	strmi	r3, [sp, #16]
 8003e7c:	2300      	movpl	r3, #0
 8003e7e:	2300      	movmi	r3, #0
 8003e80:	bf4c      	ite	mi
 8003e82:	9305      	strmi	r3, [sp, #20]
 8003e84:	9304      	strpl	r3, [sp, #16]
 8003e86:	9b00      	ldr	r3, [sp, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	db3d      	blt.n	8003f08 <_dtoa_r+0x248>
 8003e8c:	9b05      	ldr	r3, [sp, #20]
 8003e8e:	9a00      	ldr	r2, [sp, #0]
 8003e90:	920a      	str	r2, [sp, #40]	; 0x28
 8003e92:	4413      	add	r3, r2
 8003e94:	9305      	str	r3, [sp, #20]
 8003e96:	2300      	movs	r3, #0
 8003e98:	9307      	str	r3, [sp, #28]
 8003e9a:	9b06      	ldr	r3, [sp, #24]
 8003e9c:	2b09      	cmp	r3, #9
 8003e9e:	f200 8089 	bhi.w	8003fb4 <_dtoa_r+0x2f4>
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	bfc4      	itt	gt
 8003ea6:	3b04      	subgt	r3, #4
 8003ea8:	9306      	strgt	r3, [sp, #24]
 8003eaa:	9b06      	ldr	r3, [sp, #24]
 8003eac:	f1a3 0302 	sub.w	r3, r3, #2
 8003eb0:	bfcc      	ite	gt
 8003eb2:	2500      	movgt	r5, #0
 8003eb4:	2501      	movle	r5, #1
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	f200 8087 	bhi.w	8003fca <_dtoa_r+0x30a>
 8003ebc:	e8df f003 	tbb	[pc, r3]
 8003ec0:	59383a2d 	.word	0x59383a2d
 8003ec4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003ec8:	441d      	add	r5, r3
 8003eca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	bfc1      	itttt	gt
 8003ed2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003ed6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003eda:	fa0b f303 	lslgt.w	r3, fp, r3
 8003ede:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003ee2:	bfda      	itte	le
 8003ee4:	f1c3 0320 	rsble	r3, r3, #32
 8003ee8:	fa06 f003 	lslle.w	r0, r6, r3
 8003eec:	4318      	orrgt	r0, r3
 8003eee:	f7fc fb09 	bl	8000504 <__aeabi_ui2d>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	4606      	mov	r6, r0
 8003ef6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003efa:	3d01      	subs	r5, #1
 8003efc:	930e      	str	r3, [sp, #56]	; 0x38
 8003efe:	e76a      	b.n	8003dd6 <_dtoa_r+0x116>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e7b2      	b.n	8003e6a <_dtoa_r+0x1aa>
 8003f04:	900b      	str	r0, [sp, #44]	; 0x2c
 8003f06:	e7b1      	b.n	8003e6c <_dtoa_r+0x1ac>
 8003f08:	9b04      	ldr	r3, [sp, #16]
 8003f0a:	9a00      	ldr	r2, [sp, #0]
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	9304      	str	r3, [sp, #16]
 8003f10:	4253      	negs	r3, r2
 8003f12:	9307      	str	r3, [sp, #28]
 8003f14:	2300      	movs	r3, #0
 8003f16:	930a      	str	r3, [sp, #40]	; 0x28
 8003f18:	e7bf      	b.n	8003e9a <_dtoa_r+0x1da>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	9308      	str	r3, [sp, #32]
 8003f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	dc55      	bgt.n	8003fd0 <_dtoa_r+0x310>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f2e:	e00c      	b.n	8003f4a <_dtoa_r+0x28a>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e7f3      	b.n	8003f1c <_dtoa_r+0x25c>
 8003f34:	2300      	movs	r3, #0
 8003f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f38:	9308      	str	r3, [sp, #32]
 8003f3a:	9b00      	ldr	r3, [sp, #0]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	3301      	adds	r3, #1
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	9303      	str	r3, [sp, #12]
 8003f46:	bfb8      	it	lt
 8003f48:	2301      	movlt	r3, #1
 8003f4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	6042      	str	r2, [r0, #4]
 8003f50:	2204      	movs	r2, #4
 8003f52:	f102 0614 	add.w	r6, r2, #20
 8003f56:	429e      	cmp	r6, r3
 8003f58:	6841      	ldr	r1, [r0, #4]
 8003f5a:	d93d      	bls.n	8003fd8 <_dtoa_r+0x318>
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f000 fcb7 	bl	80048d0 <_Balloc>
 8003f62:	9001      	str	r0, [sp, #4]
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d13b      	bne.n	8003fe0 <_dtoa_r+0x320>
 8003f68:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <_dtoa_r+0x2f0>)
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003f70:	e6c0      	b.n	8003cf4 <_dtoa_r+0x34>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e7df      	b.n	8003f36 <_dtoa_r+0x276>
 8003f76:	bf00      	nop
 8003f78:	636f4361 	.word	0x636f4361
 8003f7c:	3fd287a7 	.word	0x3fd287a7
 8003f80:	8b60c8b3 	.word	0x8b60c8b3
 8003f84:	3fc68a28 	.word	0x3fc68a28
 8003f88:	509f79fb 	.word	0x509f79fb
 8003f8c:	3fd34413 	.word	0x3fd34413
 8003f90:	080063c5 	.word	0x080063c5
 8003f94:	080063dc 	.word	0x080063dc
 8003f98:	7ff00000 	.word	0x7ff00000
 8003f9c:	080063c1 	.word	0x080063c1
 8003fa0:	080063b8 	.word	0x080063b8
 8003fa4:	08006395 	.word	0x08006395
 8003fa8:	3ff80000 	.word	0x3ff80000
 8003fac:	080064d0 	.word	0x080064d0
 8003fb0:	08006437 	.word	0x08006437
 8003fb4:	2501      	movs	r5, #1
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9306      	str	r3, [sp, #24]
 8003fba:	9508      	str	r5, [sp, #32]
 8003fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2312      	movs	r3, #18
 8003fc8:	e7b0      	b.n	8003f2c <_dtoa_r+0x26c>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	9308      	str	r3, [sp, #32]
 8003fce:	e7f5      	b.n	8003fbc <_dtoa_r+0x2fc>
 8003fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003fd6:	e7b8      	b.n	8003f4a <_dtoa_r+0x28a>
 8003fd8:	3101      	adds	r1, #1
 8003fda:	6041      	str	r1, [r0, #4]
 8003fdc:	0052      	lsls	r2, r2, #1
 8003fde:	e7b8      	b.n	8003f52 <_dtoa_r+0x292>
 8003fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fe2:	9a01      	ldr	r2, [sp, #4]
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	2b0e      	cmp	r3, #14
 8003fea:	f200 809d 	bhi.w	8004128 <_dtoa_r+0x468>
 8003fee:	2d00      	cmp	r5, #0
 8003ff0:	f000 809a 	beq.w	8004128 <_dtoa_r+0x468>
 8003ff4:	9b00      	ldr	r3, [sp, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	dd32      	ble.n	8004060 <_dtoa_r+0x3a0>
 8003ffa:	4ab7      	ldr	r2, [pc, #732]	; (80042d8 <_dtoa_r+0x618>)
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004004:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004008:	9b00      	ldr	r3, [sp, #0]
 800400a:	05d8      	lsls	r0, r3, #23
 800400c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004010:	d516      	bpl.n	8004040 <_dtoa_r+0x380>
 8004012:	4bb2      	ldr	r3, [pc, #712]	; (80042dc <_dtoa_r+0x61c>)
 8004014:	ec51 0b19 	vmov	r0, r1, d9
 8004018:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800401c:	f7fc fc16 	bl	800084c <__aeabi_ddiv>
 8004020:	f007 070f 	and.w	r7, r7, #15
 8004024:	4682      	mov	sl, r0
 8004026:	468b      	mov	fp, r1
 8004028:	2503      	movs	r5, #3
 800402a:	4eac      	ldr	r6, [pc, #688]	; (80042dc <_dtoa_r+0x61c>)
 800402c:	b957      	cbnz	r7, 8004044 <_dtoa_r+0x384>
 800402e:	4642      	mov	r2, r8
 8004030:	464b      	mov	r3, r9
 8004032:	4650      	mov	r0, sl
 8004034:	4659      	mov	r1, fp
 8004036:	f7fc fc09 	bl	800084c <__aeabi_ddiv>
 800403a:	4682      	mov	sl, r0
 800403c:	468b      	mov	fp, r1
 800403e:	e028      	b.n	8004092 <_dtoa_r+0x3d2>
 8004040:	2502      	movs	r5, #2
 8004042:	e7f2      	b.n	800402a <_dtoa_r+0x36a>
 8004044:	07f9      	lsls	r1, r7, #31
 8004046:	d508      	bpl.n	800405a <_dtoa_r+0x39a>
 8004048:	4640      	mov	r0, r8
 800404a:	4649      	mov	r1, r9
 800404c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004050:	f7fc fad2 	bl	80005f8 <__aeabi_dmul>
 8004054:	3501      	adds	r5, #1
 8004056:	4680      	mov	r8, r0
 8004058:	4689      	mov	r9, r1
 800405a:	107f      	asrs	r7, r7, #1
 800405c:	3608      	adds	r6, #8
 800405e:	e7e5      	b.n	800402c <_dtoa_r+0x36c>
 8004060:	f000 809b 	beq.w	800419a <_dtoa_r+0x4da>
 8004064:	9b00      	ldr	r3, [sp, #0]
 8004066:	4f9d      	ldr	r7, [pc, #628]	; (80042dc <_dtoa_r+0x61c>)
 8004068:	425e      	negs	r6, r3
 800406a:	4b9b      	ldr	r3, [pc, #620]	; (80042d8 <_dtoa_r+0x618>)
 800406c:	f006 020f 	and.w	r2, r6, #15
 8004070:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	ec51 0b19 	vmov	r0, r1, d9
 800407c:	f7fc fabc 	bl	80005f8 <__aeabi_dmul>
 8004080:	1136      	asrs	r6, r6, #4
 8004082:	4682      	mov	sl, r0
 8004084:	468b      	mov	fp, r1
 8004086:	2300      	movs	r3, #0
 8004088:	2502      	movs	r5, #2
 800408a:	2e00      	cmp	r6, #0
 800408c:	d17a      	bne.n	8004184 <_dtoa_r+0x4c4>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1d3      	bne.n	800403a <_dtoa_r+0x37a>
 8004092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8082 	beq.w	800419e <_dtoa_r+0x4de>
 800409a:	4b91      	ldr	r3, [pc, #580]	; (80042e0 <_dtoa_r+0x620>)
 800409c:	2200      	movs	r2, #0
 800409e:	4650      	mov	r0, sl
 80040a0:	4659      	mov	r1, fp
 80040a2:	f7fc fd1b 	bl	8000adc <__aeabi_dcmplt>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	d079      	beq.n	800419e <_dtoa_r+0x4de>
 80040aa:	9b03      	ldr	r3, [sp, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d076      	beq.n	800419e <_dtoa_r+0x4de>
 80040b0:	9b02      	ldr	r3, [sp, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	dd36      	ble.n	8004124 <_dtoa_r+0x464>
 80040b6:	9b00      	ldr	r3, [sp, #0]
 80040b8:	4650      	mov	r0, sl
 80040ba:	4659      	mov	r1, fp
 80040bc:	1e5f      	subs	r7, r3, #1
 80040be:	2200      	movs	r2, #0
 80040c0:	4b88      	ldr	r3, [pc, #544]	; (80042e4 <_dtoa_r+0x624>)
 80040c2:	f7fc fa99 	bl	80005f8 <__aeabi_dmul>
 80040c6:	9e02      	ldr	r6, [sp, #8]
 80040c8:	4682      	mov	sl, r0
 80040ca:	468b      	mov	fp, r1
 80040cc:	3501      	adds	r5, #1
 80040ce:	4628      	mov	r0, r5
 80040d0:	f7fc fa28 	bl	8000524 <__aeabi_i2d>
 80040d4:	4652      	mov	r2, sl
 80040d6:	465b      	mov	r3, fp
 80040d8:	f7fc fa8e 	bl	80005f8 <__aeabi_dmul>
 80040dc:	4b82      	ldr	r3, [pc, #520]	; (80042e8 <_dtoa_r+0x628>)
 80040de:	2200      	movs	r2, #0
 80040e0:	f7fc f8d4 	bl	800028c <__adddf3>
 80040e4:	46d0      	mov	r8, sl
 80040e6:	46d9      	mov	r9, fp
 80040e8:	4682      	mov	sl, r0
 80040ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80040ee:	2e00      	cmp	r6, #0
 80040f0:	d158      	bne.n	80041a4 <_dtoa_r+0x4e4>
 80040f2:	4b7e      	ldr	r3, [pc, #504]	; (80042ec <_dtoa_r+0x62c>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	4640      	mov	r0, r8
 80040f8:	4649      	mov	r1, r9
 80040fa:	f7fc f8c5 	bl	8000288 <__aeabi_dsub>
 80040fe:	4652      	mov	r2, sl
 8004100:	465b      	mov	r3, fp
 8004102:	4680      	mov	r8, r0
 8004104:	4689      	mov	r9, r1
 8004106:	f7fc fd07 	bl	8000b18 <__aeabi_dcmpgt>
 800410a:	2800      	cmp	r0, #0
 800410c:	f040 8295 	bne.w	800463a <_dtoa_r+0x97a>
 8004110:	4652      	mov	r2, sl
 8004112:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004116:	4640      	mov	r0, r8
 8004118:	4649      	mov	r1, r9
 800411a:	f7fc fcdf 	bl	8000adc <__aeabi_dcmplt>
 800411e:	2800      	cmp	r0, #0
 8004120:	f040 8289 	bne.w	8004636 <_dtoa_r+0x976>
 8004124:	ec5b ab19 	vmov	sl, fp, d9
 8004128:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800412a:	2b00      	cmp	r3, #0
 800412c:	f2c0 8148 	blt.w	80043c0 <_dtoa_r+0x700>
 8004130:	9a00      	ldr	r2, [sp, #0]
 8004132:	2a0e      	cmp	r2, #14
 8004134:	f300 8144 	bgt.w	80043c0 <_dtoa_r+0x700>
 8004138:	4b67      	ldr	r3, [pc, #412]	; (80042d8 <_dtoa_r+0x618>)
 800413a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800413e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	f280 80d5 	bge.w	80042f4 <_dtoa_r+0x634>
 800414a:	9b03      	ldr	r3, [sp, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f300 80d1 	bgt.w	80042f4 <_dtoa_r+0x634>
 8004152:	f040 826f 	bne.w	8004634 <_dtoa_r+0x974>
 8004156:	4b65      	ldr	r3, [pc, #404]	; (80042ec <_dtoa_r+0x62c>)
 8004158:	2200      	movs	r2, #0
 800415a:	4640      	mov	r0, r8
 800415c:	4649      	mov	r1, r9
 800415e:	f7fc fa4b 	bl	80005f8 <__aeabi_dmul>
 8004162:	4652      	mov	r2, sl
 8004164:	465b      	mov	r3, fp
 8004166:	f7fc fccd 	bl	8000b04 <__aeabi_dcmpge>
 800416a:	9e03      	ldr	r6, [sp, #12]
 800416c:	4637      	mov	r7, r6
 800416e:	2800      	cmp	r0, #0
 8004170:	f040 8245 	bne.w	80045fe <_dtoa_r+0x93e>
 8004174:	9d01      	ldr	r5, [sp, #4]
 8004176:	2331      	movs	r3, #49	; 0x31
 8004178:	f805 3b01 	strb.w	r3, [r5], #1
 800417c:	9b00      	ldr	r3, [sp, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	e240      	b.n	8004606 <_dtoa_r+0x946>
 8004184:	07f2      	lsls	r2, r6, #31
 8004186:	d505      	bpl.n	8004194 <_dtoa_r+0x4d4>
 8004188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800418c:	f7fc fa34 	bl	80005f8 <__aeabi_dmul>
 8004190:	3501      	adds	r5, #1
 8004192:	2301      	movs	r3, #1
 8004194:	1076      	asrs	r6, r6, #1
 8004196:	3708      	adds	r7, #8
 8004198:	e777      	b.n	800408a <_dtoa_r+0x3ca>
 800419a:	2502      	movs	r5, #2
 800419c:	e779      	b.n	8004092 <_dtoa_r+0x3d2>
 800419e:	9f00      	ldr	r7, [sp, #0]
 80041a0:	9e03      	ldr	r6, [sp, #12]
 80041a2:	e794      	b.n	80040ce <_dtoa_r+0x40e>
 80041a4:	9901      	ldr	r1, [sp, #4]
 80041a6:	4b4c      	ldr	r3, [pc, #304]	; (80042d8 <_dtoa_r+0x618>)
 80041a8:	4431      	add	r1, r6
 80041aa:	910d      	str	r1, [sp, #52]	; 0x34
 80041ac:	9908      	ldr	r1, [sp, #32]
 80041ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80041b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041b6:	2900      	cmp	r1, #0
 80041b8:	d043      	beq.n	8004242 <_dtoa_r+0x582>
 80041ba:	494d      	ldr	r1, [pc, #308]	; (80042f0 <_dtoa_r+0x630>)
 80041bc:	2000      	movs	r0, #0
 80041be:	f7fc fb45 	bl	800084c <__aeabi_ddiv>
 80041c2:	4652      	mov	r2, sl
 80041c4:	465b      	mov	r3, fp
 80041c6:	f7fc f85f 	bl	8000288 <__aeabi_dsub>
 80041ca:	9d01      	ldr	r5, [sp, #4]
 80041cc:	4682      	mov	sl, r0
 80041ce:	468b      	mov	fp, r1
 80041d0:	4649      	mov	r1, r9
 80041d2:	4640      	mov	r0, r8
 80041d4:	f7fc fcc0 	bl	8000b58 <__aeabi_d2iz>
 80041d8:	4606      	mov	r6, r0
 80041da:	f7fc f9a3 	bl	8000524 <__aeabi_i2d>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4640      	mov	r0, r8
 80041e4:	4649      	mov	r1, r9
 80041e6:	f7fc f84f 	bl	8000288 <__aeabi_dsub>
 80041ea:	3630      	adds	r6, #48	; 0x30
 80041ec:	f805 6b01 	strb.w	r6, [r5], #1
 80041f0:	4652      	mov	r2, sl
 80041f2:	465b      	mov	r3, fp
 80041f4:	4680      	mov	r8, r0
 80041f6:	4689      	mov	r9, r1
 80041f8:	f7fc fc70 	bl	8000adc <__aeabi_dcmplt>
 80041fc:	2800      	cmp	r0, #0
 80041fe:	d163      	bne.n	80042c8 <_dtoa_r+0x608>
 8004200:	4642      	mov	r2, r8
 8004202:	464b      	mov	r3, r9
 8004204:	4936      	ldr	r1, [pc, #216]	; (80042e0 <_dtoa_r+0x620>)
 8004206:	2000      	movs	r0, #0
 8004208:	f7fc f83e 	bl	8000288 <__aeabi_dsub>
 800420c:	4652      	mov	r2, sl
 800420e:	465b      	mov	r3, fp
 8004210:	f7fc fc64 	bl	8000adc <__aeabi_dcmplt>
 8004214:	2800      	cmp	r0, #0
 8004216:	f040 80b5 	bne.w	8004384 <_dtoa_r+0x6c4>
 800421a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800421c:	429d      	cmp	r5, r3
 800421e:	d081      	beq.n	8004124 <_dtoa_r+0x464>
 8004220:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <_dtoa_r+0x624>)
 8004222:	2200      	movs	r2, #0
 8004224:	4650      	mov	r0, sl
 8004226:	4659      	mov	r1, fp
 8004228:	f7fc f9e6 	bl	80005f8 <__aeabi_dmul>
 800422c:	4b2d      	ldr	r3, [pc, #180]	; (80042e4 <_dtoa_r+0x624>)
 800422e:	4682      	mov	sl, r0
 8004230:	468b      	mov	fp, r1
 8004232:	4640      	mov	r0, r8
 8004234:	4649      	mov	r1, r9
 8004236:	2200      	movs	r2, #0
 8004238:	f7fc f9de 	bl	80005f8 <__aeabi_dmul>
 800423c:	4680      	mov	r8, r0
 800423e:	4689      	mov	r9, r1
 8004240:	e7c6      	b.n	80041d0 <_dtoa_r+0x510>
 8004242:	4650      	mov	r0, sl
 8004244:	4659      	mov	r1, fp
 8004246:	f7fc f9d7 	bl	80005f8 <__aeabi_dmul>
 800424a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800424c:	9d01      	ldr	r5, [sp, #4]
 800424e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004250:	4682      	mov	sl, r0
 8004252:	468b      	mov	fp, r1
 8004254:	4649      	mov	r1, r9
 8004256:	4640      	mov	r0, r8
 8004258:	f7fc fc7e 	bl	8000b58 <__aeabi_d2iz>
 800425c:	4606      	mov	r6, r0
 800425e:	f7fc f961 	bl	8000524 <__aeabi_i2d>
 8004262:	3630      	adds	r6, #48	; 0x30
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4640      	mov	r0, r8
 800426a:	4649      	mov	r1, r9
 800426c:	f7fc f80c 	bl	8000288 <__aeabi_dsub>
 8004270:	f805 6b01 	strb.w	r6, [r5], #1
 8004274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004276:	429d      	cmp	r5, r3
 8004278:	4680      	mov	r8, r0
 800427a:	4689      	mov	r9, r1
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	d124      	bne.n	80042cc <_dtoa_r+0x60c>
 8004282:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <_dtoa_r+0x630>)
 8004284:	4650      	mov	r0, sl
 8004286:	4659      	mov	r1, fp
 8004288:	f7fc f800 	bl	800028c <__adddf3>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4640      	mov	r0, r8
 8004292:	4649      	mov	r1, r9
 8004294:	f7fc fc40 	bl	8000b18 <__aeabi_dcmpgt>
 8004298:	2800      	cmp	r0, #0
 800429a:	d173      	bne.n	8004384 <_dtoa_r+0x6c4>
 800429c:	4652      	mov	r2, sl
 800429e:	465b      	mov	r3, fp
 80042a0:	4913      	ldr	r1, [pc, #76]	; (80042f0 <_dtoa_r+0x630>)
 80042a2:	2000      	movs	r0, #0
 80042a4:	f7fb fff0 	bl	8000288 <__aeabi_dsub>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4640      	mov	r0, r8
 80042ae:	4649      	mov	r1, r9
 80042b0:	f7fc fc14 	bl	8000adc <__aeabi_dcmplt>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	f43f af35 	beq.w	8004124 <_dtoa_r+0x464>
 80042ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80042bc:	1e6b      	subs	r3, r5, #1
 80042be:	930f      	str	r3, [sp, #60]	; 0x3c
 80042c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042c4:	2b30      	cmp	r3, #48	; 0x30
 80042c6:	d0f8      	beq.n	80042ba <_dtoa_r+0x5fa>
 80042c8:	9700      	str	r7, [sp, #0]
 80042ca:	e049      	b.n	8004360 <_dtoa_r+0x6a0>
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <_dtoa_r+0x624>)
 80042ce:	f7fc f993 	bl	80005f8 <__aeabi_dmul>
 80042d2:	4680      	mov	r8, r0
 80042d4:	4689      	mov	r9, r1
 80042d6:	e7bd      	b.n	8004254 <_dtoa_r+0x594>
 80042d8:	080064d0 	.word	0x080064d0
 80042dc:	080064a8 	.word	0x080064a8
 80042e0:	3ff00000 	.word	0x3ff00000
 80042e4:	40240000 	.word	0x40240000
 80042e8:	401c0000 	.word	0x401c0000
 80042ec:	40140000 	.word	0x40140000
 80042f0:	3fe00000 	.word	0x3fe00000
 80042f4:	9d01      	ldr	r5, [sp, #4]
 80042f6:	4656      	mov	r6, sl
 80042f8:	465f      	mov	r7, fp
 80042fa:	4642      	mov	r2, r8
 80042fc:	464b      	mov	r3, r9
 80042fe:	4630      	mov	r0, r6
 8004300:	4639      	mov	r1, r7
 8004302:	f7fc faa3 	bl	800084c <__aeabi_ddiv>
 8004306:	f7fc fc27 	bl	8000b58 <__aeabi_d2iz>
 800430a:	4682      	mov	sl, r0
 800430c:	f7fc f90a 	bl	8000524 <__aeabi_i2d>
 8004310:	4642      	mov	r2, r8
 8004312:	464b      	mov	r3, r9
 8004314:	f7fc f970 	bl	80005f8 <__aeabi_dmul>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4630      	mov	r0, r6
 800431e:	4639      	mov	r1, r7
 8004320:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004324:	f7fb ffb0 	bl	8000288 <__aeabi_dsub>
 8004328:	f805 6b01 	strb.w	r6, [r5], #1
 800432c:	9e01      	ldr	r6, [sp, #4]
 800432e:	9f03      	ldr	r7, [sp, #12]
 8004330:	1bae      	subs	r6, r5, r6
 8004332:	42b7      	cmp	r7, r6
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	d135      	bne.n	80043a6 <_dtoa_r+0x6e6>
 800433a:	f7fb ffa7 	bl	800028c <__adddf3>
 800433e:	4642      	mov	r2, r8
 8004340:	464b      	mov	r3, r9
 8004342:	4606      	mov	r6, r0
 8004344:	460f      	mov	r7, r1
 8004346:	f7fc fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 800434a:	b9d0      	cbnz	r0, 8004382 <_dtoa_r+0x6c2>
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	4630      	mov	r0, r6
 8004352:	4639      	mov	r1, r7
 8004354:	f7fc fbb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004358:	b110      	cbz	r0, 8004360 <_dtoa_r+0x6a0>
 800435a:	f01a 0f01 	tst.w	sl, #1
 800435e:	d110      	bne.n	8004382 <_dtoa_r+0x6c2>
 8004360:	4620      	mov	r0, r4
 8004362:	ee18 1a10 	vmov	r1, s16
 8004366:	f000 faf3 	bl	8004950 <_Bfree>
 800436a:	2300      	movs	r3, #0
 800436c:	9800      	ldr	r0, [sp, #0]
 800436e:	702b      	strb	r3, [r5, #0]
 8004370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004372:	3001      	adds	r0, #1
 8004374:	6018      	str	r0, [r3, #0]
 8004376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004378:	2b00      	cmp	r3, #0
 800437a:	f43f acf1 	beq.w	8003d60 <_dtoa_r+0xa0>
 800437e:	601d      	str	r5, [r3, #0]
 8004380:	e4ee      	b.n	8003d60 <_dtoa_r+0xa0>
 8004382:	9f00      	ldr	r7, [sp, #0]
 8004384:	462b      	mov	r3, r5
 8004386:	461d      	mov	r5, r3
 8004388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800438c:	2a39      	cmp	r2, #57	; 0x39
 800438e:	d106      	bne.n	800439e <_dtoa_r+0x6de>
 8004390:	9a01      	ldr	r2, [sp, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d1f7      	bne.n	8004386 <_dtoa_r+0x6c6>
 8004396:	9901      	ldr	r1, [sp, #4]
 8004398:	2230      	movs	r2, #48	; 0x30
 800439a:	3701      	adds	r7, #1
 800439c:	700a      	strb	r2, [r1, #0]
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	3201      	adds	r2, #1
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	e790      	b.n	80042c8 <_dtoa_r+0x608>
 80043a6:	4ba6      	ldr	r3, [pc, #664]	; (8004640 <_dtoa_r+0x980>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	f7fc f925 	bl	80005f8 <__aeabi_dmul>
 80043ae:	2200      	movs	r2, #0
 80043b0:	2300      	movs	r3, #0
 80043b2:	4606      	mov	r6, r0
 80043b4:	460f      	mov	r7, r1
 80043b6:	f7fc fb87 	bl	8000ac8 <__aeabi_dcmpeq>
 80043ba:	2800      	cmp	r0, #0
 80043bc:	d09d      	beq.n	80042fa <_dtoa_r+0x63a>
 80043be:	e7cf      	b.n	8004360 <_dtoa_r+0x6a0>
 80043c0:	9a08      	ldr	r2, [sp, #32]
 80043c2:	2a00      	cmp	r2, #0
 80043c4:	f000 80d7 	beq.w	8004576 <_dtoa_r+0x8b6>
 80043c8:	9a06      	ldr	r2, [sp, #24]
 80043ca:	2a01      	cmp	r2, #1
 80043cc:	f300 80ba 	bgt.w	8004544 <_dtoa_r+0x884>
 80043d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	f000 80b2 	beq.w	800453c <_dtoa_r+0x87c>
 80043d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043dc:	9e07      	ldr	r6, [sp, #28]
 80043de:	9d04      	ldr	r5, [sp, #16]
 80043e0:	9a04      	ldr	r2, [sp, #16]
 80043e2:	441a      	add	r2, r3
 80043e4:	9204      	str	r2, [sp, #16]
 80043e6:	9a05      	ldr	r2, [sp, #20]
 80043e8:	2101      	movs	r1, #1
 80043ea:	441a      	add	r2, r3
 80043ec:	4620      	mov	r0, r4
 80043ee:	9205      	str	r2, [sp, #20]
 80043f0:	f000 fb66 	bl	8004ac0 <__i2b>
 80043f4:	4607      	mov	r7, r0
 80043f6:	2d00      	cmp	r5, #0
 80043f8:	dd0c      	ble.n	8004414 <_dtoa_r+0x754>
 80043fa:	9b05      	ldr	r3, [sp, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	dd09      	ble.n	8004414 <_dtoa_r+0x754>
 8004400:	42ab      	cmp	r3, r5
 8004402:	9a04      	ldr	r2, [sp, #16]
 8004404:	bfa8      	it	ge
 8004406:	462b      	movge	r3, r5
 8004408:	1ad2      	subs	r2, r2, r3
 800440a:	9204      	str	r2, [sp, #16]
 800440c:	9a05      	ldr	r2, [sp, #20]
 800440e:	1aed      	subs	r5, r5, r3
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	9305      	str	r3, [sp, #20]
 8004414:	9b07      	ldr	r3, [sp, #28]
 8004416:	b31b      	cbz	r3, 8004460 <_dtoa_r+0x7a0>
 8004418:	9b08      	ldr	r3, [sp, #32]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80af 	beq.w	800457e <_dtoa_r+0x8be>
 8004420:	2e00      	cmp	r6, #0
 8004422:	dd13      	ble.n	800444c <_dtoa_r+0x78c>
 8004424:	4639      	mov	r1, r7
 8004426:	4632      	mov	r2, r6
 8004428:	4620      	mov	r0, r4
 800442a:	f000 fc09 	bl	8004c40 <__pow5mult>
 800442e:	ee18 2a10 	vmov	r2, s16
 8004432:	4601      	mov	r1, r0
 8004434:	4607      	mov	r7, r0
 8004436:	4620      	mov	r0, r4
 8004438:	f000 fb58 	bl	8004aec <__multiply>
 800443c:	ee18 1a10 	vmov	r1, s16
 8004440:	4680      	mov	r8, r0
 8004442:	4620      	mov	r0, r4
 8004444:	f000 fa84 	bl	8004950 <_Bfree>
 8004448:	ee08 8a10 	vmov	s16, r8
 800444c:	9b07      	ldr	r3, [sp, #28]
 800444e:	1b9a      	subs	r2, r3, r6
 8004450:	d006      	beq.n	8004460 <_dtoa_r+0x7a0>
 8004452:	ee18 1a10 	vmov	r1, s16
 8004456:	4620      	mov	r0, r4
 8004458:	f000 fbf2 	bl	8004c40 <__pow5mult>
 800445c:	ee08 0a10 	vmov	s16, r0
 8004460:	2101      	movs	r1, #1
 8004462:	4620      	mov	r0, r4
 8004464:	f000 fb2c 	bl	8004ac0 <__i2b>
 8004468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800446a:	2b00      	cmp	r3, #0
 800446c:	4606      	mov	r6, r0
 800446e:	f340 8088 	ble.w	8004582 <_dtoa_r+0x8c2>
 8004472:	461a      	mov	r2, r3
 8004474:	4601      	mov	r1, r0
 8004476:	4620      	mov	r0, r4
 8004478:	f000 fbe2 	bl	8004c40 <__pow5mult>
 800447c:	9b06      	ldr	r3, [sp, #24]
 800447e:	2b01      	cmp	r3, #1
 8004480:	4606      	mov	r6, r0
 8004482:	f340 8081 	ble.w	8004588 <_dtoa_r+0x8c8>
 8004486:	f04f 0800 	mov.w	r8, #0
 800448a:	6933      	ldr	r3, [r6, #16]
 800448c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004490:	6918      	ldr	r0, [r3, #16]
 8004492:	f000 fac5 	bl	8004a20 <__hi0bits>
 8004496:	f1c0 0020 	rsb	r0, r0, #32
 800449a:	9b05      	ldr	r3, [sp, #20]
 800449c:	4418      	add	r0, r3
 800449e:	f010 001f 	ands.w	r0, r0, #31
 80044a2:	f000 8092 	beq.w	80045ca <_dtoa_r+0x90a>
 80044a6:	f1c0 0320 	rsb	r3, r0, #32
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	f340 808a 	ble.w	80045c4 <_dtoa_r+0x904>
 80044b0:	f1c0 001c 	rsb	r0, r0, #28
 80044b4:	9b04      	ldr	r3, [sp, #16]
 80044b6:	4403      	add	r3, r0
 80044b8:	9304      	str	r3, [sp, #16]
 80044ba:	9b05      	ldr	r3, [sp, #20]
 80044bc:	4403      	add	r3, r0
 80044be:	4405      	add	r5, r0
 80044c0:	9305      	str	r3, [sp, #20]
 80044c2:	9b04      	ldr	r3, [sp, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	dd07      	ble.n	80044d8 <_dtoa_r+0x818>
 80044c8:	ee18 1a10 	vmov	r1, s16
 80044cc:	461a      	mov	r2, r3
 80044ce:	4620      	mov	r0, r4
 80044d0:	f000 fc10 	bl	8004cf4 <__lshift>
 80044d4:	ee08 0a10 	vmov	s16, r0
 80044d8:	9b05      	ldr	r3, [sp, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	dd05      	ble.n	80044ea <_dtoa_r+0x82a>
 80044de:	4631      	mov	r1, r6
 80044e0:	461a      	mov	r2, r3
 80044e2:	4620      	mov	r0, r4
 80044e4:	f000 fc06 	bl	8004cf4 <__lshift>
 80044e8:	4606      	mov	r6, r0
 80044ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d06e      	beq.n	80045ce <_dtoa_r+0x90e>
 80044f0:	ee18 0a10 	vmov	r0, s16
 80044f4:	4631      	mov	r1, r6
 80044f6:	f000 fc6d 	bl	8004dd4 <__mcmp>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	da67      	bge.n	80045ce <_dtoa_r+0x90e>
 80044fe:	9b00      	ldr	r3, [sp, #0]
 8004500:	3b01      	subs	r3, #1
 8004502:	ee18 1a10 	vmov	r1, s16
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	220a      	movs	r2, #10
 800450a:	2300      	movs	r3, #0
 800450c:	4620      	mov	r0, r4
 800450e:	f000 fa41 	bl	8004994 <__multadd>
 8004512:	9b08      	ldr	r3, [sp, #32]
 8004514:	ee08 0a10 	vmov	s16, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 81b1 	beq.w	8004880 <_dtoa_r+0xbc0>
 800451e:	2300      	movs	r3, #0
 8004520:	4639      	mov	r1, r7
 8004522:	220a      	movs	r2, #10
 8004524:	4620      	mov	r0, r4
 8004526:	f000 fa35 	bl	8004994 <__multadd>
 800452a:	9b02      	ldr	r3, [sp, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	4607      	mov	r7, r0
 8004530:	f300 808e 	bgt.w	8004650 <_dtoa_r+0x990>
 8004534:	9b06      	ldr	r3, [sp, #24]
 8004536:	2b02      	cmp	r3, #2
 8004538:	dc51      	bgt.n	80045de <_dtoa_r+0x91e>
 800453a:	e089      	b.n	8004650 <_dtoa_r+0x990>
 800453c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800453e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004542:	e74b      	b.n	80043dc <_dtoa_r+0x71c>
 8004544:	9b03      	ldr	r3, [sp, #12]
 8004546:	1e5e      	subs	r6, r3, #1
 8004548:	9b07      	ldr	r3, [sp, #28]
 800454a:	42b3      	cmp	r3, r6
 800454c:	bfbf      	itttt	lt
 800454e:	9b07      	ldrlt	r3, [sp, #28]
 8004550:	9607      	strlt	r6, [sp, #28]
 8004552:	1af2      	sublt	r2, r6, r3
 8004554:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004556:	bfb6      	itet	lt
 8004558:	189b      	addlt	r3, r3, r2
 800455a:	1b9e      	subge	r6, r3, r6
 800455c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800455e:	9b03      	ldr	r3, [sp, #12]
 8004560:	bfb8      	it	lt
 8004562:	2600      	movlt	r6, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	bfb7      	itett	lt
 8004568:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800456c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004570:	1a9d      	sublt	r5, r3, r2
 8004572:	2300      	movlt	r3, #0
 8004574:	e734      	b.n	80043e0 <_dtoa_r+0x720>
 8004576:	9e07      	ldr	r6, [sp, #28]
 8004578:	9d04      	ldr	r5, [sp, #16]
 800457a:	9f08      	ldr	r7, [sp, #32]
 800457c:	e73b      	b.n	80043f6 <_dtoa_r+0x736>
 800457e:	9a07      	ldr	r2, [sp, #28]
 8004580:	e767      	b.n	8004452 <_dtoa_r+0x792>
 8004582:	9b06      	ldr	r3, [sp, #24]
 8004584:	2b01      	cmp	r3, #1
 8004586:	dc18      	bgt.n	80045ba <_dtoa_r+0x8fa>
 8004588:	f1ba 0f00 	cmp.w	sl, #0
 800458c:	d115      	bne.n	80045ba <_dtoa_r+0x8fa>
 800458e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004592:	b993      	cbnz	r3, 80045ba <_dtoa_r+0x8fa>
 8004594:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004598:	0d1b      	lsrs	r3, r3, #20
 800459a:	051b      	lsls	r3, r3, #20
 800459c:	b183      	cbz	r3, 80045c0 <_dtoa_r+0x900>
 800459e:	9b04      	ldr	r3, [sp, #16]
 80045a0:	3301      	adds	r3, #1
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	9b05      	ldr	r3, [sp, #20]
 80045a6:	3301      	adds	r3, #1
 80045a8:	9305      	str	r3, [sp, #20]
 80045aa:	f04f 0801 	mov.w	r8, #1
 80045ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f af6a 	bne.w	800448a <_dtoa_r+0x7ca>
 80045b6:	2001      	movs	r0, #1
 80045b8:	e76f      	b.n	800449a <_dtoa_r+0x7da>
 80045ba:	f04f 0800 	mov.w	r8, #0
 80045be:	e7f6      	b.n	80045ae <_dtoa_r+0x8ee>
 80045c0:	4698      	mov	r8, r3
 80045c2:	e7f4      	b.n	80045ae <_dtoa_r+0x8ee>
 80045c4:	f43f af7d 	beq.w	80044c2 <_dtoa_r+0x802>
 80045c8:	4618      	mov	r0, r3
 80045ca:	301c      	adds	r0, #28
 80045cc:	e772      	b.n	80044b4 <_dtoa_r+0x7f4>
 80045ce:	9b03      	ldr	r3, [sp, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dc37      	bgt.n	8004644 <_dtoa_r+0x984>
 80045d4:	9b06      	ldr	r3, [sp, #24]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	dd34      	ble.n	8004644 <_dtoa_r+0x984>
 80045da:	9b03      	ldr	r3, [sp, #12]
 80045dc:	9302      	str	r3, [sp, #8]
 80045de:	9b02      	ldr	r3, [sp, #8]
 80045e0:	b96b      	cbnz	r3, 80045fe <_dtoa_r+0x93e>
 80045e2:	4631      	mov	r1, r6
 80045e4:	2205      	movs	r2, #5
 80045e6:	4620      	mov	r0, r4
 80045e8:	f000 f9d4 	bl	8004994 <__multadd>
 80045ec:	4601      	mov	r1, r0
 80045ee:	4606      	mov	r6, r0
 80045f0:	ee18 0a10 	vmov	r0, s16
 80045f4:	f000 fbee 	bl	8004dd4 <__mcmp>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	f73f adbb 	bgt.w	8004174 <_dtoa_r+0x4b4>
 80045fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004600:	9d01      	ldr	r5, [sp, #4]
 8004602:	43db      	mvns	r3, r3
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	f04f 0800 	mov.w	r8, #0
 800460a:	4631      	mov	r1, r6
 800460c:	4620      	mov	r0, r4
 800460e:	f000 f99f 	bl	8004950 <_Bfree>
 8004612:	2f00      	cmp	r7, #0
 8004614:	f43f aea4 	beq.w	8004360 <_dtoa_r+0x6a0>
 8004618:	f1b8 0f00 	cmp.w	r8, #0
 800461c:	d005      	beq.n	800462a <_dtoa_r+0x96a>
 800461e:	45b8      	cmp	r8, r7
 8004620:	d003      	beq.n	800462a <_dtoa_r+0x96a>
 8004622:	4641      	mov	r1, r8
 8004624:	4620      	mov	r0, r4
 8004626:	f000 f993 	bl	8004950 <_Bfree>
 800462a:	4639      	mov	r1, r7
 800462c:	4620      	mov	r0, r4
 800462e:	f000 f98f 	bl	8004950 <_Bfree>
 8004632:	e695      	b.n	8004360 <_dtoa_r+0x6a0>
 8004634:	2600      	movs	r6, #0
 8004636:	4637      	mov	r7, r6
 8004638:	e7e1      	b.n	80045fe <_dtoa_r+0x93e>
 800463a:	9700      	str	r7, [sp, #0]
 800463c:	4637      	mov	r7, r6
 800463e:	e599      	b.n	8004174 <_dtoa_r+0x4b4>
 8004640:	40240000 	.word	0x40240000
 8004644:	9b08      	ldr	r3, [sp, #32]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80ca 	beq.w	80047e0 <_dtoa_r+0xb20>
 800464c:	9b03      	ldr	r3, [sp, #12]
 800464e:	9302      	str	r3, [sp, #8]
 8004650:	2d00      	cmp	r5, #0
 8004652:	dd05      	ble.n	8004660 <_dtoa_r+0x9a0>
 8004654:	4639      	mov	r1, r7
 8004656:	462a      	mov	r2, r5
 8004658:	4620      	mov	r0, r4
 800465a:	f000 fb4b 	bl	8004cf4 <__lshift>
 800465e:	4607      	mov	r7, r0
 8004660:	f1b8 0f00 	cmp.w	r8, #0
 8004664:	d05b      	beq.n	800471e <_dtoa_r+0xa5e>
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4620      	mov	r0, r4
 800466a:	f000 f931 	bl	80048d0 <_Balloc>
 800466e:	4605      	mov	r5, r0
 8004670:	b928      	cbnz	r0, 800467e <_dtoa_r+0x9be>
 8004672:	4b87      	ldr	r3, [pc, #540]	; (8004890 <_dtoa_r+0xbd0>)
 8004674:	4602      	mov	r2, r0
 8004676:	f240 21ea 	movw	r1, #746	; 0x2ea
 800467a:	f7ff bb3b 	b.w	8003cf4 <_dtoa_r+0x34>
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	3202      	adds	r2, #2
 8004682:	0092      	lsls	r2, r2, #2
 8004684:	f107 010c 	add.w	r1, r7, #12
 8004688:	300c      	adds	r0, #12
 800468a:	f000 f913 	bl	80048b4 <memcpy>
 800468e:	2201      	movs	r2, #1
 8004690:	4629      	mov	r1, r5
 8004692:	4620      	mov	r0, r4
 8004694:	f000 fb2e 	bl	8004cf4 <__lshift>
 8004698:	9b01      	ldr	r3, [sp, #4]
 800469a:	f103 0901 	add.w	r9, r3, #1
 800469e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80046a2:	4413      	add	r3, r2
 80046a4:	9305      	str	r3, [sp, #20]
 80046a6:	f00a 0301 	and.w	r3, sl, #1
 80046aa:	46b8      	mov	r8, r7
 80046ac:	9304      	str	r3, [sp, #16]
 80046ae:	4607      	mov	r7, r0
 80046b0:	4631      	mov	r1, r6
 80046b2:	ee18 0a10 	vmov	r0, s16
 80046b6:	f7ff fa75 	bl	8003ba4 <quorem>
 80046ba:	4641      	mov	r1, r8
 80046bc:	9002      	str	r0, [sp, #8]
 80046be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80046c2:	ee18 0a10 	vmov	r0, s16
 80046c6:	f000 fb85 	bl	8004dd4 <__mcmp>
 80046ca:	463a      	mov	r2, r7
 80046cc:	9003      	str	r0, [sp, #12]
 80046ce:	4631      	mov	r1, r6
 80046d0:	4620      	mov	r0, r4
 80046d2:	f000 fb9b 	bl	8004e0c <__mdiff>
 80046d6:	68c2      	ldr	r2, [r0, #12]
 80046d8:	f109 3bff 	add.w	fp, r9, #4294967295
 80046dc:	4605      	mov	r5, r0
 80046de:	bb02      	cbnz	r2, 8004722 <_dtoa_r+0xa62>
 80046e0:	4601      	mov	r1, r0
 80046e2:	ee18 0a10 	vmov	r0, s16
 80046e6:	f000 fb75 	bl	8004dd4 <__mcmp>
 80046ea:	4602      	mov	r2, r0
 80046ec:	4629      	mov	r1, r5
 80046ee:	4620      	mov	r0, r4
 80046f0:	9207      	str	r2, [sp, #28]
 80046f2:	f000 f92d 	bl	8004950 <_Bfree>
 80046f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80046fa:	ea43 0102 	orr.w	r1, r3, r2
 80046fe:	9b04      	ldr	r3, [sp, #16]
 8004700:	430b      	orrs	r3, r1
 8004702:	464d      	mov	r5, r9
 8004704:	d10f      	bne.n	8004726 <_dtoa_r+0xa66>
 8004706:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800470a:	d02a      	beq.n	8004762 <_dtoa_r+0xaa2>
 800470c:	9b03      	ldr	r3, [sp, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	dd02      	ble.n	8004718 <_dtoa_r+0xa58>
 8004712:	9b02      	ldr	r3, [sp, #8]
 8004714:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004718:	f88b a000 	strb.w	sl, [fp]
 800471c:	e775      	b.n	800460a <_dtoa_r+0x94a>
 800471e:	4638      	mov	r0, r7
 8004720:	e7ba      	b.n	8004698 <_dtoa_r+0x9d8>
 8004722:	2201      	movs	r2, #1
 8004724:	e7e2      	b.n	80046ec <_dtoa_r+0xa2c>
 8004726:	9b03      	ldr	r3, [sp, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	db04      	blt.n	8004736 <_dtoa_r+0xa76>
 800472c:	9906      	ldr	r1, [sp, #24]
 800472e:	430b      	orrs	r3, r1
 8004730:	9904      	ldr	r1, [sp, #16]
 8004732:	430b      	orrs	r3, r1
 8004734:	d122      	bne.n	800477c <_dtoa_r+0xabc>
 8004736:	2a00      	cmp	r2, #0
 8004738:	ddee      	ble.n	8004718 <_dtoa_r+0xa58>
 800473a:	ee18 1a10 	vmov	r1, s16
 800473e:	2201      	movs	r2, #1
 8004740:	4620      	mov	r0, r4
 8004742:	f000 fad7 	bl	8004cf4 <__lshift>
 8004746:	4631      	mov	r1, r6
 8004748:	ee08 0a10 	vmov	s16, r0
 800474c:	f000 fb42 	bl	8004dd4 <__mcmp>
 8004750:	2800      	cmp	r0, #0
 8004752:	dc03      	bgt.n	800475c <_dtoa_r+0xa9c>
 8004754:	d1e0      	bne.n	8004718 <_dtoa_r+0xa58>
 8004756:	f01a 0f01 	tst.w	sl, #1
 800475a:	d0dd      	beq.n	8004718 <_dtoa_r+0xa58>
 800475c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004760:	d1d7      	bne.n	8004712 <_dtoa_r+0xa52>
 8004762:	2339      	movs	r3, #57	; 0x39
 8004764:	f88b 3000 	strb.w	r3, [fp]
 8004768:	462b      	mov	r3, r5
 800476a:	461d      	mov	r5, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004772:	2a39      	cmp	r2, #57	; 0x39
 8004774:	d071      	beq.n	800485a <_dtoa_r+0xb9a>
 8004776:	3201      	adds	r2, #1
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	e746      	b.n	800460a <_dtoa_r+0x94a>
 800477c:	2a00      	cmp	r2, #0
 800477e:	dd07      	ble.n	8004790 <_dtoa_r+0xad0>
 8004780:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004784:	d0ed      	beq.n	8004762 <_dtoa_r+0xaa2>
 8004786:	f10a 0301 	add.w	r3, sl, #1
 800478a:	f88b 3000 	strb.w	r3, [fp]
 800478e:	e73c      	b.n	800460a <_dtoa_r+0x94a>
 8004790:	9b05      	ldr	r3, [sp, #20]
 8004792:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004796:	4599      	cmp	r9, r3
 8004798:	d047      	beq.n	800482a <_dtoa_r+0xb6a>
 800479a:	ee18 1a10 	vmov	r1, s16
 800479e:	2300      	movs	r3, #0
 80047a0:	220a      	movs	r2, #10
 80047a2:	4620      	mov	r0, r4
 80047a4:	f000 f8f6 	bl	8004994 <__multadd>
 80047a8:	45b8      	cmp	r8, r7
 80047aa:	ee08 0a10 	vmov	s16, r0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	f04f 020a 	mov.w	r2, #10
 80047b6:	4641      	mov	r1, r8
 80047b8:	4620      	mov	r0, r4
 80047ba:	d106      	bne.n	80047ca <_dtoa_r+0xb0a>
 80047bc:	f000 f8ea 	bl	8004994 <__multadd>
 80047c0:	4680      	mov	r8, r0
 80047c2:	4607      	mov	r7, r0
 80047c4:	f109 0901 	add.w	r9, r9, #1
 80047c8:	e772      	b.n	80046b0 <_dtoa_r+0x9f0>
 80047ca:	f000 f8e3 	bl	8004994 <__multadd>
 80047ce:	4639      	mov	r1, r7
 80047d0:	4680      	mov	r8, r0
 80047d2:	2300      	movs	r3, #0
 80047d4:	220a      	movs	r2, #10
 80047d6:	4620      	mov	r0, r4
 80047d8:	f000 f8dc 	bl	8004994 <__multadd>
 80047dc:	4607      	mov	r7, r0
 80047de:	e7f1      	b.n	80047c4 <_dtoa_r+0xb04>
 80047e0:	9b03      	ldr	r3, [sp, #12]
 80047e2:	9302      	str	r3, [sp, #8]
 80047e4:	9d01      	ldr	r5, [sp, #4]
 80047e6:	ee18 0a10 	vmov	r0, s16
 80047ea:	4631      	mov	r1, r6
 80047ec:	f7ff f9da 	bl	8003ba4 <quorem>
 80047f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80047f4:	9b01      	ldr	r3, [sp, #4]
 80047f6:	f805 ab01 	strb.w	sl, [r5], #1
 80047fa:	1aea      	subs	r2, r5, r3
 80047fc:	9b02      	ldr	r3, [sp, #8]
 80047fe:	4293      	cmp	r3, r2
 8004800:	dd09      	ble.n	8004816 <_dtoa_r+0xb56>
 8004802:	ee18 1a10 	vmov	r1, s16
 8004806:	2300      	movs	r3, #0
 8004808:	220a      	movs	r2, #10
 800480a:	4620      	mov	r0, r4
 800480c:	f000 f8c2 	bl	8004994 <__multadd>
 8004810:	ee08 0a10 	vmov	s16, r0
 8004814:	e7e7      	b.n	80047e6 <_dtoa_r+0xb26>
 8004816:	9b02      	ldr	r3, [sp, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	bfc8      	it	gt
 800481c:	461d      	movgt	r5, r3
 800481e:	9b01      	ldr	r3, [sp, #4]
 8004820:	bfd8      	it	le
 8004822:	2501      	movle	r5, #1
 8004824:	441d      	add	r5, r3
 8004826:	f04f 0800 	mov.w	r8, #0
 800482a:	ee18 1a10 	vmov	r1, s16
 800482e:	2201      	movs	r2, #1
 8004830:	4620      	mov	r0, r4
 8004832:	f000 fa5f 	bl	8004cf4 <__lshift>
 8004836:	4631      	mov	r1, r6
 8004838:	ee08 0a10 	vmov	s16, r0
 800483c:	f000 faca 	bl	8004dd4 <__mcmp>
 8004840:	2800      	cmp	r0, #0
 8004842:	dc91      	bgt.n	8004768 <_dtoa_r+0xaa8>
 8004844:	d102      	bne.n	800484c <_dtoa_r+0xb8c>
 8004846:	f01a 0f01 	tst.w	sl, #1
 800484a:	d18d      	bne.n	8004768 <_dtoa_r+0xaa8>
 800484c:	462b      	mov	r3, r5
 800484e:	461d      	mov	r5, r3
 8004850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004854:	2a30      	cmp	r2, #48	; 0x30
 8004856:	d0fa      	beq.n	800484e <_dtoa_r+0xb8e>
 8004858:	e6d7      	b.n	800460a <_dtoa_r+0x94a>
 800485a:	9a01      	ldr	r2, [sp, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d184      	bne.n	800476a <_dtoa_r+0xaaa>
 8004860:	9b00      	ldr	r3, [sp, #0]
 8004862:	3301      	adds	r3, #1
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2331      	movs	r3, #49	; 0x31
 8004868:	7013      	strb	r3, [r2, #0]
 800486a:	e6ce      	b.n	800460a <_dtoa_r+0x94a>
 800486c:	4b09      	ldr	r3, [pc, #36]	; (8004894 <_dtoa_r+0xbd4>)
 800486e:	f7ff ba95 	b.w	8003d9c <_dtoa_r+0xdc>
 8004872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004874:	2b00      	cmp	r3, #0
 8004876:	f47f aa6e 	bne.w	8003d56 <_dtoa_r+0x96>
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <_dtoa_r+0xbd8>)
 800487c:	f7ff ba8e 	b.w	8003d9c <_dtoa_r+0xdc>
 8004880:	9b02      	ldr	r3, [sp, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	dcae      	bgt.n	80047e4 <_dtoa_r+0xb24>
 8004886:	9b06      	ldr	r3, [sp, #24]
 8004888:	2b02      	cmp	r3, #2
 800488a:	f73f aea8 	bgt.w	80045de <_dtoa_r+0x91e>
 800488e:	e7a9      	b.n	80047e4 <_dtoa_r+0xb24>
 8004890:	08006437 	.word	0x08006437
 8004894:	08006394 	.word	0x08006394
 8004898:	080063b8 	.word	0x080063b8

0800489c <_localeconv_r>:
 800489c:	4800      	ldr	r0, [pc, #0]	; (80048a0 <_localeconv_r+0x4>)
 800489e:	4770      	bx	lr
 80048a0:	2000015c 	.word	0x2000015c

080048a4 <malloc>:
 80048a4:	4b02      	ldr	r3, [pc, #8]	; (80048b0 <malloc+0xc>)
 80048a6:	4601      	mov	r1, r0
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	f000 bc17 	b.w	80050dc <_malloc_r>
 80048ae:	bf00      	nop
 80048b0:	20000008 	.word	0x20000008

080048b4 <memcpy>:
 80048b4:	440a      	add	r2, r1
 80048b6:	4291      	cmp	r1, r2
 80048b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048bc:	d100      	bne.n	80048c0 <memcpy+0xc>
 80048be:	4770      	bx	lr
 80048c0:	b510      	push	{r4, lr}
 80048c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ca:	4291      	cmp	r1, r2
 80048cc:	d1f9      	bne.n	80048c2 <memcpy+0xe>
 80048ce:	bd10      	pop	{r4, pc}

080048d0 <_Balloc>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80048d4:	4604      	mov	r4, r0
 80048d6:	460d      	mov	r5, r1
 80048d8:	b976      	cbnz	r6, 80048f8 <_Balloc+0x28>
 80048da:	2010      	movs	r0, #16
 80048dc:	f7ff ffe2 	bl	80048a4 <malloc>
 80048e0:	4602      	mov	r2, r0
 80048e2:	6260      	str	r0, [r4, #36]	; 0x24
 80048e4:	b920      	cbnz	r0, 80048f0 <_Balloc+0x20>
 80048e6:	4b18      	ldr	r3, [pc, #96]	; (8004948 <_Balloc+0x78>)
 80048e8:	4818      	ldr	r0, [pc, #96]	; (800494c <_Balloc+0x7c>)
 80048ea:	2166      	movs	r1, #102	; 0x66
 80048ec:	f000 fdd6 	bl	800549c <__assert_func>
 80048f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048f4:	6006      	str	r6, [r0, #0]
 80048f6:	60c6      	str	r6, [r0, #12]
 80048f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80048fa:	68f3      	ldr	r3, [r6, #12]
 80048fc:	b183      	cbz	r3, 8004920 <_Balloc+0x50>
 80048fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004906:	b9b8      	cbnz	r0, 8004938 <_Balloc+0x68>
 8004908:	2101      	movs	r1, #1
 800490a:	fa01 f605 	lsl.w	r6, r1, r5
 800490e:	1d72      	adds	r2, r6, #5
 8004910:	0092      	lsls	r2, r2, #2
 8004912:	4620      	mov	r0, r4
 8004914:	f000 fb60 	bl	8004fd8 <_calloc_r>
 8004918:	b160      	cbz	r0, 8004934 <_Balloc+0x64>
 800491a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800491e:	e00e      	b.n	800493e <_Balloc+0x6e>
 8004920:	2221      	movs	r2, #33	; 0x21
 8004922:	2104      	movs	r1, #4
 8004924:	4620      	mov	r0, r4
 8004926:	f000 fb57 	bl	8004fd8 <_calloc_r>
 800492a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800492c:	60f0      	str	r0, [r6, #12]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e4      	bne.n	80048fe <_Balloc+0x2e>
 8004934:	2000      	movs	r0, #0
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	6802      	ldr	r2, [r0, #0]
 800493a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800493e:	2300      	movs	r3, #0
 8004940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004944:	e7f7      	b.n	8004936 <_Balloc+0x66>
 8004946:	bf00      	nop
 8004948:	080063c5 	.word	0x080063c5
 800494c:	08006448 	.word	0x08006448

08004950 <_Bfree>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004954:	4605      	mov	r5, r0
 8004956:	460c      	mov	r4, r1
 8004958:	b976      	cbnz	r6, 8004978 <_Bfree+0x28>
 800495a:	2010      	movs	r0, #16
 800495c:	f7ff ffa2 	bl	80048a4 <malloc>
 8004960:	4602      	mov	r2, r0
 8004962:	6268      	str	r0, [r5, #36]	; 0x24
 8004964:	b920      	cbnz	r0, 8004970 <_Bfree+0x20>
 8004966:	4b09      	ldr	r3, [pc, #36]	; (800498c <_Bfree+0x3c>)
 8004968:	4809      	ldr	r0, [pc, #36]	; (8004990 <_Bfree+0x40>)
 800496a:	218a      	movs	r1, #138	; 0x8a
 800496c:	f000 fd96 	bl	800549c <__assert_func>
 8004970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004974:	6006      	str	r6, [r0, #0]
 8004976:	60c6      	str	r6, [r0, #12]
 8004978:	b13c      	cbz	r4, 800498a <_Bfree+0x3a>
 800497a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800497c:	6862      	ldr	r2, [r4, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004984:	6021      	str	r1, [r4, #0]
 8004986:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	080063c5 	.word	0x080063c5
 8004990:	08006448 	.word	0x08006448

08004994 <__multadd>:
 8004994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004998:	690d      	ldr	r5, [r1, #16]
 800499a:	4607      	mov	r7, r0
 800499c:	460c      	mov	r4, r1
 800499e:	461e      	mov	r6, r3
 80049a0:	f101 0c14 	add.w	ip, r1, #20
 80049a4:	2000      	movs	r0, #0
 80049a6:	f8dc 3000 	ldr.w	r3, [ip]
 80049aa:	b299      	uxth	r1, r3
 80049ac:	fb02 6101 	mla	r1, r2, r1, r6
 80049b0:	0c1e      	lsrs	r6, r3, #16
 80049b2:	0c0b      	lsrs	r3, r1, #16
 80049b4:	fb02 3306 	mla	r3, r2, r6, r3
 80049b8:	b289      	uxth	r1, r1
 80049ba:	3001      	adds	r0, #1
 80049bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80049c0:	4285      	cmp	r5, r0
 80049c2:	f84c 1b04 	str.w	r1, [ip], #4
 80049c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80049ca:	dcec      	bgt.n	80049a6 <__multadd+0x12>
 80049cc:	b30e      	cbz	r6, 8004a12 <__multadd+0x7e>
 80049ce:	68a3      	ldr	r3, [r4, #8]
 80049d0:	42ab      	cmp	r3, r5
 80049d2:	dc19      	bgt.n	8004a08 <__multadd+0x74>
 80049d4:	6861      	ldr	r1, [r4, #4]
 80049d6:	4638      	mov	r0, r7
 80049d8:	3101      	adds	r1, #1
 80049da:	f7ff ff79 	bl	80048d0 <_Balloc>
 80049de:	4680      	mov	r8, r0
 80049e0:	b928      	cbnz	r0, 80049ee <__multadd+0x5a>
 80049e2:	4602      	mov	r2, r0
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <__multadd+0x84>)
 80049e6:	480d      	ldr	r0, [pc, #52]	; (8004a1c <__multadd+0x88>)
 80049e8:	21b5      	movs	r1, #181	; 0xb5
 80049ea:	f000 fd57 	bl	800549c <__assert_func>
 80049ee:	6922      	ldr	r2, [r4, #16]
 80049f0:	3202      	adds	r2, #2
 80049f2:	f104 010c 	add.w	r1, r4, #12
 80049f6:	0092      	lsls	r2, r2, #2
 80049f8:	300c      	adds	r0, #12
 80049fa:	f7ff ff5b 	bl	80048b4 <memcpy>
 80049fe:	4621      	mov	r1, r4
 8004a00:	4638      	mov	r0, r7
 8004a02:	f7ff ffa5 	bl	8004950 <_Bfree>
 8004a06:	4644      	mov	r4, r8
 8004a08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004a0c:	3501      	adds	r5, #1
 8004a0e:	615e      	str	r6, [r3, #20]
 8004a10:	6125      	str	r5, [r4, #16]
 8004a12:	4620      	mov	r0, r4
 8004a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a18:	08006437 	.word	0x08006437
 8004a1c:	08006448 	.word	0x08006448

08004a20 <__hi0bits>:
 8004a20:	0c03      	lsrs	r3, r0, #16
 8004a22:	041b      	lsls	r3, r3, #16
 8004a24:	b9d3      	cbnz	r3, 8004a5c <__hi0bits+0x3c>
 8004a26:	0400      	lsls	r0, r0, #16
 8004a28:	2310      	movs	r3, #16
 8004a2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004a2e:	bf04      	itt	eq
 8004a30:	0200      	lsleq	r0, r0, #8
 8004a32:	3308      	addeq	r3, #8
 8004a34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004a38:	bf04      	itt	eq
 8004a3a:	0100      	lsleq	r0, r0, #4
 8004a3c:	3304      	addeq	r3, #4
 8004a3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004a42:	bf04      	itt	eq
 8004a44:	0080      	lsleq	r0, r0, #2
 8004a46:	3302      	addeq	r3, #2
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	db05      	blt.n	8004a58 <__hi0bits+0x38>
 8004a4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004a50:	f103 0301 	add.w	r3, r3, #1
 8004a54:	bf08      	it	eq
 8004a56:	2320      	moveq	r3, #32
 8004a58:	4618      	mov	r0, r3
 8004a5a:	4770      	bx	lr
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e7e4      	b.n	8004a2a <__hi0bits+0xa>

08004a60 <__lo0bits>:
 8004a60:	6803      	ldr	r3, [r0, #0]
 8004a62:	f013 0207 	ands.w	r2, r3, #7
 8004a66:	4601      	mov	r1, r0
 8004a68:	d00b      	beq.n	8004a82 <__lo0bits+0x22>
 8004a6a:	07da      	lsls	r2, r3, #31
 8004a6c:	d423      	bmi.n	8004ab6 <__lo0bits+0x56>
 8004a6e:	0798      	lsls	r0, r3, #30
 8004a70:	bf49      	itett	mi
 8004a72:	085b      	lsrmi	r3, r3, #1
 8004a74:	089b      	lsrpl	r3, r3, #2
 8004a76:	2001      	movmi	r0, #1
 8004a78:	600b      	strmi	r3, [r1, #0]
 8004a7a:	bf5c      	itt	pl
 8004a7c:	600b      	strpl	r3, [r1, #0]
 8004a7e:	2002      	movpl	r0, #2
 8004a80:	4770      	bx	lr
 8004a82:	b298      	uxth	r0, r3
 8004a84:	b9a8      	cbnz	r0, 8004ab2 <__lo0bits+0x52>
 8004a86:	0c1b      	lsrs	r3, r3, #16
 8004a88:	2010      	movs	r0, #16
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	b90a      	cbnz	r2, 8004a92 <__lo0bits+0x32>
 8004a8e:	3008      	adds	r0, #8
 8004a90:	0a1b      	lsrs	r3, r3, #8
 8004a92:	071a      	lsls	r2, r3, #28
 8004a94:	bf04      	itt	eq
 8004a96:	091b      	lsreq	r3, r3, #4
 8004a98:	3004      	addeq	r0, #4
 8004a9a:	079a      	lsls	r2, r3, #30
 8004a9c:	bf04      	itt	eq
 8004a9e:	089b      	lsreq	r3, r3, #2
 8004aa0:	3002      	addeq	r0, #2
 8004aa2:	07da      	lsls	r2, r3, #31
 8004aa4:	d403      	bmi.n	8004aae <__lo0bits+0x4e>
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	f100 0001 	add.w	r0, r0, #1
 8004aac:	d005      	beq.n	8004aba <__lo0bits+0x5a>
 8004aae:	600b      	str	r3, [r1, #0]
 8004ab0:	4770      	bx	lr
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	e7e9      	b.n	8004a8a <__lo0bits+0x2a>
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	4770      	bx	lr
 8004aba:	2020      	movs	r0, #32
 8004abc:	4770      	bx	lr
	...

08004ac0 <__i2b>:
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	f7ff ff03 	bl	80048d0 <_Balloc>
 8004aca:	4602      	mov	r2, r0
 8004acc:	b928      	cbnz	r0, 8004ada <__i2b+0x1a>
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <__i2b+0x24>)
 8004ad0:	4805      	ldr	r0, [pc, #20]	; (8004ae8 <__i2b+0x28>)
 8004ad2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004ad6:	f000 fce1 	bl	800549c <__assert_func>
 8004ada:	2301      	movs	r3, #1
 8004adc:	6144      	str	r4, [r0, #20]
 8004ade:	6103      	str	r3, [r0, #16]
 8004ae0:	bd10      	pop	{r4, pc}
 8004ae2:	bf00      	nop
 8004ae4:	08006437 	.word	0x08006437
 8004ae8:	08006448 	.word	0x08006448

08004aec <__multiply>:
 8004aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af0:	4691      	mov	r9, r2
 8004af2:	690a      	ldr	r2, [r1, #16]
 8004af4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	bfb8      	it	lt
 8004afc:	460b      	movlt	r3, r1
 8004afe:	460c      	mov	r4, r1
 8004b00:	bfbc      	itt	lt
 8004b02:	464c      	movlt	r4, r9
 8004b04:	4699      	movlt	r9, r3
 8004b06:	6927      	ldr	r7, [r4, #16]
 8004b08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004b0c:	68a3      	ldr	r3, [r4, #8]
 8004b0e:	6861      	ldr	r1, [r4, #4]
 8004b10:	eb07 060a 	add.w	r6, r7, sl
 8004b14:	42b3      	cmp	r3, r6
 8004b16:	b085      	sub	sp, #20
 8004b18:	bfb8      	it	lt
 8004b1a:	3101      	addlt	r1, #1
 8004b1c:	f7ff fed8 	bl	80048d0 <_Balloc>
 8004b20:	b930      	cbnz	r0, 8004b30 <__multiply+0x44>
 8004b22:	4602      	mov	r2, r0
 8004b24:	4b44      	ldr	r3, [pc, #272]	; (8004c38 <__multiply+0x14c>)
 8004b26:	4845      	ldr	r0, [pc, #276]	; (8004c3c <__multiply+0x150>)
 8004b28:	f240 115d 	movw	r1, #349	; 0x15d
 8004b2c:	f000 fcb6 	bl	800549c <__assert_func>
 8004b30:	f100 0514 	add.w	r5, r0, #20
 8004b34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004b38:	462b      	mov	r3, r5
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	4543      	cmp	r3, r8
 8004b3e:	d321      	bcc.n	8004b84 <__multiply+0x98>
 8004b40:	f104 0314 	add.w	r3, r4, #20
 8004b44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004b48:	f109 0314 	add.w	r3, r9, #20
 8004b4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004b50:	9202      	str	r2, [sp, #8]
 8004b52:	1b3a      	subs	r2, r7, r4
 8004b54:	3a15      	subs	r2, #21
 8004b56:	f022 0203 	bic.w	r2, r2, #3
 8004b5a:	3204      	adds	r2, #4
 8004b5c:	f104 0115 	add.w	r1, r4, #21
 8004b60:	428f      	cmp	r7, r1
 8004b62:	bf38      	it	cc
 8004b64:	2204      	movcc	r2, #4
 8004b66:	9201      	str	r2, [sp, #4]
 8004b68:	9a02      	ldr	r2, [sp, #8]
 8004b6a:	9303      	str	r3, [sp, #12]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d80c      	bhi.n	8004b8a <__multiply+0x9e>
 8004b70:	2e00      	cmp	r6, #0
 8004b72:	dd03      	ble.n	8004b7c <__multiply+0x90>
 8004b74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d05a      	beq.n	8004c32 <__multiply+0x146>
 8004b7c:	6106      	str	r6, [r0, #16]
 8004b7e:	b005      	add	sp, #20
 8004b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b84:	f843 2b04 	str.w	r2, [r3], #4
 8004b88:	e7d8      	b.n	8004b3c <__multiply+0x50>
 8004b8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8004b8e:	f1ba 0f00 	cmp.w	sl, #0
 8004b92:	d024      	beq.n	8004bde <__multiply+0xf2>
 8004b94:	f104 0e14 	add.w	lr, r4, #20
 8004b98:	46a9      	mov	r9, r5
 8004b9a:	f04f 0c00 	mov.w	ip, #0
 8004b9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004ba2:	f8d9 1000 	ldr.w	r1, [r9]
 8004ba6:	fa1f fb82 	uxth.w	fp, r2
 8004baa:	b289      	uxth	r1, r1
 8004bac:	fb0a 110b 	mla	r1, sl, fp, r1
 8004bb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004bb4:	f8d9 2000 	ldr.w	r2, [r9]
 8004bb8:	4461      	add	r1, ip
 8004bba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004bbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8004bc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004bc6:	b289      	uxth	r1, r1
 8004bc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004bcc:	4577      	cmp	r7, lr
 8004bce:	f849 1b04 	str.w	r1, [r9], #4
 8004bd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004bd6:	d8e2      	bhi.n	8004b9e <__multiply+0xb2>
 8004bd8:	9a01      	ldr	r2, [sp, #4]
 8004bda:	f845 c002 	str.w	ip, [r5, r2]
 8004bde:	9a03      	ldr	r2, [sp, #12]
 8004be0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004be4:	3304      	adds	r3, #4
 8004be6:	f1b9 0f00 	cmp.w	r9, #0
 8004bea:	d020      	beq.n	8004c2e <__multiply+0x142>
 8004bec:	6829      	ldr	r1, [r5, #0]
 8004bee:	f104 0c14 	add.w	ip, r4, #20
 8004bf2:	46ae      	mov	lr, r5
 8004bf4:	f04f 0a00 	mov.w	sl, #0
 8004bf8:	f8bc b000 	ldrh.w	fp, [ip]
 8004bfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004c00:	fb09 220b 	mla	r2, r9, fp, r2
 8004c04:	4492      	add	sl, r2
 8004c06:	b289      	uxth	r1, r1
 8004c08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004c0c:	f84e 1b04 	str.w	r1, [lr], #4
 8004c10:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004c14:	f8be 1000 	ldrh.w	r1, [lr]
 8004c18:	0c12      	lsrs	r2, r2, #16
 8004c1a:	fb09 1102 	mla	r1, r9, r2, r1
 8004c1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004c22:	4567      	cmp	r7, ip
 8004c24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004c28:	d8e6      	bhi.n	8004bf8 <__multiply+0x10c>
 8004c2a:	9a01      	ldr	r2, [sp, #4]
 8004c2c:	50a9      	str	r1, [r5, r2]
 8004c2e:	3504      	adds	r5, #4
 8004c30:	e79a      	b.n	8004b68 <__multiply+0x7c>
 8004c32:	3e01      	subs	r6, #1
 8004c34:	e79c      	b.n	8004b70 <__multiply+0x84>
 8004c36:	bf00      	nop
 8004c38:	08006437 	.word	0x08006437
 8004c3c:	08006448 	.word	0x08006448

08004c40 <__pow5mult>:
 8004c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c44:	4615      	mov	r5, r2
 8004c46:	f012 0203 	ands.w	r2, r2, #3
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	460f      	mov	r7, r1
 8004c4e:	d007      	beq.n	8004c60 <__pow5mult+0x20>
 8004c50:	4c25      	ldr	r4, [pc, #148]	; (8004ce8 <__pow5mult+0xa8>)
 8004c52:	3a01      	subs	r2, #1
 8004c54:	2300      	movs	r3, #0
 8004c56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c5a:	f7ff fe9b 	bl	8004994 <__multadd>
 8004c5e:	4607      	mov	r7, r0
 8004c60:	10ad      	asrs	r5, r5, #2
 8004c62:	d03d      	beq.n	8004ce0 <__pow5mult+0xa0>
 8004c64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004c66:	b97c      	cbnz	r4, 8004c88 <__pow5mult+0x48>
 8004c68:	2010      	movs	r0, #16
 8004c6a:	f7ff fe1b 	bl	80048a4 <malloc>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	6270      	str	r0, [r6, #36]	; 0x24
 8004c72:	b928      	cbnz	r0, 8004c80 <__pow5mult+0x40>
 8004c74:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <__pow5mult+0xac>)
 8004c76:	481e      	ldr	r0, [pc, #120]	; (8004cf0 <__pow5mult+0xb0>)
 8004c78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004c7c:	f000 fc0e 	bl	800549c <__assert_func>
 8004c80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c84:	6004      	str	r4, [r0, #0]
 8004c86:	60c4      	str	r4, [r0, #12]
 8004c88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004c8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c90:	b94c      	cbnz	r4, 8004ca6 <__pow5mult+0x66>
 8004c92:	f240 2171 	movw	r1, #625	; 0x271
 8004c96:	4630      	mov	r0, r6
 8004c98:	f7ff ff12 	bl	8004ac0 <__i2b>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	6003      	str	r3, [r0, #0]
 8004ca6:	f04f 0900 	mov.w	r9, #0
 8004caa:	07eb      	lsls	r3, r5, #31
 8004cac:	d50a      	bpl.n	8004cc4 <__pow5mult+0x84>
 8004cae:	4639      	mov	r1, r7
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	f7ff ff1a 	bl	8004aec <__multiply>
 8004cb8:	4639      	mov	r1, r7
 8004cba:	4680      	mov	r8, r0
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	f7ff fe47 	bl	8004950 <_Bfree>
 8004cc2:	4647      	mov	r7, r8
 8004cc4:	106d      	asrs	r5, r5, #1
 8004cc6:	d00b      	beq.n	8004ce0 <__pow5mult+0xa0>
 8004cc8:	6820      	ldr	r0, [r4, #0]
 8004cca:	b938      	cbnz	r0, 8004cdc <__pow5mult+0x9c>
 8004ccc:	4622      	mov	r2, r4
 8004cce:	4621      	mov	r1, r4
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f7ff ff0b 	bl	8004aec <__multiply>
 8004cd6:	6020      	str	r0, [r4, #0]
 8004cd8:	f8c0 9000 	str.w	r9, [r0]
 8004cdc:	4604      	mov	r4, r0
 8004cde:	e7e4      	b.n	8004caa <__pow5mult+0x6a>
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08006598 	.word	0x08006598
 8004cec:	080063c5 	.word	0x080063c5
 8004cf0:	08006448 	.word	0x08006448

08004cf4 <__lshift>:
 8004cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	6849      	ldr	r1, [r1, #4]
 8004cfc:	6923      	ldr	r3, [r4, #16]
 8004cfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d02:	68a3      	ldr	r3, [r4, #8]
 8004d04:	4607      	mov	r7, r0
 8004d06:	4691      	mov	r9, r2
 8004d08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d0c:	f108 0601 	add.w	r6, r8, #1
 8004d10:	42b3      	cmp	r3, r6
 8004d12:	db0b      	blt.n	8004d2c <__lshift+0x38>
 8004d14:	4638      	mov	r0, r7
 8004d16:	f7ff fddb 	bl	80048d0 <_Balloc>
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	b948      	cbnz	r0, 8004d32 <__lshift+0x3e>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <__lshift+0xd8>)
 8004d22:	482b      	ldr	r0, [pc, #172]	; (8004dd0 <__lshift+0xdc>)
 8004d24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004d28:	f000 fbb8 	bl	800549c <__assert_func>
 8004d2c:	3101      	adds	r1, #1
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	e7ee      	b.n	8004d10 <__lshift+0x1c>
 8004d32:	2300      	movs	r3, #0
 8004d34:	f100 0114 	add.w	r1, r0, #20
 8004d38:	f100 0210 	add.w	r2, r0, #16
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	4553      	cmp	r3, sl
 8004d40:	db37      	blt.n	8004db2 <__lshift+0xbe>
 8004d42:	6920      	ldr	r0, [r4, #16]
 8004d44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d48:	f104 0314 	add.w	r3, r4, #20
 8004d4c:	f019 091f 	ands.w	r9, r9, #31
 8004d50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004d58:	d02f      	beq.n	8004dba <__lshift+0xc6>
 8004d5a:	f1c9 0e20 	rsb	lr, r9, #32
 8004d5e:	468a      	mov	sl, r1
 8004d60:	f04f 0c00 	mov.w	ip, #0
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	fa02 f209 	lsl.w	r2, r2, r9
 8004d6a:	ea42 020c 	orr.w	r2, r2, ip
 8004d6e:	f84a 2b04 	str.w	r2, [sl], #4
 8004d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d76:	4298      	cmp	r0, r3
 8004d78:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004d7c:	d8f2      	bhi.n	8004d64 <__lshift+0x70>
 8004d7e:	1b03      	subs	r3, r0, r4
 8004d80:	3b15      	subs	r3, #21
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	3304      	adds	r3, #4
 8004d88:	f104 0215 	add.w	r2, r4, #21
 8004d8c:	4290      	cmp	r0, r2
 8004d8e:	bf38      	it	cc
 8004d90:	2304      	movcc	r3, #4
 8004d92:	f841 c003 	str.w	ip, [r1, r3]
 8004d96:	f1bc 0f00 	cmp.w	ip, #0
 8004d9a:	d001      	beq.n	8004da0 <__lshift+0xac>
 8004d9c:	f108 0602 	add.w	r6, r8, #2
 8004da0:	3e01      	subs	r6, #1
 8004da2:	4638      	mov	r0, r7
 8004da4:	612e      	str	r6, [r5, #16]
 8004da6:	4621      	mov	r1, r4
 8004da8:	f7ff fdd2 	bl	8004950 <_Bfree>
 8004dac:	4628      	mov	r0, r5
 8004dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db2:	f842 0f04 	str.w	r0, [r2, #4]!
 8004db6:	3301      	adds	r3, #1
 8004db8:	e7c1      	b.n	8004d3e <__lshift+0x4a>
 8004dba:	3904      	subs	r1, #4
 8004dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8004dc4:	4298      	cmp	r0, r3
 8004dc6:	d8f9      	bhi.n	8004dbc <__lshift+0xc8>
 8004dc8:	e7ea      	b.n	8004da0 <__lshift+0xac>
 8004dca:	bf00      	nop
 8004dcc:	08006437 	.word	0x08006437
 8004dd0:	08006448 	.word	0x08006448

08004dd4 <__mcmp>:
 8004dd4:	b530      	push	{r4, r5, lr}
 8004dd6:	6902      	ldr	r2, [r0, #16]
 8004dd8:	690c      	ldr	r4, [r1, #16]
 8004dda:	1b12      	subs	r2, r2, r4
 8004ddc:	d10e      	bne.n	8004dfc <__mcmp+0x28>
 8004dde:	f100 0314 	add.w	r3, r0, #20
 8004de2:	3114      	adds	r1, #20
 8004de4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004de8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004dec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004df0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004df4:	42a5      	cmp	r5, r4
 8004df6:	d003      	beq.n	8004e00 <__mcmp+0x2c>
 8004df8:	d305      	bcc.n	8004e06 <__mcmp+0x32>
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	bd30      	pop	{r4, r5, pc}
 8004e00:	4283      	cmp	r3, r0
 8004e02:	d3f3      	bcc.n	8004dec <__mcmp+0x18>
 8004e04:	e7fa      	b.n	8004dfc <__mcmp+0x28>
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	e7f7      	b.n	8004dfc <__mcmp+0x28>

08004e0c <__mdiff>:
 8004e0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e10:	460c      	mov	r4, r1
 8004e12:	4606      	mov	r6, r0
 8004e14:	4611      	mov	r1, r2
 8004e16:	4620      	mov	r0, r4
 8004e18:	4690      	mov	r8, r2
 8004e1a:	f7ff ffdb 	bl	8004dd4 <__mcmp>
 8004e1e:	1e05      	subs	r5, r0, #0
 8004e20:	d110      	bne.n	8004e44 <__mdiff+0x38>
 8004e22:	4629      	mov	r1, r5
 8004e24:	4630      	mov	r0, r6
 8004e26:	f7ff fd53 	bl	80048d0 <_Balloc>
 8004e2a:	b930      	cbnz	r0, 8004e3a <__mdiff+0x2e>
 8004e2c:	4b3a      	ldr	r3, [pc, #232]	; (8004f18 <__mdiff+0x10c>)
 8004e2e:	4602      	mov	r2, r0
 8004e30:	f240 2132 	movw	r1, #562	; 0x232
 8004e34:	4839      	ldr	r0, [pc, #228]	; (8004f1c <__mdiff+0x110>)
 8004e36:	f000 fb31 	bl	800549c <__assert_func>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e44:	bfa4      	itt	ge
 8004e46:	4643      	movge	r3, r8
 8004e48:	46a0      	movge	r8, r4
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004e50:	bfa6      	itte	ge
 8004e52:	461c      	movge	r4, r3
 8004e54:	2500      	movge	r5, #0
 8004e56:	2501      	movlt	r5, #1
 8004e58:	f7ff fd3a 	bl	80048d0 <_Balloc>
 8004e5c:	b920      	cbnz	r0, 8004e68 <__mdiff+0x5c>
 8004e5e:	4b2e      	ldr	r3, [pc, #184]	; (8004f18 <__mdiff+0x10c>)
 8004e60:	4602      	mov	r2, r0
 8004e62:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004e66:	e7e5      	b.n	8004e34 <__mdiff+0x28>
 8004e68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004e6c:	6926      	ldr	r6, [r4, #16]
 8004e6e:	60c5      	str	r5, [r0, #12]
 8004e70:	f104 0914 	add.w	r9, r4, #20
 8004e74:	f108 0514 	add.w	r5, r8, #20
 8004e78:	f100 0e14 	add.w	lr, r0, #20
 8004e7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004e80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004e84:	f108 0210 	add.w	r2, r8, #16
 8004e88:	46f2      	mov	sl, lr
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004e90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004e94:	fa1f f883 	uxth.w	r8, r3
 8004e98:	fa11 f18b 	uxtah	r1, r1, fp
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	eba1 0808 	sub.w	r8, r1, r8
 8004ea2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004ea6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004eaa:	fa1f f888 	uxth.w	r8, r8
 8004eae:	1419      	asrs	r1, r3, #16
 8004eb0:	454e      	cmp	r6, r9
 8004eb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004eb6:	f84a 3b04 	str.w	r3, [sl], #4
 8004eba:	d8e7      	bhi.n	8004e8c <__mdiff+0x80>
 8004ebc:	1b33      	subs	r3, r6, r4
 8004ebe:	3b15      	subs	r3, #21
 8004ec0:	f023 0303 	bic.w	r3, r3, #3
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	3415      	adds	r4, #21
 8004ec8:	42a6      	cmp	r6, r4
 8004eca:	bf38      	it	cc
 8004ecc:	2304      	movcc	r3, #4
 8004ece:	441d      	add	r5, r3
 8004ed0:	4473      	add	r3, lr
 8004ed2:	469e      	mov	lr, r3
 8004ed4:	462e      	mov	r6, r5
 8004ed6:	4566      	cmp	r6, ip
 8004ed8:	d30e      	bcc.n	8004ef8 <__mdiff+0xec>
 8004eda:	f10c 0203 	add.w	r2, ip, #3
 8004ede:	1b52      	subs	r2, r2, r5
 8004ee0:	f022 0203 	bic.w	r2, r2, #3
 8004ee4:	3d03      	subs	r5, #3
 8004ee6:	45ac      	cmp	ip, r5
 8004ee8:	bf38      	it	cc
 8004eea:	2200      	movcc	r2, #0
 8004eec:	441a      	add	r2, r3
 8004eee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004ef2:	b17b      	cbz	r3, 8004f14 <__mdiff+0x108>
 8004ef4:	6107      	str	r7, [r0, #16]
 8004ef6:	e7a3      	b.n	8004e40 <__mdiff+0x34>
 8004ef8:	f856 8b04 	ldr.w	r8, [r6], #4
 8004efc:	fa11 f288 	uxtah	r2, r1, r8
 8004f00:	1414      	asrs	r4, r2, #16
 8004f02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004f06:	b292      	uxth	r2, r2
 8004f08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004f0c:	f84e 2b04 	str.w	r2, [lr], #4
 8004f10:	1421      	asrs	r1, r4, #16
 8004f12:	e7e0      	b.n	8004ed6 <__mdiff+0xca>
 8004f14:	3f01      	subs	r7, #1
 8004f16:	e7ea      	b.n	8004eee <__mdiff+0xe2>
 8004f18:	08006437 	.word	0x08006437
 8004f1c:	08006448 	.word	0x08006448

08004f20 <__d2b>:
 8004f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f24:	4689      	mov	r9, r1
 8004f26:	2101      	movs	r1, #1
 8004f28:	ec57 6b10 	vmov	r6, r7, d0
 8004f2c:	4690      	mov	r8, r2
 8004f2e:	f7ff fccf 	bl	80048d0 <_Balloc>
 8004f32:	4604      	mov	r4, r0
 8004f34:	b930      	cbnz	r0, 8004f44 <__d2b+0x24>
 8004f36:	4602      	mov	r2, r0
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <__d2b+0xb0>)
 8004f3a:	4826      	ldr	r0, [pc, #152]	; (8004fd4 <__d2b+0xb4>)
 8004f3c:	f240 310a 	movw	r1, #778	; 0x30a
 8004f40:	f000 faac 	bl	800549c <__assert_func>
 8004f44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004f48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004f4c:	bb35      	cbnz	r5, 8004f9c <__d2b+0x7c>
 8004f4e:	2e00      	cmp	r6, #0
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	d028      	beq.n	8004fa6 <__d2b+0x86>
 8004f54:	4668      	mov	r0, sp
 8004f56:	9600      	str	r6, [sp, #0]
 8004f58:	f7ff fd82 	bl	8004a60 <__lo0bits>
 8004f5c:	9900      	ldr	r1, [sp, #0]
 8004f5e:	b300      	cbz	r0, 8004fa2 <__d2b+0x82>
 8004f60:	9a01      	ldr	r2, [sp, #4]
 8004f62:	f1c0 0320 	rsb	r3, r0, #32
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	40c2      	lsrs	r2, r0
 8004f6e:	6163      	str	r3, [r4, #20]
 8004f70:	9201      	str	r2, [sp, #4]
 8004f72:	9b01      	ldr	r3, [sp, #4]
 8004f74:	61a3      	str	r3, [r4, #24]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bf14      	ite	ne
 8004f7a:	2202      	movne	r2, #2
 8004f7c:	2201      	moveq	r2, #1
 8004f7e:	6122      	str	r2, [r4, #16]
 8004f80:	b1d5      	cbz	r5, 8004fb8 <__d2b+0x98>
 8004f82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004f86:	4405      	add	r5, r0
 8004f88:	f8c9 5000 	str.w	r5, [r9]
 8004f8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004f90:	f8c8 0000 	str.w	r0, [r8]
 8004f94:	4620      	mov	r0, r4
 8004f96:	b003      	add	sp, #12
 8004f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fa0:	e7d5      	b.n	8004f4e <__d2b+0x2e>
 8004fa2:	6161      	str	r1, [r4, #20]
 8004fa4:	e7e5      	b.n	8004f72 <__d2b+0x52>
 8004fa6:	a801      	add	r0, sp, #4
 8004fa8:	f7ff fd5a 	bl	8004a60 <__lo0bits>
 8004fac:	9b01      	ldr	r3, [sp, #4]
 8004fae:	6163      	str	r3, [r4, #20]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	6122      	str	r2, [r4, #16]
 8004fb4:	3020      	adds	r0, #32
 8004fb6:	e7e3      	b.n	8004f80 <__d2b+0x60>
 8004fb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004fbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004fc0:	f8c9 0000 	str.w	r0, [r9]
 8004fc4:	6918      	ldr	r0, [r3, #16]
 8004fc6:	f7ff fd2b 	bl	8004a20 <__hi0bits>
 8004fca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004fce:	e7df      	b.n	8004f90 <__d2b+0x70>
 8004fd0:	08006437 	.word	0x08006437
 8004fd4:	08006448 	.word	0x08006448

08004fd8 <_calloc_r>:
 8004fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fda:	fba1 2402 	umull	r2, r4, r1, r2
 8004fde:	b94c      	cbnz	r4, 8004ff4 <_calloc_r+0x1c>
 8004fe0:	4611      	mov	r1, r2
 8004fe2:	9201      	str	r2, [sp, #4]
 8004fe4:	f000 f87a 	bl	80050dc <_malloc_r>
 8004fe8:	9a01      	ldr	r2, [sp, #4]
 8004fea:	4605      	mov	r5, r0
 8004fec:	b930      	cbnz	r0, 8004ffc <_calloc_r+0x24>
 8004fee:	4628      	mov	r0, r5
 8004ff0:	b003      	add	sp, #12
 8004ff2:	bd30      	pop	{r4, r5, pc}
 8004ff4:	220c      	movs	r2, #12
 8004ff6:	6002      	str	r2, [r0, #0]
 8004ff8:	2500      	movs	r5, #0
 8004ffa:	e7f8      	b.n	8004fee <_calloc_r+0x16>
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	f7fe f93f 	bl	8003280 <memset>
 8005002:	e7f4      	b.n	8004fee <_calloc_r+0x16>

08005004 <_free_r>:
 8005004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005006:	2900      	cmp	r1, #0
 8005008:	d044      	beq.n	8005094 <_free_r+0x90>
 800500a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800500e:	9001      	str	r0, [sp, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f1a1 0404 	sub.w	r4, r1, #4
 8005016:	bfb8      	it	lt
 8005018:	18e4      	addlt	r4, r4, r3
 800501a:	f000 fa9b 	bl	8005554 <__malloc_lock>
 800501e:	4a1e      	ldr	r2, [pc, #120]	; (8005098 <_free_r+0x94>)
 8005020:	9801      	ldr	r0, [sp, #4]
 8005022:	6813      	ldr	r3, [r2, #0]
 8005024:	b933      	cbnz	r3, 8005034 <_free_r+0x30>
 8005026:	6063      	str	r3, [r4, #4]
 8005028:	6014      	str	r4, [r2, #0]
 800502a:	b003      	add	sp, #12
 800502c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005030:	f000 ba96 	b.w	8005560 <__malloc_unlock>
 8005034:	42a3      	cmp	r3, r4
 8005036:	d908      	bls.n	800504a <_free_r+0x46>
 8005038:	6825      	ldr	r5, [r4, #0]
 800503a:	1961      	adds	r1, r4, r5
 800503c:	428b      	cmp	r3, r1
 800503e:	bf01      	itttt	eq
 8005040:	6819      	ldreq	r1, [r3, #0]
 8005042:	685b      	ldreq	r3, [r3, #4]
 8005044:	1949      	addeq	r1, r1, r5
 8005046:	6021      	streq	r1, [r4, #0]
 8005048:	e7ed      	b.n	8005026 <_free_r+0x22>
 800504a:	461a      	mov	r2, r3
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	b10b      	cbz	r3, 8005054 <_free_r+0x50>
 8005050:	42a3      	cmp	r3, r4
 8005052:	d9fa      	bls.n	800504a <_free_r+0x46>
 8005054:	6811      	ldr	r1, [r2, #0]
 8005056:	1855      	adds	r5, r2, r1
 8005058:	42a5      	cmp	r5, r4
 800505a:	d10b      	bne.n	8005074 <_free_r+0x70>
 800505c:	6824      	ldr	r4, [r4, #0]
 800505e:	4421      	add	r1, r4
 8005060:	1854      	adds	r4, r2, r1
 8005062:	42a3      	cmp	r3, r4
 8005064:	6011      	str	r1, [r2, #0]
 8005066:	d1e0      	bne.n	800502a <_free_r+0x26>
 8005068:	681c      	ldr	r4, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	6053      	str	r3, [r2, #4]
 800506e:	4421      	add	r1, r4
 8005070:	6011      	str	r1, [r2, #0]
 8005072:	e7da      	b.n	800502a <_free_r+0x26>
 8005074:	d902      	bls.n	800507c <_free_r+0x78>
 8005076:	230c      	movs	r3, #12
 8005078:	6003      	str	r3, [r0, #0]
 800507a:	e7d6      	b.n	800502a <_free_r+0x26>
 800507c:	6825      	ldr	r5, [r4, #0]
 800507e:	1961      	adds	r1, r4, r5
 8005080:	428b      	cmp	r3, r1
 8005082:	bf04      	itt	eq
 8005084:	6819      	ldreq	r1, [r3, #0]
 8005086:	685b      	ldreq	r3, [r3, #4]
 8005088:	6063      	str	r3, [r4, #4]
 800508a:	bf04      	itt	eq
 800508c:	1949      	addeq	r1, r1, r5
 800508e:	6021      	streq	r1, [r4, #0]
 8005090:	6054      	str	r4, [r2, #4]
 8005092:	e7ca      	b.n	800502a <_free_r+0x26>
 8005094:	b003      	add	sp, #12
 8005096:	bd30      	pop	{r4, r5, pc}
 8005098:	20000234 	.word	0x20000234

0800509c <sbrk_aligned>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	4e0e      	ldr	r6, [pc, #56]	; (80050d8 <sbrk_aligned+0x3c>)
 80050a0:	460c      	mov	r4, r1
 80050a2:	6831      	ldr	r1, [r6, #0]
 80050a4:	4605      	mov	r5, r0
 80050a6:	b911      	cbnz	r1, 80050ae <sbrk_aligned+0x12>
 80050a8:	f000 f9e8 	bl	800547c <_sbrk_r>
 80050ac:	6030      	str	r0, [r6, #0]
 80050ae:	4621      	mov	r1, r4
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 f9e3 	bl	800547c <_sbrk_r>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	d00a      	beq.n	80050d0 <sbrk_aligned+0x34>
 80050ba:	1cc4      	adds	r4, r0, #3
 80050bc:	f024 0403 	bic.w	r4, r4, #3
 80050c0:	42a0      	cmp	r0, r4
 80050c2:	d007      	beq.n	80050d4 <sbrk_aligned+0x38>
 80050c4:	1a21      	subs	r1, r4, r0
 80050c6:	4628      	mov	r0, r5
 80050c8:	f000 f9d8 	bl	800547c <_sbrk_r>
 80050cc:	3001      	adds	r0, #1
 80050ce:	d101      	bne.n	80050d4 <sbrk_aligned+0x38>
 80050d0:	f04f 34ff 	mov.w	r4, #4294967295
 80050d4:	4620      	mov	r0, r4
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	20000238 	.word	0x20000238

080050dc <_malloc_r>:
 80050dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e0:	1ccd      	adds	r5, r1, #3
 80050e2:	f025 0503 	bic.w	r5, r5, #3
 80050e6:	3508      	adds	r5, #8
 80050e8:	2d0c      	cmp	r5, #12
 80050ea:	bf38      	it	cc
 80050ec:	250c      	movcc	r5, #12
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	4607      	mov	r7, r0
 80050f2:	db01      	blt.n	80050f8 <_malloc_r+0x1c>
 80050f4:	42a9      	cmp	r1, r5
 80050f6:	d905      	bls.n	8005104 <_malloc_r+0x28>
 80050f8:	230c      	movs	r3, #12
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	2600      	movs	r6, #0
 80050fe:	4630      	mov	r0, r6
 8005100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005104:	4e2e      	ldr	r6, [pc, #184]	; (80051c0 <_malloc_r+0xe4>)
 8005106:	f000 fa25 	bl	8005554 <__malloc_lock>
 800510a:	6833      	ldr	r3, [r6, #0]
 800510c:	461c      	mov	r4, r3
 800510e:	bb34      	cbnz	r4, 800515e <_malloc_r+0x82>
 8005110:	4629      	mov	r1, r5
 8005112:	4638      	mov	r0, r7
 8005114:	f7ff ffc2 	bl	800509c <sbrk_aligned>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	4604      	mov	r4, r0
 800511c:	d14d      	bne.n	80051ba <_malloc_r+0xde>
 800511e:	6834      	ldr	r4, [r6, #0]
 8005120:	4626      	mov	r6, r4
 8005122:	2e00      	cmp	r6, #0
 8005124:	d140      	bne.n	80051a8 <_malloc_r+0xcc>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	4631      	mov	r1, r6
 800512a:	4638      	mov	r0, r7
 800512c:	eb04 0803 	add.w	r8, r4, r3
 8005130:	f000 f9a4 	bl	800547c <_sbrk_r>
 8005134:	4580      	cmp	r8, r0
 8005136:	d13a      	bne.n	80051ae <_malloc_r+0xd2>
 8005138:	6821      	ldr	r1, [r4, #0]
 800513a:	3503      	adds	r5, #3
 800513c:	1a6d      	subs	r5, r5, r1
 800513e:	f025 0503 	bic.w	r5, r5, #3
 8005142:	3508      	adds	r5, #8
 8005144:	2d0c      	cmp	r5, #12
 8005146:	bf38      	it	cc
 8005148:	250c      	movcc	r5, #12
 800514a:	4629      	mov	r1, r5
 800514c:	4638      	mov	r0, r7
 800514e:	f7ff ffa5 	bl	800509c <sbrk_aligned>
 8005152:	3001      	adds	r0, #1
 8005154:	d02b      	beq.n	80051ae <_malloc_r+0xd2>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	442b      	add	r3, r5
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	e00e      	b.n	800517c <_malloc_r+0xa0>
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	1b52      	subs	r2, r2, r5
 8005162:	d41e      	bmi.n	80051a2 <_malloc_r+0xc6>
 8005164:	2a0b      	cmp	r2, #11
 8005166:	d916      	bls.n	8005196 <_malloc_r+0xba>
 8005168:	1961      	adds	r1, r4, r5
 800516a:	42a3      	cmp	r3, r4
 800516c:	6025      	str	r5, [r4, #0]
 800516e:	bf18      	it	ne
 8005170:	6059      	strne	r1, [r3, #4]
 8005172:	6863      	ldr	r3, [r4, #4]
 8005174:	bf08      	it	eq
 8005176:	6031      	streq	r1, [r6, #0]
 8005178:	5162      	str	r2, [r4, r5]
 800517a:	604b      	str	r3, [r1, #4]
 800517c:	4638      	mov	r0, r7
 800517e:	f104 060b 	add.w	r6, r4, #11
 8005182:	f000 f9ed 	bl	8005560 <__malloc_unlock>
 8005186:	f026 0607 	bic.w	r6, r6, #7
 800518a:	1d23      	adds	r3, r4, #4
 800518c:	1af2      	subs	r2, r6, r3
 800518e:	d0b6      	beq.n	80050fe <_malloc_r+0x22>
 8005190:	1b9b      	subs	r3, r3, r6
 8005192:	50a3      	str	r3, [r4, r2]
 8005194:	e7b3      	b.n	80050fe <_malloc_r+0x22>
 8005196:	6862      	ldr	r2, [r4, #4]
 8005198:	42a3      	cmp	r3, r4
 800519a:	bf0c      	ite	eq
 800519c:	6032      	streq	r2, [r6, #0]
 800519e:	605a      	strne	r2, [r3, #4]
 80051a0:	e7ec      	b.n	800517c <_malloc_r+0xa0>
 80051a2:	4623      	mov	r3, r4
 80051a4:	6864      	ldr	r4, [r4, #4]
 80051a6:	e7b2      	b.n	800510e <_malloc_r+0x32>
 80051a8:	4634      	mov	r4, r6
 80051aa:	6876      	ldr	r6, [r6, #4]
 80051ac:	e7b9      	b.n	8005122 <_malloc_r+0x46>
 80051ae:	230c      	movs	r3, #12
 80051b0:	603b      	str	r3, [r7, #0]
 80051b2:	4638      	mov	r0, r7
 80051b4:	f000 f9d4 	bl	8005560 <__malloc_unlock>
 80051b8:	e7a1      	b.n	80050fe <_malloc_r+0x22>
 80051ba:	6025      	str	r5, [r4, #0]
 80051bc:	e7de      	b.n	800517c <_malloc_r+0xa0>
 80051be:	bf00      	nop
 80051c0:	20000234 	.word	0x20000234

080051c4 <__ssputs_r>:
 80051c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c8:	688e      	ldr	r6, [r1, #8]
 80051ca:	429e      	cmp	r6, r3
 80051cc:	4682      	mov	sl, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	4690      	mov	r8, r2
 80051d2:	461f      	mov	r7, r3
 80051d4:	d838      	bhi.n	8005248 <__ssputs_r+0x84>
 80051d6:	898a      	ldrh	r2, [r1, #12]
 80051d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051dc:	d032      	beq.n	8005244 <__ssputs_r+0x80>
 80051de:	6825      	ldr	r5, [r4, #0]
 80051e0:	6909      	ldr	r1, [r1, #16]
 80051e2:	eba5 0901 	sub.w	r9, r5, r1
 80051e6:	6965      	ldr	r5, [r4, #20]
 80051e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051f0:	3301      	adds	r3, #1
 80051f2:	444b      	add	r3, r9
 80051f4:	106d      	asrs	r5, r5, #1
 80051f6:	429d      	cmp	r5, r3
 80051f8:	bf38      	it	cc
 80051fa:	461d      	movcc	r5, r3
 80051fc:	0553      	lsls	r3, r2, #21
 80051fe:	d531      	bpl.n	8005264 <__ssputs_r+0xa0>
 8005200:	4629      	mov	r1, r5
 8005202:	f7ff ff6b 	bl	80050dc <_malloc_r>
 8005206:	4606      	mov	r6, r0
 8005208:	b950      	cbnz	r0, 8005220 <__ssputs_r+0x5c>
 800520a:	230c      	movs	r3, #12
 800520c:	f8ca 3000 	str.w	r3, [sl]
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
 800521c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005220:	6921      	ldr	r1, [r4, #16]
 8005222:	464a      	mov	r2, r9
 8005224:	f7ff fb46 	bl	80048b4 <memcpy>
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800522e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005232:	81a3      	strh	r3, [r4, #12]
 8005234:	6126      	str	r6, [r4, #16]
 8005236:	6165      	str	r5, [r4, #20]
 8005238:	444e      	add	r6, r9
 800523a:	eba5 0509 	sub.w	r5, r5, r9
 800523e:	6026      	str	r6, [r4, #0]
 8005240:	60a5      	str	r5, [r4, #8]
 8005242:	463e      	mov	r6, r7
 8005244:	42be      	cmp	r6, r7
 8005246:	d900      	bls.n	800524a <__ssputs_r+0x86>
 8005248:	463e      	mov	r6, r7
 800524a:	6820      	ldr	r0, [r4, #0]
 800524c:	4632      	mov	r2, r6
 800524e:	4641      	mov	r1, r8
 8005250:	f000 f966 	bl	8005520 <memmove>
 8005254:	68a3      	ldr	r3, [r4, #8]
 8005256:	1b9b      	subs	r3, r3, r6
 8005258:	60a3      	str	r3, [r4, #8]
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	4433      	add	r3, r6
 800525e:	6023      	str	r3, [r4, #0]
 8005260:	2000      	movs	r0, #0
 8005262:	e7db      	b.n	800521c <__ssputs_r+0x58>
 8005264:	462a      	mov	r2, r5
 8005266:	f000 f981 	bl	800556c <_realloc_r>
 800526a:	4606      	mov	r6, r0
 800526c:	2800      	cmp	r0, #0
 800526e:	d1e1      	bne.n	8005234 <__ssputs_r+0x70>
 8005270:	6921      	ldr	r1, [r4, #16]
 8005272:	4650      	mov	r0, sl
 8005274:	f7ff fec6 	bl	8005004 <_free_r>
 8005278:	e7c7      	b.n	800520a <__ssputs_r+0x46>
	...

0800527c <_svfiprintf_r>:
 800527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	4698      	mov	r8, r3
 8005282:	898b      	ldrh	r3, [r1, #12]
 8005284:	061b      	lsls	r3, r3, #24
 8005286:	b09d      	sub	sp, #116	; 0x74
 8005288:	4607      	mov	r7, r0
 800528a:	460d      	mov	r5, r1
 800528c:	4614      	mov	r4, r2
 800528e:	d50e      	bpl.n	80052ae <_svfiprintf_r+0x32>
 8005290:	690b      	ldr	r3, [r1, #16]
 8005292:	b963      	cbnz	r3, 80052ae <_svfiprintf_r+0x32>
 8005294:	2140      	movs	r1, #64	; 0x40
 8005296:	f7ff ff21 	bl	80050dc <_malloc_r>
 800529a:	6028      	str	r0, [r5, #0]
 800529c:	6128      	str	r0, [r5, #16]
 800529e:	b920      	cbnz	r0, 80052aa <_svfiprintf_r+0x2e>
 80052a0:	230c      	movs	r3, #12
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	e0d1      	b.n	800544e <_svfiprintf_r+0x1d2>
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	616b      	str	r3, [r5, #20]
 80052ae:	2300      	movs	r3, #0
 80052b0:	9309      	str	r3, [sp, #36]	; 0x24
 80052b2:	2320      	movs	r3, #32
 80052b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80052bc:	2330      	movs	r3, #48	; 0x30
 80052be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005468 <_svfiprintf_r+0x1ec>
 80052c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052c6:	f04f 0901 	mov.w	r9, #1
 80052ca:	4623      	mov	r3, r4
 80052cc:	469a      	mov	sl, r3
 80052ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052d2:	b10a      	cbz	r2, 80052d8 <_svfiprintf_r+0x5c>
 80052d4:	2a25      	cmp	r2, #37	; 0x25
 80052d6:	d1f9      	bne.n	80052cc <_svfiprintf_r+0x50>
 80052d8:	ebba 0b04 	subs.w	fp, sl, r4
 80052dc:	d00b      	beq.n	80052f6 <_svfiprintf_r+0x7a>
 80052de:	465b      	mov	r3, fp
 80052e0:	4622      	mov	r2, r4
 80052e2:	4629      	mov	r1, r5
 80052e4:	4638      	mov	r0, r7
 80052e6:	f7ff ff6d 	bl	80051c4 <__ssputs_r>
 80052ea:	3001      	adds	r0, #1
 80052ec:	f000 80aa 	beq.w	8005444 <_svfiprintf_r+0x1c8>
 80052f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052f2:	445a      	add	r2, fp
 80052f4:	9209      	str	r2, [sp, #36]	; 0x24
 80052f6:	f89a 3000 	ldrb.w	r3, [sl]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80a2 	beq.w	8005444 <_svfiprintf_r+0x1c8>
 8005300:	2300      	movs	r3, #0
 8005302:	f04f 32ff 	mov.w	r2, #4294967295
 8005306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800530a:	f10a 0a01 	add.w	sl, sl, #1
 800530e:	9304      	str	r3, [sp, #16]
 8005310:	9307      	str	r3, [sp, #28]
 8005312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005316:	931a      	str	r3, [sp, #104]	; 0x68
 8005318:	4654      	mov	r4, sl
 800531a:	2205      	movs	r2, #5
 800531c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005320:	4851      	ldr	r0, [pc, #324]	; (8005468 <_svfiprintf_r+0x1ec>)
 8005322:	f7fa ff5d 	bl	80001e0 <memchr>
 8005326:	9a04      	ldr	r2, [sp, #16]
 8005328:	b9d8      	cbnz	r0, 8005362 <_svfiprintf_r+0xe6>
 800532a:	06d0      	lsls	r0, r2, #27
 800532c:	bf44      	itt	mi
 800532e:	2320      	movmi	r3, #32
 8005330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005334:	0711      	lsls	r1, r2, #28
 8005336:	bf44      	itt	mi
 8005338:	232b      	movmi	r3, #43	; 0x2b
 800533a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800533e:	f89a 3000 	ldrb.w	r3, [sl]
 8005342:	2b2a      	cmp	r3, #42	; 0x2a
 8005344:	d015      	beq.n	8005372 <_svfiprintf_r+0xf6>
 8005346:	9a07      	ldr	r2, [sp, #28]
 8005348:	4654      	mov	r4, sl
 800534a:	2000      	movs	r0, #0
 800534c:	f04f 0c0a 	mov.w	ip, #10
 8005350:	4621      	mov	r1, r4
 8005352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005356:	3b30      	subs	r3, #48	; 0x30
 8005358:	2b09      	cmp	r3, #9
 800535a:	d94e      	bls.n	80053fa <_svfiprintf_r+0x17e>
 800535c:	b1b0      	cbz	r0, 800538c <_svfiprintf_r+0x110>
 800535e:	9207      	str	r2, [sp, #28]
 8005360:	e014      	b.n	800538c <_svfiprintf_r+0x110>
 8005362:	eba0 0308 	sub.w	r3, r0, r8
 8005366:	fa09 f303 	lsl.w	r3, r9, r3
 800536a:	4313      	orrs	r3, r2
 800536c:	9304      	str	r3, [sp, #16]
 800536e:	46a2      	mov	sl, r4
 8005370:	e7d2      	b.n	8005318 <_svfiprintf_r+0x9c>
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	1d19      	adds	r1, r3, #4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	9103      	str	r1, [sp, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	bfbb      	ittet	lt
 800537e:	425b      	neglt	r3, r3
 8005380:	f042 0202 	orrlt.w	r2, r2, #2
 8005384:	9307      	strge	r3, [sp, #28]
 8005386:	9307      	strlt	r3, [sp, #28]
 8005388:	bfb8      	it	lt
 800538a:	9204      	strlt	r2, [sp, #16]
 800538c:	7823      	ldrb	r3, [r4, #0]
 800538e:	2b2e      	cmp	r3, #46	; 0x2e
 8005390:	d10c      	bne.n	80053ac <_svfiprintf_r+0x130>
 8005392:	7863      	ldrb	r3, [r4, #1]
 8005394:	2b2a      	cmp	r3, #42	; 0x2a
 8005396:	d135      	bne.n	8005404 <_svfiprintf_r+0x188>
 8005398:	9b03      	ldr	r3, [sp, #12]
 800539a:	1d1a      	adds	r2, r3, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	9203      	str	r2, [sp, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bfb8      	it	lt
 80053a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80053a8:	3402      	adds	r4, #2
 80053aa:	9305      	str	r3, [sp, #20]
 80053ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005478 <_svfiprintf_r+0x1fc>
 80053b0:	7821      	ldrb	r1, [r4, #0]
 80053b2:	2203      	movs	r2, #3
 80053b4:	4650      	mov	r0, sl
 80053b6:	f7fa ff13 	bl	80001e0 <memchr>
 80053ba:	b140      	cbz	r0, 80053ce <_svfiprintf_r+0x152>
 80053bc:	2340      	movs	r3, #64	; 0x40
 80053be:	eba0 000a 	sub.w	r0, r0, sl
 80053c2:	fa03 f000 	lsl.w	r0, r3, r0
 80053c6:	9b04      	ldr	r3, [sp, #16]
 80053c8:	4303      	orrs	r3, r0
 80053ca:	3401      	adds	r4, #1
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d2:	4826      	ldr	r0, [pc, #152]	; (800546c <_svfiprintf_r+0x1f0>)
 80053d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053d8:	2206      	movs	r2, #6
 80053da:	f7fa ff01 	bl	80001e0 <memchr>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d038      	beq.n	8005454 <_svfiprintf_r+0x1d8>
 80053e2:	4b23      	ldr	r3, [pc, #140]	; (8005470 <_svfiprintf_r+0x1f4>)
 80053e4:	bb1b      	cbnz	r3, 800542e <_svfiprintf_r+0x1b2>
 80053e6:	9b03      	ldr	r3, [sp, #12]
 80053e8:	3307      	adds	r3, #7
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	3308      	adds	r3, #8
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f4:	4433      	add	r3, r6
 80053f6:	9309      	str	r3, [sp, #36]	; 0x24
 80053f8:	e767      	b.n	80052ca <_svfiprintf_r+0x4e>
 80053fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80053fe:	460c      	mov	r4, r1
 8005400:	2001      	movs	r0, #1
 8005402:	e7a5      	b.n	8005350 <_svfiprintf_r+0xd4>
 8005404:	2300      	movs	r3, #0
 8005406:	3401      	adds	r4, #1
 8005408:	9305      	str	r3, [sp, #20]
 800540a:	4619      	mov	r1, r3
 800540c:	f04f 0c0a 	mov.w	ip, #10
 8005410:	4620      	mov	r0, r4
 8005412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005416:	3a30      	subs	r2, #48	; 0x30
 8005418:	2a09      	cmp	r2, #9
 800541a:	d903      	bls.n	8005424 <_svfiprintf_r+0x1a8>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0c5      	beq.n	80053ac <_svfiprintf_r+0x130>
 8005420:	9105      	str	r1, [sp, #20]
 8005422:	e7c3      	b.n	80053ac <_svfiprintf_r+0x130>
 8005424:	fb0c 2101 	mla	r1, ip, r1, r2
 8005428:	4604      	mov	r4, r0
 800542a:	2301      	movs	r3, #1
 800542c:	e7f0      	b.n	8005410 <_svfiprintf_r+0x194>
 800542e:	ab03      	add	r3, sp, #12
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	462a      	mov	r2, r5
 8005434:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <_svfiprintf_r+0x1f8>)
 8005436:	a904      	add	r1, sp, #16
 8005438:	4638      	mov	r0, r7
 800543a:	f7fd ffc9 	bl	80033d0 <_printf_float>
 800543e:	1c42      	adds	r2, r0, #1
 8005440:	4606      	mov	r6, r0
 8005442:	d1d6      	bne.n	80053f2 <_svfiprintf_r+0x176>
 8005444:	89ab      	ldrh	r3, [r5, #12]
 8005446:	065b      	lsls	r3, r3, #25
 8005448:	f53f af2c 	bmi.w	80052a4 <_svfiprintf_r+0x28>
 800544c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800544e:	b01d      	add	sp, #116	; 0x74
 8005450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005454:	ab03      	add	r3, sp, #12
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	462a      	mov	r2, r5
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <_svfiprintf_r+0x1f8>)
 800545c:	a904      	add	r1, sp, #16
 800545e:	4638      	mov	r0, r7
 8005460:	f7fe fa5a 	bl	8003918 <_printf_i>
 8005464:	e7eb      	b.n	800543e <_svfiprintf_r+0x1c2>
 8005466:	bf00      	nop
 8005468:	080065a4 	.word	0x080065a4
 800546c:	080065ae 	.word	0x080065ae
 8005470:	080033d1 	.word	0x080033d1
 8005474:	080051c5 	.word	0x080051c5
 8005478:	080065aa 	.word	0x080065aa

0800547c <_sbrk_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4d06      	ldr	r5, [pc, #24]	; (8005498 <_sbrk_r+0x1c>)
 8005480:	2300      	movs	r3, #0
 8005482:	4604      	mov	r4, r0
 8005484:	4608      	mov	r0, r1
 8005486:	602b      	str	r3, [r5, #0]
 8005488:	f7fd fa28 	bl	80028dc <_sbrk>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d102      	bne.n	8005496 <_sbrk_r+0x1a>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	b103      	cbz	r3, 8005496 <_sbrk_r+0x1a>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	2000023c 	.word	0x2000023c

0800549c <__assert_func>:
 800549c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800549e:	4614      	mov	r4, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <__assert_func+0x2c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4605      	mov	r5, r0
 80054a8:	68d8      	ldr	r0, [r3, #12]
 80054aa:	b14c      	cbz	r4, 80054c0 <__assert_func+0x24>
 80054ac:	4b07      	ldr	r3, [pc, #28]	; (80054cc <__assert_func+0x30>)
 80054ae:	9100      	str	r1, [sp, #0]
 80054b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054b4:	4906      	ldr	r1, [pc, #24]	; (80054d0 <__assert_func+0x34>)
 80054b6:	462b      	mov	r3, r5
 80054b8:	f000 f80e 	bl	80054d8 <fiprintf>
 80054bc:	f000 faac 	bl	8005a18 <abort>
 80054c0:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <__assert_func+0x38>)
 80054c2:	461c      	mov	r4, r3
 80054c4:	e7f3      	b.n	80054ae <__assert_func+0x12>
 80054c6:	bf00      	nop
 80054c8:	20000008 	.word	0x20000008
 80054cc:	080065b5 	.word	0x080065b5
 80054d0:	080065c2 	.word	0x080065c2
 80054d4:	080065f0 	.word	0x080065f0

080054d8 <fiprintf>:
 80054d8:	b40e      	push	{r1, r2, r3}
 80054da:	b503      	push	{r0, r1, lr}
 80054dc:	4601      	mov	r1, r0
 80054de:	ab03      	add	r3, sp, #12
 80054e0:	4805      	ldr	r0, [pc, #20]	; (80054f8 <fiprintf+0x20>)
 80054e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e6:	6800      	ldr	r0, [r0, #0]
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	f000 f897 	bl	800561c <_vfiprintf_r>
 80054ee:	b002      	add	sp, #8
 80054f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054f4:	b003      	add	sp, #12
 80054f6:	4770      	bx	lr
 80054f8:	20000008 	.word	0x20000008

080054fc <__ascii_mbtowc>:
 80054fc:	b082      	sub	sp, #8
 80054fe:	b901      	cbnz	r1, 8005502 <__ascii_mbtowc+0x6>
 8005500:	a901      	add	r1, sp, #4
 8005502:	b142      	cbz	r2, 8005516 <__ascii_mbtowc+0x1a>
 8005504:	b14b      	cbz	r3, 800551a <__ascii_mbtowc+0x1e>
 8005506:	7813      	ldrb	r3, [r2, #0]
 8005508:	600b      	str	r3, [r1, #0]
 800550a:	7812      	ldrb	r2, [r2, #0]
 800550c:	1e10      	subs	r0, r2, #0
 800550e:	bf18      	it	ne
 8005510:	2001      	movne	r0, #1
 8005512:	b002      	add	sp, #8
 8005514:	4770      	bx	lr
 8005516:	4610      	mov	r0, r2
 8005518:	e7fb      	b.n	8005512 <__ascii_mbtowc+0x16>
 800551a:	f06f 0001 	mvn.w	r0, #1
 800551e:	e7f8      	b.n	8005512 <__ascii_mbtowc+0x16>

08005520 <memmove>:
 8005520:	4288      	cmp	r0, r1
 8005522:	b510      	push	{r4, lr}
 8005524:	eb01 0402 	add.w	r4, r1, r2
 8005528:	d902      	bls.n	8005530 <memmove+0x10>
 800552a:	4284      	cmp	r4, r0
 800552c:	4623      	mov	r3, r4
 800552e:	d807      	bhi.n	8005540 <memmove+0x20>
 8005530:	1e43      	subs	r3, r0, #1
 8005532:	42a1      	cmp	r1, r4
 8005534:	d008      	beq.n	8005548 <memmove+0x28>
 8005536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800553a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800553e:	e7f8      	b.n	8005532 <memmove+0x12>
 8005540:	4402      	add	r2, r0
 8005542:	4601      	mov	r1, r0
 8005544:	428a      	cmp	r2, r1
 8005546:	d100      	bne.n	800554a <memmove+0x2a>
 8005548:	bd10      	pop	{r4, pc}
 800554a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800554e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005552:	e7f7      	b.n	8005544 <memmove+0x24>

08005554 <__malloc_lock>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__malloc_lock+0x8>)
 8005556:	f000 bc1f 	b.w	8005d98 <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	20000240 	.word	0x20000240

08005560 <__malloc_unlock>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__malloc_unlock+0x8>)
 8005562:	f000 bc1a 	b.w	8005d9a <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	20000240 	.word	0x20000240

0800556c <_realloc_r>:
 800556c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005570:	4680      	mov	r8, r0
 8005572:	4614      	mov	r4, r2
 8005574:	460e      	mov	r6, r1
 8005576:	b921      	cbnz	r1, 8005582 <_realloc_r+0x16>
 8005578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800557c:	4611      	mov	r1, r2
 800557e:	f7ff bdad 	b.w	80050dc <_malloc_r>
 8005582:	b92a      	cbnz	r2, 8005590 <_realloc_r+0x24>
 8005584:	f7ff fd3e 	bl	8005004 <_free_r>
 8005588:	4625      	mov	r5, r4
 800558a:	4628      	mov	r0, r5
 800558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005590:	f000 fc6a 	bl	8005e68 <_malloc_usable_size_r>
 8005594:	4284      	cmp	r4, r0
 8005596:	4607      	mov	r7, r0
 8005598:	d802      	bhi.n	80055a0 <_realloc_r+0x34>
 800559a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800559e:	d812      	bhi.n	80055c6 <_realloc_r+0x5a>
 80055a0:	4621      	mov	r1, r4
 80055a2:	4640      	mov	r0, r8
 80055a4:	f7ff fd9a 	bl	80050dc <_malloc_r>
 80055a8:	4605      	mov	r5, r0
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d0ed      	beq.n	800558a <_realloc_r+0x1e>
 80055ae:	42bc      	cmp	r4, r7
 80055b0:	4622      	mov	r2, r4
 80055b2:	4631      	mov	r1, r6
 80055b4:	bf28      	it	cs
 80055b6:	463a      	movcs	r2, r7
 80055b8:	f7ff f97c 	bl	80048b4 <memcpy>
 80055bc:	4631      	mov	r1, r6
 80055be:	4640      	mov	r0, r8
 80055c0:	f7ff fd20 	bl	8005004 <_free_r>
 80055c4:	e7e1      	b.n	800558a <_realloc_r+0x1e>
 80055c6:	4635      	mov	r5, r6
 80055c8:	e7df      	b.n	800558a <_realloc_r+0x1e>

080055ca <__sfputc_r>:
 80055ca:	6893      	ldr	r3, [r2, #8]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	b410      	push	{r4}
 80055d2:	6093      	str	r3, [r2, #8]
 80055d4:	da08      	bge.n	80055e8 <__sfputc_r+0x1e>
 80055d6:	6994      	ldr	r4, [r2, #24]
 80055d8:	42a3      	cmp	r3, r4
 80055da:	db01      	blt.n	80055e0 <__sfputc_r+0x16>
 80055dc:	290a      	cmp	r1, #10
 80055de:	d103      	bne.n	80055e8 <__sfputc_r+0x1e>
 80055e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055e4:	f000 b94a 	b.w	800587c <__swbuf_r>
 80055e8:	6813      	ldr	r3, [r2, #0]
 80055ea:	1c58      	adds	r0, r3, #1
 80055ec:	6010      	str	r0, [r2, #0]
 80055ee:	7019      	strb	r1, [r3, #0]
 80055f0:	4608      	mov	r0, r1
 80055f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <__sfputs_r>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	4606      	mov	r6, r0
 80055fc:	460f      	mov	r7, r1
 80055fe:	4614      	mov	r4, r2
 8005600:	18d5      	adds	r5, r2, r3
 8005602:	42ac      	cmp	r4, r5
 8005604:	d101      	bne.n	800560a <__sfputs_r+0x12>
 8005606:	2000      	movs	r0, #0
 8005608:	e007      	b.n	800561a <__sfputs_r+0x22>
 800560a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800560e:	463a      	mov	r2, r7
 8005610:	4630      	mov	r0, r6
 8005612:	f7ff ffda 	bl	80055ca <__sfputc_r>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d1f3      	bne.n	8005602 <__sfputs_r+0xa>
 800561a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800561c <_vfiprintf_r>:
 800561c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005620:	460d      	mov	r5, r1
 8005622:	b09d      	sub	sp, #116	; 0x74
 8005624:	4614      	mov	r4, r2
 8005626:	4698      	mov	r8, r3
 8005628:	4606      	mov	r6, r0
 800562a:	b118      	cbz	r0, 8005634 <_vfiprintf_r+0x18>
 800562c:	6983      	ldr	r3, [r0, #24]
 800562e:	b90b      	cbnz	r3, 8005634 <_vfiprintf_r+0x18>
 8005630:	f000 fb14 	bl	8005c5c <__sinit>
 8005634:	4b89      	ldr	r3, [pc, #548]	; (800585c <_vfiprintf_r+0x240>)
 8005636:	429d      	cmp	r5, r3
 8005638:	d11b      	bne.n	8005672 <_vfiprintf_r+0x56>
 800563a:	6875      	ldr	r5, [r6, #4]
 800563c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800563e:	07d9      	lsls	r1, r3, #31
 8005640:	d405      	bmi.n	800564e <_vfiprintf_r+0x32>
 8005642:	89ab      	ldrh	r3, [r5, #12]
 8005644:	059a      	lsls	r2, r3, #22
 8005646:	d402      	bmi.n	800564e <_vfiprintf_r+0x32>
 8005648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800564a:	f000 fba5 	bl	8005d98 <__retarget_lock_acquire_recursive>
 800564e:	89ab      	ldrh	r3, [r5, #12]
 8005650:	071b      	lsls	r3, r3, #28
 8005652:	d501      	bpl.n	8005658 <_vfiprintf_r+0x3c>
 8005654:	692b      	ldr	r3, [r5, #16]
 8005656:	b9eb      	cbnz	r3, 8005694 <_vfiprintf_r+0x78>
 8005658:	4629      	mov	r1, r5
 800565a:	4630      	mov	r0, r6
 800565c:	f000 f96e 	bl	800593c <__swsetup_r>
 8005660:	b1c0      	cbz	r0, 8005694 <_vfiprintf_r+0x78>
 8005662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005664:	07dc      	lsls	r4, r3, #31
 8005666:	d50e      	bpl.n	8005686 <_vfiprintf_r+0x6a>
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	b01d      	add	sp, #116	; 0x74
 800566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005672:	4b7b      	ldr	r3, [pc, #492]	; (8005860 <_vfiprintf_r+0x244>)
 8005674:	429d      	cmp	r5, r3
 8005676:	d101      	bne.n	800567c <_vfiprintf_r+0x60>
 8005678:	68b5      	ldr	r5, [r6, #8]
 800567a:	e7df      	b.n	800563c <_vfiprintf_r+0x20>
 800567c:	4b79      	ldr	r3, [pc, #484]	; (8005864 <_vfiprintf_r+0x248>)
 800567e:	429d      	cmp	r5, r3
 8005680:	bf08      	it	eq
 8005682:	68f5      	ldreq	r5, [r6, #12]
 8005684:	e7da      	b.n	800563c <_vfiprintf_r+0x20>
 8005686:	89ab      	ldrh	r3, [r5, #12]
 8005688:	0598      	lsls	r0, r3, #22
 800568a:	d4ed      	bmi.n	8005668 <_vfiprintf_r+0x4c>
 800568c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800568e:	f000 fb84 	bl	8005d9a <__retarget_lock_release_recursive>
 8005692:	e7e9      	b.n	8005668 <_vfiprintf_r+0x4c>
 8005694:	2300      	movs	r3, #0
 8005696:	9309      	str	r3, [sp, #36]	; 0x24
 8005698:	2320      	movs	r3, #32
 800569a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800569e:	f8cd 800c 	str.w	r8, [sp, #12]
 80056a2:	2330      	movs	r3, #48	; 0x30
 80056a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005868 <_vfiprintf_r+0x24c>
 80056a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056ac:	f04f 0901 	mov.w	r9, #1
 80056b0:	4623      	mov	r3, r4
 80056b2:	469a      	mov	sl, r3
 80056b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056b8:	b10a      	cbz	r2, 80056be <_vfiprintf_r+0xa2>
 80056ba:	2a25      	cmp	r2, #37	; 0x25
 80056bc:	d1f9      	bne.n	80056b2 <_vfiprintf_r+0x96>
 80056be:	ebba 0b04 	subs.w	fp, sl, r4
 80056c2:	d00b      	beq.n	80056dc <_vfiprintf_r+0xc0>
 80056c4:	465b      	mov	r3, fp
 80056c6:	4622      	mov	r2, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	4630      	mov	r0, r6
 80056cc:	f7ff ff94 	bl	80055f8 <__sfputs_r>
 80056d0:	3001      	adds	r0, #1
 80056d2:	f000 80aa 	beq.w	800582a <_vfiprintf_r+0x20e>
 80056d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056d8:	445a      	add	r2, fp
 80056da:	9209      	str	r2, [sp, #36]	; 0x24
 80056dc:	f89a 3000 	ldrb.w	r3, [sl]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 80a2 	beq.w	800582a <_vfiprintf_r+0x20e>
 80056e6:	2300      	movs	r3, #0
 80056e8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056f0:	f10a 0a01 	add.w	sl, sl, #1
 80056f4:	9304      	str	r3, [sp, #16]
 80056f6:	9307      	str	r3, [sp, #28]
 80056f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056fc:	931a      	str	r3, [sp, #104]	; 0x68
 80056fe:	4654      	mov	r4, sl
 8005700:	2205      	movs	r2, #5
 8005702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005706:	4858      	ldr	r0, [pc, #352]	; (8005868 <_vfiprintf_r+0x24c>)
 8005708:	f7fa fd6a 	bl	80001e0 <memchr>
 800570c:	9a04      	ldr	r2, [sp, #16]
 800570e:	b9d8      	cbnz	r0, 8005748 <_vfiprintf_r+0x12c>
 8005710:	06d1      	lsls	r1, r2, #27
 8005712:	bf44      	itt	mi
 8005714:	2320      	movmi	r3, #32
 8005716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800571a:	0713      	lsls	r3, r2, #28
 800571c:	bf44      	itt	mi
 800571e:	232b      	movmi	r3, #43	; 0x2b
 8005720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005724:	f89a 3000 	ldrb.w	r3, [sl]
 8005728:	2b2a      	cmp	r3, #42	; 0x2a
 800572a:	d015      	beq.n	8005758 <_vfiprintf_r+0x13c>
 800572c:	9a07      	ldr	r2, [sp, #28]
 800572e:	4654      	mov	r4, sl
 8005730:	2000      	movs	r0, #0
 8005732:	f04f 0c0a 	mov.w	ip, #10
 8005736:	4621      	mov	r1, r4
 8005738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800573c:	3b30      	subs	r3, #48	; 0x30
 800573e:	2b09      	cmp	r3, #9
 8005740:	d94e      	bls.n	80057e0 <_vfiprintf_r+0x1c4>
 8005742:	b1b0      	cbz	r0, 8005772 <_vfiprintf_r+0x156>
 8005744:	9207      	str	r2, [sp, #28]
 8005746:	e014      	b.n	8005772 <_vfiprintf_r+0x156>
 8005748:	eba0 0308 	sub.w	r3, r0, r8
 800574c:	fa09 f303 	lsl.w	r3, r9, r3
 8005750:	4313      	orrs	r3, r2
 8005752:	9304      	str	r3, [sp, #16]
 8005754:	46a2      	mov	sl, r4
 8005756:	e7d2      	b.n	80056fe <_vfiprintf_r+0xe2>
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	1d19      	adds	r1, r3, #4
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	9103      	str	r1, [sp, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	bfbb      	ittet	lt
 8005764:	425b      	neglt	r3, r3
 8005766:	f042 0202 	orrlt.w	r2, r2, #2
 800576a:	9307      	strge	r3, [sp, #28]
 800576c:	9307      	strlt	r3, [sp, #28]
 800576e:	bfb8      	it	lt
 8005770:	9204      	strlt	r2, [sp, #16]
 8005772:	7823      	ldrb	r3, [r4, #0]
 8005774:	2b2e      	cmp	r3, #46	; 0x2e
 8005776:	d10c      	bne.n	8005792 <_vfiprintf_r+0x176>
 8005778:	7863      	ldrb	r3, [r4, #1]
 800577a:	2b2a      	cmp	r3, #42	; 0x2a
 800577c:	d135      	bne.n	80057ea <_vfiprintf_r+0x1ce>
 800577e:	9b03      	ldr	r3, [sp, #12]
 8005780:	1d1a      	adds	r2, r3, #4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	9203      	str	r2, [sp, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	bfb8      	it	lt
 800578a:	f04f 33ff 	movlt.w	r3, #4294967295
 800578e:	3402      	adds	r4, #2
 8005790:	9305      	str	r3, [sp, #20]
 8005792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005878 <_vfiprintf_r+0x25c>
 8005796:	7821      	ldrb	r1, [r4, #0]
 8005798:	2203      	movs	r2, #3
 800579a:	4650      	mov	r0, sl
 800579c:	f7fa fd20 	bl	80001e0 <memchr>
 80057a0:	b140      	cbz	r0, 80057b4 <_vfiprintf_r+0x198>
 80057a2:	2340      	movs	r3, #64	; 0x40
 80057a4:	eba0 000a 	sub.w	r0, r0, sl
 80057a8:	fa03 f000 	lsl.w	r0, r3, r0
 80057ac:	9b04      	ldr	r3, [sp, #16]
 80057ae:	4303      	orrs	r3, r0
 80057b0:	3401      	adds	r4, #1
 80057b2:	9304      	str	r3, [sp, #16]
 80057b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b8:	482c      	ldr	r0, [pc, #176]	; (800586c <_vfiprintf_r+0x250>)
 80057ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057be:	2206      	movs	r2, #6
 80057c0:	f7fa fd0e 	bl	80001e0 <memchr>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d03f      	beq.n	8005848 <_vfiprintf_r+0x22c>
 80057c8:	4b29      	ldr	r3, [pc, #164]	; (8005870 <_vfiprintf_r+0x254>)
 80057ca:	bb1b      	cbnz	r3, 8005814 <_vfiprintf_r+0x1f8>
 80057cc:	9b03      	ldr	r3, [sp, #12]
 80057ce:	3307      	adds	r3, #7
 80057d0:	f023 0307 	bic.w	r3, r3, #7
 80057d4:	3308      	adds	r3, #8
 80057d6:	9303      	str	r3, [sp, #12]
 80057d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057da:	443b      	add	r3, r7
 80057dc:	9309      	str	r3, [sp, #36]	; 0x24
 80057de:	e767      	b.n	80056b0 <_vfiprintf_r+0x94>
 80057e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80057e4:	460c      	mov	r4, r1
 80057e6:	2001      	movs	r0, #1
 80057e8:	e7a5      	b.n	8005736 <_vfiprintf_r+0x11a>
 80057ea:	2300      	movs	r3, #0
 80057ec:	3401      	adds	r4, #1
 80057ee:	9305      	str	r3, [sp, #20]
 80057f0:	4619      	mov	r1, r3
 80057f2:	f04f 0c0a 	mov.w	ip, #10
 80057f6:	4620      	mov	r0, r4
 80057f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057fc:	3a30      	subs	r2, #48	; 0x30
 80057fe:	2a09      	cmp	r2, #9
 8005800:	d903      	bls.n	800580a <_vfiprintf_r+0x1ee>
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0c5      	beq.n	8005792 <_vfiprintf_r+0x176>
 8005806:	9105      	str	r1, [sp, #20]
 8005808:	e7c3      	b.n	8005792 <_vfiprintf_r+0x176>
 800580a:	fb0c 2101 	mla	r1, ip, r1, r2
 800580e:	4604      	mov	r4, r0
 8005810:	2301      	movs	r3, #1
 8005812:	e7f0      	b.n	80057f6 <_vfiprintf_r+0x1da>
 8005814:	ab03      	add	r3, sp, #12
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	462a      	mov	r2, r5
 800581a:	4b16      	ldr	r3, [pc, #88]	; (8005874 <_vfiprintf_r+0x258>)
 800581c:	a904      	add	r1, sp, #16
 800581e:	4630      	mov	r0, r6
 8005820:	f7fd fdd6 	bl	80033d0 <_printf_float>
 8005824:	4607      	mov	r7, r0
 8005826:	1c78      	adds	r0, r7, #1
 8005828:	d1d6      	bne.n	80057d8 <_vfiprintf_r+0x1bc>
 800582a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800582c:	07d9      	lsls	r1, r3, #31
 800582e:	d405      	bmi.n	800583c <_vfiprintf_r+0x220>
 8005830:	89ab      	ldrh	r3, [r5, #12]
 8005832:	059a      	lsls	r2, r3, #22
 8005834:	d402      	bmi.n	800583c <_vfiprintf_r+0x220>
 8005836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005838:	f000 faaf 	bl	8005d9a <__retarget_lock_release_recursive>
 800583c:	89ab      	ldrh	r3, [r5, #12]
 800583e:	065b      	lsls	r3, r3, #25
 8005840:	f53f af12 	bmi.w	8005668 <_vfiprintf_r+0x4c>
 8005844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005846:	e711      	b.n	800566c <_vfiprintf_r+0x50>
 8005848:	ab03      	add	r3, sp, #12
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	462a      	mov	r2, r5
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <_vfiprintf_r+0x258>)
 8005850:	a904      	add	r1, sp, #16
 8005852:	4630      	mov	r0, r6
 8005854:	f7fe f860 	bl	8003918 <_printf_i>
 8005858:	e7e4      	b.n	8005824 <_vfiprintf_r+0x208>
 800585a:	bf00      	nop
 800585c:	0800671c 	.word	0x0800671c
 8005860:	0800673c 	.word	0x0800673c
 8005864:	080066fc 	.word	0x080066fc
 8005868:	080065a4 	.word	0x080065a4
 800586c:	080065ae 	.word	0x080065ae
 8005870:	080033d1 	.word	0x080033d1
 8005874:	080055f9 	.word	0x080055f9
 8005878:	080065aa 	.word	0x080065aa

0800587c <__swbuf_r>:
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	460e      	mov	r6, r1
 8005880:	4614      	mov	r4, r2
 8005882:	4605      	mov	r5, r0
 8005884:	b118      	cbz	r0, 800588e <__swbuf_r+0x12>
 8005886:	6983      	ldr	r3, [r0, #24]
 8005888:	b90b      	cbnz	r3, 800588e <__swbuf_r+0x12>
 800588a:	f000 f9e7 	bl	8005c5c <__sinit>
 800588e:	4b21      	ldr	r3, [pc, #132]	; (8005914 <__swbuf_r+0x98>)
 8005890:	429c      	cmp	r4, r3
 8005892:	d12b      	bne.n	80058ec <__swbuf_r+0x70>
 8005894:	686c      	ldr	r4, [r5, #4]
 8005896:	69a3      	ldr	r3, [r4, #24]
 8005898:	60a3      	str	r3, [r4, #8]
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	071a      	lsls	r2, r3, #28
 800589e:	d52f      	bpl.n	8005900 <__swbuf_r+0x84>
 80058a0:	6923      	ldr	r3, [r4, #16]
 80058a2:	b36b      	cbz	r3, 8005900 <__swbuf_r+0x84>
 80058a4:	6923      	ldr	r3, [r4, #16]
 80058a6:	6820      	ldr	r0, [r4, #0]
 80058a8:	1ac0      	subs	r0, r0, r3
 80058aa:	6963      	ldr	r3, [r4, #20]
 80058ac:	b2f6      	uxtb	r6, r6
 80058ae:	4283      	cmp	r3, r0
 80058b0:	4637      	mov	r7, r6
 80058b2:	dc04      	bgt.n	80058be <__swbuf_r+0x42>
 80058b4:	4621      	mov	r1, r4
 80058b6:	4628      	mov	r0, r5
 80058b8:	f000 f93c 	bl	8005b34 <_fflush_r>
 80058bc:	bb30      	cbnz	r0, 800590c <__swbuf_r+0x90>
 80058be:	68a3      	ldr	r3, [r4, #8]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	60a3      	str	r3, [r4, #8]
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	6022      	str	r2, [r4, #0]
 80058ca:	701e      	strb	r6, [r3, #0]
 80058cc:	6963      	ldr	r3, [r4, #20]
 80058ce:	3001      	adds	r0, #1
 80058d0:	4283      	cmp	r3, r0
 80058d2:	d004      	beq.n	80058de <__swbuf_r+0x62>
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	07db      	lsls	r3, r3, #31
 80058d8:	d506      	bpl.n	80058e8 <__swbuf_r+0x6c>
 80058da:	2e0a      	cmp	r6, #10
 80058dc:	d104      	bne.n	80058e8 <__swbuf_r+0x6c>
 80058de:	4621      	mov	r1, r4
 80058e0:	4628      	mov	r0, r5
 80058e2:	f000 f927 	bl	8005b34 <_fflush_r>
 80058e6:	b988      	cbnz	r0, 800590c <__swbuf_r+0x90>
 80058e8:	4638      	mov	r0, r7
 80058ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <__swbuf_r+0x9c>)
 80058ee:	429c      	cmp	r4, r3
 80058f0:	d101      	bne.n	80058f6 <__swbuf_r+0x7a>
 80058f2:	68ac      	ldr	r4, [r5, #8]
 80058f4:	e7cf      	b.n	8005896 <__swbuf_r+0x1a>
 80058f6:	4b09      	ldr	r3, [pc, #36]	; (800591c <__swbuf_r+0xa0>)
 80058f8:	429c      	cmp	r4, r3
 80058fa:	bf08      	it	eq
 80058fc:	68ec      	ldreq	r4, [r5, #12]
 80058fe:	e7ca      	b.n	8005896 <__swbuf_r+0x1a>
 8005900:	4621      	mov	r1, r4
 8005902:	4628      	mov	r0, r5
 8005904:	f000 f81a 	bl	800593c <__swsetup_r>
 8005908:	2800      	cmp	r0, #0
 800590a:	d0cb      	beq.n	80058a4 <__swbuf_r+0x28>
 800590c:	f04f 37ff 	mov.w	r7, #4294967295
 8005910:	e7ea      	b.n	80058e8 <__swbuf_r+0x6c>
 8005912:	bf00      	nop
 8005914:	0800671c 	.word	0x0800671c
 8005918:	0800673c 	.word	0x0800673c
 800591c:	080066fc 	.word	0x080066fc

08005920 <__ascii_wctomb>:
 8005920:	b149      	cbz	r1, 8005936 <__ascii_wctomb+0x16>
 8005922:	2aff      	cmp	r2, #255	; 0xff
 8005924:	bf85      	ittet	hi
 8005926:	238a      	movhi	r3, #138	; 0x8a
 8005928:	6003      	strhi	r3, [r0, #0]
 800592a:	700a      	strbls	r2, [r1, #0]
 800592c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005930:	bf98      	it	ls
 8005932:	2001      	movls	r0, #1
 8005934:	4770      	bx	lr
 8005936:	4608      	mov	r0, r1
 8005938:	4770      	bx	lr
	...

0800593c <__swsetup_r>:
 800593c:	4b32      	ldr	r3, [pc, #200]	; (8005a08 <__swsetup_r+0xcc>)
 800593e:	b570      	push	{r4, r5, r6, lr}
 8005940:	681d      	ldr	r5, [r3, #0]
 8005942:	4606      	mov	r6, r0
 8005944:	460c      	mov	r4, r1
 8005946:	b125      	cbz	r5, 8005952 <__swsetup_r+0x16>
 8005948:	69ab      	ldr	r3, [r5, #24]
 800594a:	b913      	cbnz	r3, 8005952 <__swsetup_r+0x16>
 800594c:	4628      	mov	r0, r5
 800594e:	f000 f985 	bl	8005c5c <__sinit>
 8005952:	4b2e      	ldr	r3, [pc, #184]	; (8005a0c <__swsetup_r+0xd0>)
 8005954:	429c      	cmp	r4, r3
 8005956:	d10f      	bne.n	8005978 <__swsetup_r+0x3c>
 8005958:	686c      	ldr	r4, [r5, #4]
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005960:	0719      	lsls	r1, r3, #28
 8005962:	d42c      	bmi.n	80059be <__swsetup_r+0x82>
 8005964:	06dd      	lsls	r5, r3, #27
 8005966:	d411      	bmi.n	800598c <__swsetup_r+0x50>
 8005968:	2309      	movs	r3, #9
 800596a:	6033      	str	r3, [r6, #0]
 800596c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005970:	81a3      	strh	r3, [r4, #12]
 8005972:	f04f 30ff 	mov.w	r0, #4294967295
 8005976:	e03e      	b.n	80059f6 <__swsetup_r+0xba>
 8005978:	4b25      	ldr	r3, [pc, #148]	; (8005a10 <__swsetup_r+0xd4>)
 800597a:	429c      	cmp	r4, r3
 800597c:	d101      	bne.n	8005982 <__swsetup_r+0x46>
 800597e:	68ac      	ldr	r4, [r5, #8]
 8005980:	e7eb      	b.n	800595a <__swsetup_r+0x1e>
 8005982:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <__swsetup_r+0xd8>)
 8005984:	429c      	cmp	r4, r3
 8005986:	bf08      	it	eq
 8005988:	68ec      	ldreq	r4, [r5, #12]
 800598a:	e7e6      	b.n	800595a <__swsetup_r+0x1e>
 800598c:	0758      	lsls	r0, r3, #29
 800598e:	d512      	bpl.n	80059b6 <__swsetup_r+0x7a>
 8005990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005992:	b141      	cbz	r1, 80059a6 <__swsetup_r+0x6a>
 8005994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005998:	4299      	cmp	r1, r3
 800599a:	d002      	beq.n	80059a2 <__swsetup_r+0x66>
 800599c:	4630      	mov	r0, r6
 800599e:	f7ff fb31 	bl	8005004 <_free_r>
 80059a2:	2300      	movs	r3, #0
 80059a4:	6363      	str	r3, [r4, #52]	; 0x34
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059ac:	81a3      	strh	r3, [r4, #12]
 80059ae:	2300      	movs	r3, #0
 80059b0:	6063      	str	r3, [r4, #4]
 80059b2:	6923      	ldr	r3, [r4, #16]
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	89a3      	ldrh	r3, [r4, #12]
 80059b8:	f043 0308 	orr.w	r3, r3, #8
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	6923      	ldr	r3, [r4, #16]
 80059c0:	b94b      	cbnz	r3, 80059d6 <__swsetup_r+0x9a>
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059cc:	d003      	beq.n	80059d6 <__swsetup_r+0x9a>
 80059ce:	4621      	mov	r1, r4
 80059d0:	4630      	mov	r0, r6
 80059d2:	f000 fa09 	bl	8005de8 <__smakebuf_r>
 80059d6:	89a0      	ldrh	r0, [r4, #12]
 80059d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059dc:	f010 0301 	ands.w	r3, r0, #1
 80059e0:	d00a      	beq.n	80059f8 <__swsetup_r+0xbc>
 80059e2:	2300      	movs	r3, #0
 80059e4:	60a3      	str	r3, [r4, #8]
 80059e6:	6963      	ldr	r3, [r4, #20]
 80059e8:	425b      	negs	r3, r3
 80059ea:	61a3      	str	r3, [r4, #24]
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	b943      	cbnz	r3, 8005a02 <__swsetup_r+0xc6>
 80059f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059f4:	d1ba      	bne.n	800596c <__swsetup_r+0x30>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	0781      	lsls	r1, r0, #30
 80059fa:	bf58      	it	pl
 80059fc:	6963      	ldrpl	r3, [r4, #20]
 80059fe:	60a3      	str	r3, [r4, #8]
 8005a00:	e7f4      	b.n	80059ec <__swsetup_r+0xb0>
 8005a02:	2000      	movs	r0, #0
 8005a04:	e7f7      	b.n	80059f6 <__swsetup_r+0xba>
 8005a06:	bf00      	nop
 8005a08:	20000008 	.word	0x20000008
 8005a0c:	0800671c 	.word	0x0800671c
 8005a10:	0800673c 	.word	0x0800673c
 8005a14:	080066fc 	.word	0x080066fc

08005a18 <abort>:
 8005a18:	b508      	push	{r3, lr}
 8005a1a:	2006      	movs	r0, #6
 8005a1c:	f000 fa54 	bl	8005ec8 <raise>
 8005a20:	2001      	movs	r0, #1
 8005a22:	f7fc fee3 	bl	80027ec <_exit>
	...

08005a28 <__sflush_r>:
 8005a28:	898a      	ldrh	r2, [r1, #12]
 8005a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2e:	4605      	mov	r5, r0
 8005a30:	0710      	lsls	r0, r2, #28
 8005a32:	460c      	mov	r4, r1
 8005a34:	d458      	bmi.n	8005ae8 <__sflush_r+0xc0>
 8005a36:	684b      	ldr	r3, [r1, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	dc05      	bgt.n	8005a48 <__sflush_r+0x20>
 8005a3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	dc02      	bgt.n	8005a48 <__sflush_r+0x20>
 8005a42:	2000      	movs	r0, #0
 8005a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a4a:	2e00      	cmp	r6, #0
 8005a4c:	d0f9      	beq.n	8005a42 <__sflush_r+0x1a>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a54:	682f      	ldr	r7, [r5, #0]
 8005a56:	602b      	str	r3, [r5, #0]
 8005a58:	d032      	beq.n	8005ac0 <__sflush_r+0x98>
 8005a5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	075a      	lsls	r2, r3, #29
 8005a60:	d505      	bpl.n	8005a6e <__sflush_r+0x46>
 8005a62:	6863      	ldr	r3, [r4, #4]
 8005a64:	1ac0      	subs	r0, r0, r3
 8005a66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a68:	b10b      	cbz	r3, 8005a6e <__sflush_r+0x46>
 8005a6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a6c:	1ac0      	subs	r0, r0, r3
 8005a6e:	2300      	movs	r3, #0
 8005a70:	4602      	mov	r2, r0
 8005a72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a74:	6a21      	ldr	r1, [r4, #32]
 8005a76:	4628      	mov	r0, r5
 8005a78:	47b0      	blx	r6
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	d106      	bne.n	8005a8e <__sflush_r+0x66>
 8005a80:	6829      	ldr	r1, [r5, #0]
 8005a82:	291d      	cmp	r1, #29
 8005a84:	d82c      	bhi.n	8005ae0 <__sflush_r+0xb8>
 8005a86:	4a2a      	ldr	r2, [pc, #168]	; (8005b30 <__sflush_r+0x108>)
 8005a88:	40ca      	lsrs	r2, r1
 8005a8a:	07d6      	lsls	r6, r2, #31
 8005a8c:	d528      	bpl.n	8005ae0 <__sflush_r+0xb8>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	6062      	str	r2, [r4, #4]
 8005a92:	04d9      	lsls	r1, r3, #19
 8005a94:	6922      	ldr	r2, [r4, #16]
 8005a96:	6022      	str	r2, [r4, #0]
 8005a98:	d504      	bpl.n	8005aa4 <__sflush_r+0x7c>
 8005a9a:	1c42      	adds	r2, r0, #1
 8005a9c:	d101      	bne.n	8005aa2 <__sflush_r+0x7a>
 8005a9e:	682b      	ldr	r3, [r5, #0]
 8005aa0:	b903      	cbnz	r3, 8005aa4 <__sflush_r+0x7c>
 8005aa2:	6560      	str	r0, [r4, #84]	; 0x54
 8005aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aa6:	602f      	str	r7, [r5, #0]
 8005aa8:	2900      	cmp	r1, #0
 8005aaa:	d0ca      	beq.n	8005a42 <__sflush_r+0x1a>
 8005aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ab0:	4299      	cmp	r1, r3
 8005ab2:	d002      	beq.n	8005aba <__sflush_r+0x92>
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f7ff faa5 	bl	8005004 <_free_r>
 8005aba:	2000      	movs	r0, #0
 8005abc:	6360      	str	r0, [r4, #52]	; 0x34
 8005abe:	e7c1      	b.n	8005a44 <__sflush_r+0x1c>
 8005ac0:	6a21      	ldr	r1, [r4, #32]
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	47b0      	blx	r6
 8005ac8:	1c41      	adds	r1, r0, #1
 8005aca:	d1c7      	bne.n	8005a5c <__sflush_r+0x34>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0c4      	beq.n	8005a5c <__sflush_r+0x34>
 8005ad2:	2b1d      	cmp	r3, #29
 8005ad4:	d001      	beq.n	8005ada <__sflush_r+0xb2>
 8005ad6:	2b16      	cmp	r3, #22
 8005ad8:	d101      	bne.n	8005ade <__sflush_r+0xb6>
 8005ada:	602f      	str	r7, [r5, #0]
 8005adc:	e7b1      	b.n	8005a42 <__sflush_r+0x1a>
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	e7ad      	b.n	8005a44 <__sflush_r+0x1c>
 8005ae8:	690f      	ldr	r7, [r1, #16]
 8005aea:	2f00      	cmp	r7, #0
 8005aec:	d0a9      	beq.n	8005a42 <__sflush_r+0x1a>
 8005aee:	0793      	lsls	r3, r2, #30
 8005af0:	680e      	ldr	r6, [r1, #0]
 8005af2:	bf08      	it	eq
 8005af4:	694b      	ldreq	r3, [r1, #20]
 8005af6:	600f      	str	r7, [r1, #0]
 8005af8:	bf18      	it	ne
 8005afa:	2300      	movne	r3, #0
 8005afc:	eba6 0807 	sub.w	r8, r6, r7
 8005b00:	608b      	str	r3, [r1, #8]
 8005b02:	f1b8 0f00 	cmp.w	r8, #0
 8005b06:	dd9c      	ble.n	8005a42 <__sflush_r+0x1a>
 8005b08:	6a21      	ldr	r1, [r4, #32]
 8005b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b0c:	4643      	mov	r3, r8
 8005b0e:	463a      	mov	r2, r7
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b0      	blx	r6
 8005b14:	2800      	cmp	r0, #0
 8005b16:	dc06      	bgt.n	8005b26 <__sflush_r+0xfe>
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295
 8005b24:	e78e      	b.n	8005a44 <__sflush_r+0x1c>
 8005b26:	4407      	add	r7, r0
 8005b28:	eba8 0800 	sub.w	r8, r8, r0
 8005b2c:	e7e9      	b.n	8005b02 <__sflush_r+0xda>
 8005b2e:	bf00      	nop
 8005b30:	20400001 	.word	0x20400001

08005b34 <_fflush_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	690b      	ldr	r3, [r1, #16]
 8005b38:	4605      	mov	r5, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	b913      	cbnz	r3, 8005b44 <_fflush_r+0x10>
 8005b3e:	2500      	movs	r5, #0
 8005b40:	4628      	mov	r0, r5
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	b118      	cbz	r0, 8005b4e <_fflush_r+0x1a>
 8005b46:	6983      	ldr	r3, [r0, #24]
 8005b48:	b90b      	cbnz	r3, 8005b4e <_fflush_r+0x1a>
 8005b4a:	f000 f887 	bl	8005c5c <__sinit>
 8005b4e:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <_fflush_r+0x6c>)
 8005b50:	429c      	cmp	r4, r3
 8005b52:	d11b      	bne.n	8005b8c <_fflush_r+0x58>
 8005b54:	686c      	ldr	r4, [r5, #4]
 8005b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0ef      	beq.n	8005b3e <_fflush_r+0xa>
 8005b5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b60:	07d0      	lsls	r0, r2, #31
 8005b62:	d404      	bmi.n	8005b6e <_fflush_r+0x3a>
 8005b64:	0599      	lsls	r1, r3, #22
 8005b66:	d402      	bmi.n	8005b6e <_fflush_r+0x3a>
 8005b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b6a:	f000 f915 	bl	8005d98 <__retarget_lock_acquire_recursive>
 8005b6e:	4628      	mov	r0, r5
 8005b70:	4621      	mov	r1, r4
 8005b72:	f7ff ff59 	bl	8005a28 <__sflush_r>
 8005b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b78:	07da      	lsls	r2, r3, #31
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	d4e0      	bmi.n	8005b40 <_fflush_r+0xc>
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	059b      	lsls	r3, r3, #22
 8005b82:	d4dd      	bmi.n	8005b40 <_fflush_r+0xc>
 8005b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b86:	f000 f908 	bl	8005d9a <__retarget_lock_release_recursive>
 8005b8a:	e7d9      	b.n	8005b40 <_fflush_r+0xc>
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <_fflush_r+0x70>)
 8005b8e:	429c      	cmp	r4, r3
 8005b90:	d101      	bne.n	8005b96 <_fflush_r+0x62>
 8005b92:	68ac      	ldr	r4, [r5, #8]
 8005b94:	e7df      	b.n	8005b56 <_fflush_r+0x22>
 8005b96:	4b04      	ldr	r3, [pc, #16]	; (8005ba8 <_fflush_r+0x74>)
 8005b98:	429c      	cmp	r4, r3
 8005b9a:	bf08      	it	eq
 8005b9c:	68ec      	ldreq	r4, [r5, #12]
 8005b9e:	e7da      	b.n	8005b56 <_fflush_r+0x22>
 8005ba0:	0800671c 	.word	0x0800671c
 8005ba4:	0800673c 	.word	0x0800673c
 8005ba8:	080066fc 	.word	0x080066fc

08005bac <std>:
 8005bac:	2300      	movs	r3, #0
 8005bae:	b510      	push	{r4, lr}
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8005bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bba:	6083      	str	r3, [r0, #8]
 8005bbc:	8181      	strh	r1, [r0, #12]
 8005bbe:	6643      	str	r3, [r0, #100]	; 0x64
 8005bc0:	81c2      	strh	r2, [r0, #14]
 8005bc2:	6183      	str	r3, [r0, #24]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	305c      	adds	r0, #92	; 0x5c
 8005bca:	f7fd fb59 	bl	8003280 <memset>
 8005bce:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <std+0x38>)
 8005bd0:	6263      	str	r3, [r4, #36]	; 0x24
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <std+0x3c>)
 8005bd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <std+0x40>)
 8005bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bda:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <std+0x44>)
 8005bdc:	6224      	str	r4, [r4, #32]
 8005bde:	6323      	str	r3, [r4, #48]	; 0x30
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	bf00      	nop
 8005be4:	08005f01 	.word	0x08005f01
 8005be8:	08005f23 	.word	0x08005f23
 8005bec:	08005f5b 	.word	0x08005f5b
 8005bf0:	08005f7f 	.word	0x08005f7f

08005bf4 <_cleanup_r>:
 8005bf4:	4901      	ldr	r1, [pc, #4]	; (8005bfc <_cleanup_r+0x8>)
 8005bf6:	f000 b8af 	b.w	8005d58 <_fwalk_reent>
 8005bfa:	bf00      	nop
 8005bfc:	08005b35 	.word	0x08005b35

08005c00 <__sfmoreglue>:
 8005c00:	b570      	push	{r4, r5, r6, lr}
 8005c02:	2268      	movs	r2, #104	; 0x68
 8005c04:	1e4d      	subs	r5, r1, #1
 8005c06:	4355      	muls	r5, r2
 8005c08:	460e      	mov	r6, r1
 8005c0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c0e:	f7ff fa65 	bl	80050dc <_malloc_r>
 8005c12:	4604      	mov	r4, r0
 8005c14:	b140      	cbz	r0, 8005c28 <__sfmoreglue+0x28>
 8005c16:	2100      	movs	r1, #0
 8005c18:	e9c0 1600 	strd	r1, r6, [r0]
 8005c1c:	300c      	adds	r0, #12
 8005c1e:	60a0      	str	r0, [r4, #8]
 8005c20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c24:	f7fd fb2c 	bl	8003280 <memset>
 8005c28:	4620      	mov	r0, r4
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}

08005c2c <__sfp_lock_acquire>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	; (8005c34 <__sfp_lock_acquire+0x8>)
 8005c2e:	f000 b8b3 	b.w	8005d98 <__retarget_lock_acquire_recursive>
 8005c32:	bf00      	nop
 8005c34:	20000241 	.word	0x20000241

08005c38 <__sfp_lock_release>:
 8005c38:	4801      	ldr	r0, [pc, #4]	; (8005c40 <__sfp_lock_release+0x8>)
 8005c3a:	f000 b8ae 	b.w	8005d9a <__retarget_lock_release_recursive>
 8005c3e:	bf00      	nop
 8005c40:	20000241 	.word	0x20000241

08005c44 <__sinit_lock_acquire>:
 8005c44:	4801      	ldr	r0, [pc, #4]	; (8005c4c <__sinit_lock_acquire+0x8>)
 8005c46:	f000 b8a7 	b.w	8005d98 <__retarget_lock_acquire_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	20000242 	.word	0x20000242

08005c50 <__sinit_lock_release>:
 8005c50:	4801      	ldr	r0, [pc, #4]	; (8005c58 <__sinit_lock_release+0x8>)
 8005c52:	f000 b8a2 	b.w	8005d9a <__retarget_lock_release_recursive>
 8005c56:	bf00      	nop
 8005c58:	20000242 	.word	0x20000242

08005c5c <__sinit>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	4604      	mov	r4, r0
 8005c60:	f7ff fff0 	bl	8005c44 <__sinit_lock_acquire>
 8005c64:	69a3      	ldr	r3, [r4, #24]
 8005c66:	b11b      	cbz	r3, 8005c70 <__sinit+0x14>
 8005c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c6c:	f7ff bff0 	b.w	8005c50 <__sinit_lock_release>
 8005c70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c74:	6523      	str	r3, [r4, #80]	; 0x50
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <__sinit+0x68>)
 8005c78:	4a13      	ldr	r2, [pc, #76]	; (8005cc8 <__sinit+0x6c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c7e:	42a3      	cmp	r3, r4
 8005c80:	bf04      	itt	eq
 8005c82:	2301      	moveq	r3, #1
 8005c84:	61a3      	streq	r3, [r4, #24]
 8005c86:	4620      	mov	r0, r4
 8005c88:	f000 f820 	bl	8005ccc <__sfp>
 8005c8c:	6060      	str	r0, [r4, #4]
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f000 f81c 	bl	8005ccc <__sfp>
 8005c94:	60a0      	str	r0, [r4, #8]
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 f818 	bl	8005ccc <__sfp>
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	60e0      	str	r0, [r4, #12]
 8005ca0:	2104      	movs	r1, #4
 8005ca2:	6860      	ldr	r0, [r4, #4]
 8005ca4:	f7ff ff82 	bl	8005bac <std>
 8005ca8:	68a0      	ldr	r0, [r4, #8]
 8005caa:	2201      	movs	r2, #1
 8005cac:	2109      	movs	r1, #9
 8005cae:	f7ff ff7d 	bl	8005bac <std>
 8005cb2:	68e0      	ldr	r0, [r4, #12]
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	2112      	movs	r1, #18
 8005cb8:	f7ff ff78 	bl	8005bac <std>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	61a3      	str	r3, [r4, #24]
 8005cc0:	e7d2      	b.n	8005c68 <__sinit+0xc>
 8005cc2:	bf00      	nop
 8005cc4:	08006380 	.word	0x08006380
 8005cc8:	08005bf5 	.word	0x08005bf5

08005ccc <__sfp>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	4607      	mov	r7, r0
 8005cd0:	f7ff ffac 	bl	8005c2c <__sfp_lock_acquire>
 8005cd4:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <__sfp+0x84>)
 8005cd6:	681e      	ldr	r6, [r3, #0]
 8005cd8:	69b3      	ldr	r3, [r6, #24]
 8005cda:	b913      	cbnz	r3, 8005ce2 <__sfp+0x16>
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f7ff ffbd 	bl	8005c5c <__sinit>
 8005ce2:	3648      	adds	r6, #72	; 0x48
 8005ce4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	d503      	bpl.n	8005cf4 <__sfp+0x28>
 8005cec:	6833      	ldr	r3, [r6, #0]
 8005cee:	b30b      	cbz	r3, 8005d34 <__sfp+0x68>
 8005cf0:	6836      	ldr	r6, [r6, #0]
 8005cf2:	e7f7      	b.n	8005ce4 <__sfp+0x18>
 8005cf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cf8:	b9d5      	cbnz	r5, 8005d30 <__sfp+0x64>
 8005cfa:	4b16      	ldr	r3, [pc, #88]	; (8005d54 <__sfp+0x88>)
 8005cfc:	60e3      	str	r3, [r4, #12]
 8005cfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d02:	6665      	str	r5, [r4, #100]	; 0x64
 8005d04:	f000 f847 	bl	8005d96 <__retarget_lock_init_recursive>
 8005d08:	f7ff ff96 	bl	8005c38 <__sfp_lock_release>
 8005d0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d14:	6025      	str	r5, [r4, #0]
 8005d16:	61a5      	str	r5, [r4, #24]
 8005d18:	2208      	movs	r2, #8
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d20:	f7fd faae 	bl	8003280 <memset>
 8005d24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d30:	3468      	adds	r4, #104	; 0x68
 8005d32:	e7d9      	b.n	8005ce8 <__sfp+0x1c>
 8005d34:	2104      	movs	r1, #4
 8005d36:	4638      	mov	r0, r7
 8005d38:	f7ff ff62 	bl	8005c00 <__sfmoreglue>
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	6030      	str	r0, [r6, #0]
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d1d5      	bne.n	8005cf0 <__sfp+0x24>
 8005d44:	f7ff ff78 	bl	8005c38 <__sfp_lock_release>
 8005d48:	230c      	movs	r3, #12
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	e7ee      	b.n	8005d2c <__sfp+0x60>
 8005d4e:	bf00      	nop
 8005d50:	08006380 	.word	0x08006380
 8005d54:	ffff0001 	.word	0xffff0001

08005d58 <_fwalk_reent>:
 8005d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	4688      	mov	r8, r1
 8005d60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d64:	2700      	movs	r7, #0
 8005d66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d6a:	f1b9 0901 	subs.w	r9, r9, #1
 8005d6e:	d505      	bpl.n	8005d7c <_fwalk_reent+0x24>
 8005d70:	6824      	ldr	r4, [r4, #0]
 8005d72:	2c00      	cmp	r4, #0
 8005d74:	d1f7      	bne.n	8005d66 <_fwalk_reent+0xe>
 8005d76:	4638      	mov	r0, r7
 8005d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d7c:	89ab      	ldrh	r3, [r5, #12]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d907      	bls.n	8005d92 <_fwalk_reent+0x3a>
 8005d82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d86:	3301      	adds	r3, #1
 8005d88:	d003      	beq.n	8005d92 <_fwalk_reent+0x3a>
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	47c0      	blx	r8
 8005d90:	4307      	orrs	r7, r0
 8005d92:	3568      	adds	r5, #104	; 0x68
 8005d94:	e7e9      	b.n	8005d6a <_fwalk_reent+0x12>

08005d96 <__retarget_lock_init_recursive>:
 8005d96:	4770      	bx	lr

08005d98 <__retarget_lock_acquire_recursive>:
 8005d98:	4770      	bx	lr

08005d9a <__retarget_lock_release_recursive>:
 8005d9a:	4770      	bx	lr

08005d9c <__swhatbuf_r>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	460e      	mov	r6, r1
 8005da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da4:	2900      	cmp	r1, #0
 8005da6:	b096      	sub	sp, #88	; 0x58
 8005da8:	4614      	mov	r4, r2
 8005daa:	461d      	mov	r5, r3
 8005dac:	da08      	bge.n	8005dc0 <__swhatbuf_r+0x24>
 8005dae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	602a      	str	r2, [r5, #0]
 8005db6:	061a      	lsls	r2, r3, #24
 8005db8:	d410      	bmi.n	8005ddc <__swhatbuf_r+0x40>
 8005dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dbe:	e00e      	b.n	8005dde <__swhatbuf_r+0x42>
 8005dc0:	466a      	mov	r2, sp
 8005dc2:	f000 f903 	bl	8005fcc <_fstat_r>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	dbf1      	blt.n	8005dae <__swhatbuf_r+0x12>
 8005dca:	9a01      	ldr	r2, [sp, #4]
 8005dcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005dd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005dd4:	425a      	negs	r2, r3
 8005dd6:	415a      	adcs	r2, r3
 8005dd8:	602a      	str	r2, [r5, #0]
 8005dda:	e7ee      	b.n	8005dba <__swhatbuf_r+0x1e>
 8005ddc:	2340      	movs	r3, #64	; 0x40
 8005dde:	2000      	movs	r0, #0
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	b016      	add	sp, #88	; 0x58
 8005de4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005de8 <__smakebuf_r>:
 8005de8:	898b      	ldrh	r3, [r1, #12]
 8005dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dec:	079d      	lsls	r5, r3, #30
 8005dee:	4606      	mov	r6, r0
 8005df0:	460c      	mov	r4, r1
 8005df2:	d507      	bpl.n	8005e04 <__smakebuf_r+0x1c>
 8005df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	6163      	str	r3, [r4, #20]
 8005e00:	b002      	add	sp, #8
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	ab01      	add	r3, sp, #4
 8005e06:	466a      	mov	r2, sp
 8005e08:	f7ff ffc8 	bl	8005d9c <__swhatbuf_r>
 8005e0c:	9900      	ldr	r1, [sp, #0]
 8005e0e:	4605      	mov	r5, r0
 8005e10:	4630      	mov	r0, r6
 8005e12:	f7ff f963 	bl	80050dc <_malloc_r>
 8005e16:	b948      	cbnz	r0, 8005e2c <__smakebuf_r+0x44>
 8005e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e1c:	059a      	lsls	r2, r3, #22
 8005e1e:	d4ef      	bmi.n	8005e00 <__smakebuf_r+0x18>
 8005e20:	f023 0303 	bic.w	r3, r3, #3
 8005e24:	f043 0302 	orr.w	r3, r3, #2
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	e7e3      	b.n	8005df4 <__smakebuf_r+0xc>
 8005e2c:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <__smakebuf_r+0x7c>)
 8005e2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	6020      	str	r0, [r4, #0]
 8005e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	9b00      	ldr	r3, [sp, #0]
 8005e3c:	6163      	str	r3, [r4, #20]
 8005e3e:	9b01      	ldr	r3, [sp, #4]
 8005e40:	6120      	str	r0, [r4, #16]
 8005e42:	b15b      	cbz	r3, 8005e5c <__smakebuf_r+0x74>
 8005e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e48:	4630      	mov	r0, r6
 8005e4a:	f000 f8d1 	bl	8005ff0 <_isatty_r>
 8005e4e:	b128      	cbz	r0, 8005e5c <__smakebuf_r+0x74>
 8005e50:	89a3      	ldrh	r3, [r4, #12]
 8005e52:	f023 0303 	bic.w	r3, r3, #3
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	81a3      	strh	r3, [r4, #12]
 8005e5c:	89a0      	ldrh	r0, [r4, #12]
 8005e5e:	4305      	orrs	r5, r0
 8005e60:	81a5      	strh	r5, [r4, #12]
 8005e62:	e7cd      	b.n	8005e00 <__smakebuf_r+0x18>
 8005e64:	08005bf5 	.word	0x08005bf5

08005e68 <_malloc_usable_size_r>:
 8005e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e6c:	1f18      	subs	r0, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	bfbc      	itt	lt
 8005e72:	580b      	ldrlt	r3, [r1, r0]
 8005e74:	18c0      	addlt	r0, r0, r3
 8005e76:	4770      	bx	lr

08005e78 <_raise_r>:
 8005e78:	291f      	cmp	r1, #31
 8005e7a:	b538      	push	{r3, r4, r5, lr}
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	460d      	mov	r5, r1
 8005e80:	d904      	bls.n	8005e8c <_raise_r+0x14>
 8005e82:	2316      	movs	r3, #22
 8005e84:	6003      	str	r3, [r0, #0]
 8005e86:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e8e:	b112      	cbz	r2, 8005e96 <_raise_r+0x1e>
 8005e90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e94:	b94b      	cbnz	r3, 8005eaa <_raise_r+0x32>
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 f830 	bl	8005efc <_getpid_r>
 8005e9c:	462a      	mov	r2, r5
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ea6:	f000 b817 	b.w	8005ed8 <_kill_r>
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d00a      	beq.n	8005ec4 <_raise_r+0x4c>
 8005eae:	1c59      	adds	r1, r3, #1
 8005eb0:	d103      	bne.n	8005eba <_raise_r+0x42>
 8005eb2:	2316      	movs	r3, #22
 8005eb4:	6003      	str	r3, [r0, #0]
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	e7e7      	b.n	8005e8a <_raise_r+0x12>
 8005eba:	2400      	movs	r4, #0
 8005ebc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	4798      	blx	r3
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	e7e0      	b.n	8005e8a <_raise_r+0x12>

08005ec8 <raise>:
 8005ec8:	4b02      	ldr	r3, [pc, #8]	; (8005ed4 <raise+0xc>)
 8005eca:	4601      	mov	r1, r0
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	f7ff bfd3 	b.w	8005e78 <_raise_r>
 8005ed2:	bf00      	nop
 8005ed4:	20000008 	.word	0x20000008

08005ed8 <_kill_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4d07      	ldr	r5, [pc, #28]	; (8005ef8 <_kill_r+0x20>)
 8005edc:	2300      	movs	r3, #0
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	f7fc fc71 	bl	80027cc <_kill>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	d102      	bne.n	8005ef4 <_kill_r+0x1c>
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	b103      	cbz	r3, 8005ef4 <_kill_r+0x1c>
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	bd38      	pop	{r3, r4, r5, pc}
 8005ef6:	bf00      	nop
 8005ef8:	2000023c 	.word	0x2000023c

08005efc <_getpid_r>:
 8005efc:	f7fc bc5e 	b.w	80027bc <_getpid>

08005f00 <__sread>:
 8005f00:	b510      	push	{r4, lr}
 8005f02:	460c      	mov	r4, r1
 8005f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f08:	f000 f894 	bl	8006034 <_read_r>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	bfab      	itete	ge
 8005f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f12:	89a3      	ldrhlt	r3, [r4, #12]
 8005f14:	181b      	addge	r3, r3, r0
 8005f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f1a:	bfac      	ite	ge
 8005f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f1e:	81a3      	strhlt	r3, [r4, #12]
 8005f20:	bd10      	pop	{r4, pc}

08005f22 <__swrite>:
 8005f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f26:	461f      	mov	r7, r3
 8005f28:	898b      	ldrh	r3, [r1, #12]
 8005f2a:	05db      	lsls	r3, r3, #23
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	4616      	mov	r6, r2
 8005f32:	d505      	bpl.n	8005f40 <__swrite+0x1e>
 8005f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f38:	2302      	movs	r3, #2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f000 f868 	bl	8006010 <_lseek_r>
 8005f40:	89a3      	ldrh	r3, [r4, #12]
 8005f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f4a:	81a3      	strh	r3, [r4, #12]
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	463b      	mov	r3, r7
 8005f50:	4628      	mov	r0, r5
 8005f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f56:	f000 b817 	b.w	8005f88 <_write_r>

08005f5a <__sseek>:
 8005f5a:	b510      	push	{r4, lr}
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f62:	f000 f855 	bl	8006010 <_lseek_r>
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	89a3      	ldrh	r3, [r4, #12]
 8005f6a:	bf15      	itete	ne
 8005f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f76:	81a3      	strheq	r3, [r4, #12]
 8005f78:	bf18      	it	ne
 8005f7a:	81a3      	strhne	r3, [r4, #12]
 8005f7c:	bd10      	pop	{r4, pc}

08005f7e <__sclose>:
 8005f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f82:	f000 b813 	b.w	8005fac <_close_r>
	...

08005f88 <_write_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4d07      	ldr	r5, [pc, #28]	; (8005fa8 <_write_r+0x20>)
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	4608      	mov	r0, r1
 8005f90:	4611      	mov	r1, r2
 8005f92:	2200      	movs	r2, #0
 8005f94:	602a      	str	r2, [r5, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f7fc fc4f 	bl	800283a <_write>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_write_r+0x1e>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_write_r+0x1e>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	2000023c 	.word	0x2000023c

08005fac <_close_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4d06      	ldr	r5, [pc, #24]	; (8005fc8 <_close_r+0x1c>)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	f7fc fc5b 	bl	8002872 <_close>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_close_r+0x1a>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_close_r+0x1a>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	2000023c 	.word	0x2000023c

08005fcc <_fstat_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d07      	ldr	r5, [pc, #28]	; (8005fec <_fstat_r+0x20>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	f7fc fc56 	bl	800288a <_fstat>
 8005fde:	1c43      	adds	r3, r0, #1
 8005fe0:	d102      	bne.n	8005fe8 <_fstat_r+0x1c>
 8005fe2:	682b      	ldr	r3, [r5, #0]
 8005fe4:	b103      	cbz	r3, 8005fe8 <_fstat_r+0x1c>
 8005fe6:	6023      	str	r3, [r4, #0]
 8005fe8:	bd38      	pop	{r3, r4, r5, pc}
 8005fea:	bf00      	nop
 8005fec:	2000023c 	.word	0x2000023c

08005ff0 <_isatty_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4d06      	ldr	r5, [pc, #24]	; (800600c <_isatty_r+0x1c>)
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	4608      	mov	r0, r1
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	f7fc fc55 	bl	80028aa <_isatty>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d102      	bne.n	800600a <_isatty_r+0x1a>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	b103      	cbz	r3, 800600a <_isatty_r+0x1a>
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	2000023c 	.word	0x2000023c

08006010 <_lseek_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4d07      	ldr	r5, [pc, #28]	; (8006030 <_lseek_r+0x20>)
 8006014:	4604      	mov	r4, r0
 8006016:	4608      	mov	r0, r1
 8006018:	4611      	mov	r1, r2
 800601a:	2200      	movs	r2, #0
 800601c:	602a      	str	r2, [r5, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	f7fc fc4e 	bl	80028c0 <_lseek>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_lseek_r+0x1e>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_lseek_r+0x1e>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	2000023c 	.word	0x2000023c

08006034 <_read_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4d07      	ldr	r5, [pc, #28]	; (8006054 <_read_r+0x20>)
 8006038:	4604      	mov	r4, r0
 800603a:	4608      	mov	r0, r1
 800603c:	4611      	mov	r1, r2
 800603e:	2200      	movs	r2, #0
 8006040:	602a      	str	r2, [r5, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	f7fc fbdc 	bl	8002800 <_read>
 8006048:	1c43      	adds	r3, r0, #1
 800604a:	d102      	bne.n	8006052 <_read_r+0x1e>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	b103      	cbz	r3, 8006052 <_read_r+0x1e>
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	2000023c 	.word	0x2000023c

08006058 <_init>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	bf00      	nop
 800605c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605e:	bc08      	pop	{r3}
 8006060:	469e      	mov	lr, r3
 8006062:	4770      	bx	lr

08006064 <_fini>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	bf00      	nop
 8006068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606a:	bc08      	pop	{r3}
 800606c:	469e      	mov	lr, r3
 800606e:	4770      	bx	lr
